/*
Package bgp is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.10.0: (ygot: v0.29.12)
using the following YANG input files:
  - models-yang/models/bgp/open-traffic-generator-bgp.yang
  - models-yang/models/discovery/open-traffic-generator-discovery.yang
  - models-yang/models/flow/open-traffic-generator-flow.yang
  - models-yang/models/interface/open-traffic-generator-port.yang
  - models-yang/models/isis/open-traffic-generator-isis.yang
  - models-yang/models/lacp/open-traffic-generator-lacp.yang
  - models-yang/models/lag/open-traffic-generator-lag.yang
  - models-yang/models/lldp/open-traffic-generator-lldp.yang
  - models-yang/models/rsvp/open-traffic-generator-rsvp.yang
  - models-yang/models/types/open-traffic-generator-types.yang

Imported modules were sourced from:
  - models-yang/models/...
*/
package bgp

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/otg"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// BgpPeer_NamePath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/name YANG schema element.
type BgpPeer_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_NamePathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/name YANG schema element.
type BgpPeer_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/name"
//	Path from root:       "/bgp-peers/bgp-peer/state/name"
func (n *BgpPeer_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"BgpPeer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/name"
//	Path from root:       "/bgp-peers/bgp-peer/state/name"
func (n *BgpPeer_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BgpPeer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *BgpPeer_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"BgpPeer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *BgpPeer_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BgpPeer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_SessionStatePath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/session-state YANG schema element.
type BgpPeer_SessionStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_SessionStatePathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/session-state YANG schema element.
type BgpPeer_SessionStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/session-state"
//	Path from root:       "/bgp-peers/bgp-peer/state/session-state"
func (n *BgpPeer_SessionStatePath) State() ygnmi.SingletonQuery[oc.E_BgpPeer_SessionState] {
	return ygnmi.NewSingletonQuery[oc.E_BgpPeer_SessionState](
		"BgpPeer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPeer_SessionState, bool) {
			ret := gs.(*oc.BgpPeer).SessionState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/session-state"
//	Path from root:       "/bgp-peers/bgp-peer/state/session-state"
func (n *BgpPeer_SessionStatePathAny) State() ygnmi.WildcardQuery[oc.E_BgpPeer_SessionState] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPeer_SessionState](
		"BgpPeer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPeer_SessionState, bool) {
			ret := gs.(*oc.BgpPeer).SessionState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeerPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer YANG schema element.
type BgpPeerPath struct {
	*ygnmi.NodePath
}

// BgpPeerPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer YANG schema element.
type BgpPeerPathAny struct {
	*ygnmi.NodePath
}

// BgpPeerPathMap represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer YANG schema element.
type BgpPeerPathMap struct {
	*ygnmi.NodePath
}

// BgpPeerPathMapAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer YANG schema element.
type BgpPeerPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters of an individual BGP peer.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/counters"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters"
func (n *BgpPeerPath) Counters() *BgpPeer_CountersPath {
	ps := &BgpPeer_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters of an individual BGP peer.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/counters"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters"
func (n *BgpPeerPathAny) Counters() *BgpPeer_CountersPathAny {
	ps := &BgpPeer_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): An arbitary name of the BGP peer determined by the ATE
// configuration.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/name"
//	Path from root:       "/bgp-peers/bgp-peer/*/name"
func (n *BgpPeerPath) Name() *BgpPeer_NamePath {
	ps := &BgpPeer_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An arbitary name of the BGP peer determined by the ATE
// configuration.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/name"
//	Path from root:       "/bgp-peers/bgp-peer/*/name"
func (n *BgpPeerPathAny) Name() *BgpPeer_NamePathAny {
	ps := &BgpPeer_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionState (leaf): Operational state of the BGP peer
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/session-state"
//	Path from root:       "/bgp-peers/bgp-peer/state/session-state"
func (n *BgpPeerPath) SessionState() *BgpPeer_SessionStatePath {
	ps := &BgpPeer_SessionStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionState (leaf): Operational state of the BGP peer
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/session-state"
//	Path from root:       "/bgp-peers/bgp-peer/state/session-state"
func (n *BgpPeerPathAny) SessionState() *BgpPeer_SessionStatePathAny {
	ps := &BgpPeer_SessionStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastIpv4PrefixAny (list): A list of BGP unicast IPv4 prefixes.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "unicast-ipv4-prefixes/unicast-ipv4-prefix"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix"
func (n *BgpPeerPath) UnicastIpv4PrefixAny() *BgpPeer_UnicastIpv4PrefixPathAny {
	ps := &BgpPeer_UnicastIpv4PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-ipv4-prefixes", "unicast-ipv4-prefix"},
			map[string]interface{}{"address": "*", "prefix-length": "*", "origin": "*", "path-id": "*"},
			n,
		),
	}
	return ps
}

// UnicastIpv4PrefixAny (list): A list of BGP unicast IPv4 prefixes.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "unicast-ipv4-prefixes/unicast-ipv4-prefix"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix"
func (n *BgpPeerPathAny) UnicastIpv4PrefixAny() *BgpPeer_UnicastIpv4PrefixPathAny {
	ps := &BgpPeer_UnicastIpv4PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-ipv4-prefixes", "unicast-ipv4-prefix"},
			map[string]interface{}{"address": "*", "prefix-length": "*", "origin": "*", "path-id": "*"},
			n,
		),
	}
	return ps
}

// WithAddress sets BgpPeer_UnicastIpv4PrefixPathAny's key "address" to the specified value.
// Address: string
func (n *BgpPeer_UnicastIpv4PrefixPathAny) WithAddress(Address string) *BgpPeer_UnicastIpv4PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "address", Address)
	return n
}

// WithPrefixLength sets BgpPeer_UnicastIpv4PrefixPathAny's key "prefix-length" to the specified value.
// PrefixLength: uint32
func (n *BgpPeer_UnicastIpv4PrefixPathAny) WithPrefixLength(PrefixLength uint32) *BgpPeer_UnicastIpv4PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "prefix-length", PrefixLength)
	return n
}

// WithOrigin sets BgpPeer_UnicastIpv4PrefixPathAny's key "origin" to the specified value.
// Origin: oc.E_UnicastIpv4Prefix_Origin
func (n *BgpPeer_UnicastIpv4PrefixPathAny) WithOrigin(Origin oc.E_UnicastIpv4Prefix_Origin) *BgpPeer_UnicastIpv4PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "origin", Origin)
	return n
}

// WithPathId sets BgpPeer_UnicastIpv4PrefixPathAny's key "path-id" to the specified value.
// PathId: uint32
func (n *BgpPeer_UnicastIpv4PrefixPathAny) WithPathId(PathId uint32) *BgpPeer_UnicastIpv4PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "path-id", PathId)
	return n
}

// UnicastIpv4Prefix (list): A list of BGP unicast IPv4 prefixes.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "unicast-ipv4-prefixes/unicast-ipv4-prefix"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix"
//
//	Address: string
//	PrefixLength: uint32
//	Origin: oc.E_UnicastIpv4Prefix_Origin
//	PathId: uint32
func (n *BgpPeerPath) UnicastIpv4Prefix(Address string, PrefixLength uint32, Origin oc.E_UnicastIpv4Prefix_Origin, PathId uint32) *BgpPeer_UnicastIpv4PrefixPath {
	ps := &BgpPeer_UnicastIpv4PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-ipv4-prefixes", "unicast-ipv4-prefix"},
			map[string]interface{}{"address": Address, "prefix-length": PrefixLength, "origin": Origin, "path-id": PathId},
			n,
		),
	}
	return ps
}

// UnicastIpv4Prefix (list): A list of BGP unicast IPv4 prefixes.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "unicast-ipv4-prefixes/unicast-ipv4-prefix"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix"
//
//	Address: string
//	PrefixLength: uint32
//	Origin: oc.E_UnicastIpv4Prefix_Origin
//	PathId: uint32
func (n *BgpPeerPathAny) UnicastIpv4Prefix(Address string, PrefixLength uint32, Origin oc.E_UnicastIpv4Prefix_Origin, PathId uint32) *BgpPeer_UnicastIpv4PrefixPathAny {
	ps := &BgpPeer_UnicastIpv4PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-ipv4-prefixes", "unicast-ipv4-prefix"},
			map[string]interface{}{"address": Address, "prefix-length": PrefixLength, "origin": Origin, "path-id": PathId},
			n,
		),
	}
	return ps
}

// UnicastIpv6PrefixAny (list): A list of BGP unicast IPv6 prefixes.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "unicast-ipv6-prefixes/unicast-ipv6-prefix"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix"
func (n *BgpPeerPath) UnicastIpv6PrefixAny() *BgpPeer_UnicastIpv6PrefixPathAny {
	ps := &BgpPeer_UnicastIpv6PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-ipv6-prefixes", "unicast-ipv6-prefix"},
			map[string]interface{}{"address": "*", "prefix-length": "*", "origin": "*", "path-id": "*"},
			n,
		),
	}
	return ps
}

// UnicastIpv6PrefixAny (list): A list of BGP unicast IPv6 prefixes.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "unicast-ipv6-prefixes/unicast-ipv6-prefix"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix"
func (n *BgpPeerPathAny) UnicastIpv6PrefixAny() *BgpPeer_UnicastIpv6PrefixPathAny {
	ps := &BgpPeer_UnicastIpv6PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-ipv6-prefixes", "unicast-ipv6-prefix"},
			map[string]interface{}{"address": "*", "prefix-length": "*", "origin": "*", "path-id": "*"},
			n,
		),
	}
	return ps
}

// WithAddress sets BgpPeer_UnicastIpv6PrefixPathAny's key "address" to the specified value.
// Address: string
func (n *BgpPeer_UnicastIpv6PrefixPathAny) WithAddress(Address string) *BgpPeer_UnicastIpv6PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "address", Address)
	return n
}

// WithPrefixLength sets BgpPeer_UnicastIpv6PrefixPathAny's key "prefix-length" to the specified value.
// PrefixLength: uint32
func (n *BgpPeer_UnicastIpv6PrefixPathAny) WithPrefixLength(PrefixLength uint32) *BgpPeer_UnicastIpv6PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "prefix-length", PrefixLength)
	return n
}

// WithOrigin sets BgpPeer_UnicastIpv6PrefixPathAny's key "origin" to the specified value.
// Origin: oc.E_UnicastIpv6Prefix_Origin
func (n *BgpPeer_UnicastIpv6PrefixPathAny) WithOrigin(Origin oc.E_UnicastIpv6Prefix_Origin) *BgpPeer_UnicastIpv6PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "origin", Origin)
	return n
}

// WithPathId sets BgpPeer_UnicastIpv6PrefixPathAny's key "path-id" to the specified value.
// PathId: uint32
func (n *BgpPeer_UnicastIpv6PrefixPathAny) WithPathId(PathId uint32) *BgpPeer_UnicastIpv6PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "path-id", PathId)
	return n
}

// UnicastIpv6Prefix (list): A list of BGP unicast IPv6 prefixes.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "unicast-ipv6-prefixes/unicast-ipv6-prefix"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix"
//
//	Address: string
//	PrefixLength: uint32
//	Origin: oc.E_UnicastIpv6Prefix_Origin
//	PathId: uint32
func (n *BgpPeerPath) UnicastIpv6Prefix(Address string, PrefixLength uint32, Origin oc.E_UnicastIpv6Prefix_Origin, PathId uint32) *BgpPeer_UnicastIpv6PrefixPath {
	ps := &BgpPeer_UnicastIpv6PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-ipv6-prefixes", "unicast-ipv6-prefix"},
			map[string]interface{}{"address": Address, "prefix-length": PrefixLength, "origin": Origin, "path-id": PathId},
			n,
		),
	}
	return ps
}

// UnicastIpv6Prefix (list): A list of BGP unicast IPv6 prefixes.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "unicast-ipv6-prefixes/unicast-ipv6-prefix"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix"
//
//	Address: string
//	PrefixLength: uint32
//	Origin: oc.E_UnicastIpv6Prefix_Origin
//	PathId: uint32
func (n *BgpPeerPathAny) UnicastIpv6Prefix(Address string, PrefixLength uint32, Origin oc.E_UnicastIpv6Prefix_Origin, PathId uint32) *BgpPeer_UnicastIpv6PrefixPathAny {
	ps := &BgpPeer_UnicastIpv6PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-ipv6-prefixes", "unicast-ipv6-prefix"},
			map[string]interface{}{"address": Address, "prefix-length": PrefixLength, "origin": Origin, "path-id": PathId},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeerPath) State() ygnmi.SingletonQuery[*oc.BgpPeer] {
	return ygnmi.NewSingletonQuery[*oc.BgpPeer](
		"BgpPeer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeerPathAny) State() ygnmi.WildcardQuery[*oc.BgpPeer] {
	return ygnmi.NewWildcardQuery[*oc.BgpPeer](
		"BgpPeer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_FlapsPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/flaps YANG schema element.
type BgpPeer_Counters_FlapsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_FlapsPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/flaps YANG schema element.
type BgpPeer_Counters_FlapsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "flaps"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/flaps"
func (n *BgpPeer_Counters_FlapsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flaps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).Flaps
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "flaps"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/flaps"
func (n *BgpPeer_Counters_FlapsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flaps"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).Flaps
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_InEndOfRibPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-end-of-rib YANG schema element.
type BgpPeer_Counters_InEndOfRibPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_InEndOfRibPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-end-of-rib YANG schema element.
type BgpPeer_Counters_InEndOfRibPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-end-of-rib"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-end-of-rib"
func (n *BgpPeer_Counters_InEndOfRibPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-end-of-rib"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InEndOfRib
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-end-of-rib"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-end-of-rib"
func (n *BgpPeer_Counters_InEndOfRibPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-end-of-rib"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InEndOfRib
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_InKeepalivesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-keepalives YANG schema element.
type BgpPeer_Counters_InKeepalivesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_InKeepalivesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-keepalives YANG schema element.
type BgpPeer_Counters_InKeepalivesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-keepalives"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-keepalives"
func (n *BgpPeer_Counters_InKeepalivesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-keepalives"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InKeepalives
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-keepalives"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-keepalives"
func (n *BgpPeer_Counters_InKeepalivesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-keepalives"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InKeepalives
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_InNotificationsPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-notifications YANG schema element.
type BgpPeer_Counters_InNotificationsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_InNotificationsPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-notifications YANG schema element.
type BgpPeer_Counters_InNotificationsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-notifications"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-notifications"
func (n *BgpPeer_Counters_InNotificationsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-notifications"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InNotifications
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-notifications"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-notifications"
func (n *BgpPeer_Counters_InNotificationsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-notifications"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InNotifications
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_InOpensPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-opens YANG schema element.
type BgpPeer_Counters_InOpensPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_InOpensPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-opens YANG schema element.
type BgpPeer_Counters_InOpensPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-opens"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-opens"
func (n *BgpPeer_Counters_InOpensPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-opens"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InOpens
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-opens"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-opens"
func (n *BgpPeer_Counters_InOpensPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-opens"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InOpens
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_InRouteWithdrawPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-route-withdraw YANG schema element.
type BgpPeer_Counters_InRouteWithdrawPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_InRouteWithdrawPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-route-withdraw YANG schema element.
type BgpPeer_Counters_InRouteWithdrawPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-route-withdraw"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-route-withdraw"
func (n *BgpPeer_Counters_InRouteWithdrawPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-route-withdraw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InRouteWithdraw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-route-withdraw"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-route-withdraw"
func (n *BgpPeer_Counters_InRouteWithdrawPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-route-withdraw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InRouteWithdraw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_InRoutesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-routes YANG schema element.
type BgpPeer_Counters_InRoutesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_InRoutesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-routes YANG schema element.
type BgpPeer_Counters_InRoutesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-routes"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-routes"
func (n *BgpPeer_Counters_InRoutesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-routes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InRoutes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-routes"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-routes"
func (n *BgpPeer_Counters_InRoutesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-routes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InRoutes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_InUpdatesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-updates YANG schema element.
type BgpPeer_Counters_InUpdatesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_InUpdatesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/in-updates YANG schema element.
type BgpPeer_Counters_InUpdatesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-updates"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-updates"
func (n *BgpPeer_Counters_InUpdatesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-updates"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InUpdates
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-updates"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-updates"
func (n *BgpPeer_Counters_InUpdatesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-updates"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).InUpdates
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_OutKeepalivesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-keepalives YANG schema element.
type BgpPeer_Counters_OutKeepalivesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_OutKeepalivesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-keepalives YANG schema element.
type BgpPeer_Counters_OutKeepalivesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-keepalives"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-keepalives"
func (n *BgpPeer_Counters_OutKeepalivesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-keepalives"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutKeepalives
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-keepalives"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-keepalives"
func (n *BgpPeer_Counters_OutKeepalivesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-keepalives"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutKeepalives
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_OutNotificationsPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-notifications YANG schema element.
type BgpPeer_Counters_OutNotificationsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_OutNotificationsPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-notifications YANG schema element.
type BgpPeer_Counters_OutNotificationsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-notifications"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-notifications"
func (n *BgpPeer_Counters_OutNotificationsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-notifications"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutNotifications
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-notifications"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-notifications"
func (n *BgpPeer_Counters_OutNotificationsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-notifications"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutNotifications
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_OutOpensPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-opens YANG schema element.
type BgpPeer_Counters_OutOpensPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_OutOpensPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-opens YANG schema element.
type BgpPeer_Counters_OutOpensPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-opens"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-opens"
func (n *BgpPeer_Counters_OutOpensPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-opens"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutOpens
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-opens"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-opens"
func (n *BgpPeer_Counters_OutOpensPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-opens"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutOpens
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_OutRouteWithdrawPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-route-withdraw YANG schema element.
type BgpPeer_Counters_OutRouteWithdrawPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_OutRouteWithdrawPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-route-withdraw YANG schema element.
type BgpPeer_Counters_OutRouteWithdrawPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-route-withdraw"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-route-withdraw"
func (n *BgpPeer_Counters_OutRouteWithdrawPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-route-withdraw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutRouteWithdraw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-route-withdraw"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-route-withdraw"
func (n *BgpPeer_Counters_OutRouteWithdrawPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-route-withdraw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutRouteWithdraw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_OutRoutesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-routes YANG schema element.
type BgpPeer_Counters_OutRoutesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_OutRoutesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-routes YANG schema element.
type BgpPeer_Counters_OutRoutesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-routes"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-routes"
func (n *BgpPeer_Counters_OutRoutesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-routes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutRoutes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-routes"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-routes"
func (n *BgpPeer_Counters_OutRoutesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-routes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutRoutes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_Counters_OutUpdatesPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-updates YANG schema element.
type BgpPeer_Counters_OutUpdatesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_Counters_OutUpdatesPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters/out-updates YANG schema element.
type BgpPeer_Counters_OutUpdatesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-updates"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-updates"
func (n *BgpPeer_Counters_OutUpdatesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-updates"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutUpdates
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-updates"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-updates"
func (n *BgpPeer_Counters_OutUpdatesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"BgpPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-updates"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.BgpPeer_Counters).OutUpdates
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_CountersPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters YANG schema element.
type BgpPeer_CountersPath struct {
	*ygnmi.NodePath
}

// BgpPeer_CountersPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/state/counters YANG schema element.
type BgpPeer_CountersPathAny struct {
	*ygnmi.NodePath
}

// Flaps (leaf): The total number of times the BGP session went from an
// ESTABLISHED state to an IDLE state.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "flaps"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/flaps"
func (n *BgpPeer_CountersPath) Flaps() *BgpPeer_Counters_FlapsPath {
	ps := &BgpPeer_Counters_FlapsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flaps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flaps (leaf): The total number of times the BGP session went from an
// ESTABLISHED state to an IDLE state.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "flaps"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/flaps"
func (n *BgpPeer_CountersPathAny) Flaps() *BgpPeer_Counters_FlapsPathAny {
	ps := &BgpPeer_Counters_FlapsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flaps"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InEndOfRib (leaf): The total number of End-of-RIB markers received indicating the completion of the initial routing update for a particular <AFI, SAFI> address family after the session is established. For the IPv4 unicast address family, the End-of-RIB marker is an UPDATE message with the minimum length. For any other address family, it is an UPDATE message that contains only the MP_UNREACH_NLRI attribute with no withdrawn routes for that <AFI, SAFI>.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-end-of-rib"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-end-of-rib"
func (n *BgpPeer_CountersPath) InEndOfRib() *BgpPeer_Counters_InEndOfRibPath {
	ps := &BgpPeer_Counters_InEndOfRibPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-end-of-rib"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InEndOfRib (leaf): The total number of End-of-RIB markers received indicating the completion of the initial routing update for a particular <AFI, SAFI> address family after the session is established. For the IPv4 unicast address family, the End-of-RIB marker is an UPDATE message with the minimum length. For any other address family, it is an UPDATE message that contains only the MP_UNREACH_NLRI attribute with no withdrawn routes for that <AFI, SAFI>.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-end-of-rib"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-end-of-rib"
func (n *BgpPeer_CountersPathAny) InEndOfRib() *BgpPeer_Counters_InEndOfRibPathAny {
	ps := &BgpPeer_Counters_InEndOfRibPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-end-of-rib"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InKeepalives (leaf): The total number of KEEPALIVE messages received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-keepalives"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-keepalives"
func (n *BgpPeer_CountersPath) InKeepalives() *BgpPeer_Counters_InKeepalivesPath {
	ps := &BgpPeer_Counters_InKeepalivesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-keepalives"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InKeepalives (leaf): The total number of KEEPALIVE messages received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-keepalives"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-keepalives"
func (n *BgpPeer_CountersPathAny) InKeepalives() *BgpPeer_Counters_InKeepalivesPathAny {
	ps := &BgpPeer_Counters_InKeepalivesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-keepalives"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InNotifications (leaf): The total number of NOTIFICATION messages received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-notifications"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-notifications"
func (n *BgpPeer_CountersPath) InNotifications() *BgpPeer_Counters_InNotificationsPath {
	ps := &BgpPeer_Counters_InNotificationsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-notifications"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InNotifications (leaf): The total number of NOTIFICATION messages received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-notifications"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-notifications"
func (n *BgpPeer_CountersPathAny) InNotifications() *BgpPeer_Counters_InNotificationsPathAny {
	ps := &BgpPeer_Counters_InNotificationsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-notifications"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOpens (leaf): The total number of OPEN messages received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-opens"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-opens"
func (n *BgpPeer_CountersPath) InOpens() *BgpPeer_Counters_InOpensPath {
	ps := &BgpPeer_Counters_InOpensPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-opens"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOpens (leaf): The total number of OPEN messages received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-opens"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-opens"
func (n *BgpPeer_CountersPathAny) InOpens() *BgpPeer_Counters_InOpensPathAny {
	ps := &BgpPeer_Counters_InOpensPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-opens"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRouteWithdraw (leaf): The total number of route withdraws received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-route-withdraw"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-route-withdraw"
func (n *BgpPeer_CountersPath) InRouteWithdraw() *BgpPeer_Counters_InRouteWithdrawPath {
	ps := &BgpPeer_Counters_InRouteWithdrawPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-route-withdraw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRouteWithdraw (leaf): The total number of route withdraws received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-route-withdraw"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-route-withdraw"
func (n *BgpPeer_CountersPathAny) InRouteWithdraw() *BgpPeer_Counters_InRouteWithdrawPathAny {
	ps := &BgpPeer_Counters_InRouteWithdrawPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-route-withdraw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRoutes (leaf): The total number of routes received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-routes"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-routes"
func (n *BgpPeer_CountersPath) InRoutes() *BgpPeer_Counters_InRoutesPath {
	ps := &BgpPeer_Counters_InRoutesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-routes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InRoutes (leaf): The total number of routes received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-routes"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-routes"
func (n *BgpPeer_CountersPathAny) InRoutes() *BgpPeer_Counters_InRoutesPathAny {
	ps := &BgpPeer_Counters_InRoutesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-routes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUpdates (leaf): The total number of UPDATE messages received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-updates"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-updates"
func (n *BgpPeer_CountersPath) InUpdates() *BgpPeer_Counters_InUpdatesPath {
	ps := &BgpPeer_Counters_InUpdatesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-updates"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUpdates (leaf): The total number of UPDATE messages received.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "in-updates"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/in-updates"
func (n *BgpPeer_CountersPathAny) InUpdates() *BgpPeer_Counters_InUpdatesPathAny {
	ps := &BgpPeer_Counters_InUpdatesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-updates"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutKeepalives (leaf): The total number of KEEPALIVE messages sent.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-keepalives"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-keepalives"
func (n *BgpPeer_CountersPath) OutKeepalives() *BgpPeer_Counters_OutKeepalivesPath {
	ps := &BgpPeer_Counters_OutKeepalivesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-keepalives"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutKeepalives (leaf): The total number of KEEPALIVE messages sent.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-keepalives"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-keepalives"
func (n *BgpPeer_CountersPathAny) OutKeepalives() *BgpPeer_Counters_OutKeepalivesPathAny {
	ps := &BgpPeer_Counters_OutKeepalivesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-keepalives"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutNotifications (leaf): The total number of NOTIFICATION messages sent.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-notifications"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-notifications"
func (n *BgpPeer_CountersPath) OutNotifications() *BgpPeer_Counters_OutNotificationsPath {
	ps := &BgpPeer_Counters_OutNotificationsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-notifications"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutNotifications (leaf): The total number of NOTIFICATION messages sent.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-notifications"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-notifications"
func (n *BgpPeer_CountersPathAny) OutNotifications() *BgpPeer_Counters_OutNotificationsPathAny {
	ps := &BgpPeer_Counters_OutNotificationsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-notifications"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOpens (leaf): The total number of OPEN messages sent.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-opens"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-opens"
func (n *BgpPeer_CountersPath) OutOpens() *BgpPeer_Counters_OutOpensPath {
	ps := &BgpPeer_Counters_OutOpensPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-opens"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOpens (leaf): The total number of OPEN messages sent.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-opens"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-opens"
func (n *BgpPeer_CountersPathAny) OutOpens() *BgpPeer_Counters_OutOpensPathAny {
	ps := &BgpPeer_Counters_OutOpensPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-opens"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRouteWithdraw (leaf): The total number of route withdraws sent.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-route-withdraw"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-route-withdraw"
func (n *BgpPeer_CountersPath) OutRouteWithdraw() *BgpPeer_Counters_OutRouteWithdrawPath {
	ps := &BgpPeer_Counters_OutRouteWithdrawPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-route-withdraw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRouteWithdraw (leaf): The total number of route withdraws sent.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-route-withdraw"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-route-withdraw"
func (n *BgpPeer_CountersPathAny) OutRouteWithdraw() *BgpPeer_Counters_OutRouteWithdrawPathAny {
	ps := &BgpPeer_Counters_OutRouteWithdrawPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-route-withdraw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRoutes (leaf): The total number of routes advertised.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-routes"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-routes"
func (n *BgpPeer_CountersPath) OutRoutes() *BgpPeer_Counters_OutRoutesPath {
	ps := &BgpPeer_Counters_OutRoutesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-routes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutRoutes (leaf): The total number of routes advertised.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-routes"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-routes"
func (n *BgpPeer_CountersPathAny) OutRoutes() *BgpPeer_Counters_OutRoutesPathAny {
	ps := &BgpPeer_Counters_OutRoutesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-routes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutUpdates (leaf): The total number of UPDATE messages sent.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-updates"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-updates"
func (n *BgpPeer_CountersPath) OutUpdates() *BgpPeer_Counters_OutUpdatesPath {
	ps := &BgpPeer_Counters_OutUpdatesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-updates"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutUpdates (leaf): The total number of UPDATE messages sent.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "out-updates"
//	Path from root:       "/bgp-peers/bgp-peer/state/counters/out-updates"
func (n *BgpPeer_CountersPathAny) OutUpdates() *BgpPeer_Counters_OutUpdatesPathAny {
	ps := &BgpPeer_Counters_OutUpdatesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-updates"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_CountersPath) State() ygnmi.SingletonQuery[*oc.BgpPeer_Counters] {
	return ygnmi.NewSingletonQuery[*oc.BgpPeer_Counters](
		"BgpPeer_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_CountersPathAny) State() ygnmi.WildcardQuery[*oc.BgpPeer_Counters] {
	return ygnmi.NewWildcardQuery[*oc.BgpPeer_Counters](
		"BgpPeer_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv4Prefix_AddressPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/address YANG schema element.
type BgpPeer_UnicastIpv4Prefix_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv4Prefix_AddressPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/address YANG schema element.
type BgpPeer_UnicastIpv4Prefix_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/address"
func (n *BgpPeer_UnicastIpv4Prefix_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/address"
func (n *BgpPeer_UnicastIpv4Prefix_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv4Prefix_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"BgpPeer_UnicastIpv4Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv4Prefix_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BgpPeer_UnicastIpv4Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv4Prefix_LocalPreferencePath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/local-preference YANG schema element.
type BgpPeer_UnicastIpv4Prefix_LocalPreferencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv4Prefix_LocalPreferencePathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/local-preference YANG schema element.
type BgpPeer_UnicastIpv4Prefix_LocalPreferencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/local-preference"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/local-preference"
func (n *BgpPeer_UnicastIpv4Prefix_LocalPreferencePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).LocalPreference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/local-preference"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/local-preference"
func (n *BgpPeer_UnicastIpv4Prefix_LocalPreferencePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).LocalPreference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv4Prefix_MultiExitDiscriminatorPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/multi-exit-discriminator YANG schema element.
type BgpPeer_UnicastIpv4Prefix_MultiExitDiscriminatorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv4Prefix_MultiExitDiscriminatorPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/multi-exit-discriminator YANG schema element.
type BgpPeer_UnicastIpv4Prefix_MultiExitDiscriminatorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/multi-exit-discriminator"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/multi-exit-discriminator"
func (n *BgpPeer_UnicastIpv4Prefix_MultiExitDiscriminatorPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multi-exit-discriminator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).MultiExitDiscriminator
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/multi-exit-discriminator"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/multi-exit-discriminator"
func (n *BgpPeer_UnicastIpv4Prefix_MultiExitDiscriminatorPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multi-exit-discriminator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).MultiExitDiscriminator
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv4Prefix_NextHopIpv4AddressPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv4-address YANG schema element.
type BgpPeer_UnicastIpv4Prefix_NextHopIpv4AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv4Prefix_NextHopIpv4AddressPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv4-address YANG schema element.
type BgpPeer_UnicastIpv4Prefix_NextHopIpv4AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv4-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv4-address"
func (n *BgpPeer_UnicastIpv4Prefix_NextHopIpv4AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).NextHopIpv4Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv4-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv4-address"
func (n *BgpPeer_UnicastIpv4Prefix_NextHopIpv4AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).NextHopIpv4Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv4Prefix_NextHopIpv6AddressPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv6-address YANG schema element.
type BgpPeer_UnicastIpv4Prefix_NextHopIpv6AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv4Prefix_NextHopIpv6AddressPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv6-address YANG schema element.
type BgpPeer_UnicastIpv4Prefix_NextHopIpv6AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv6-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv6-address"
func (n *BgpPeer_UnicastIpv4Prefix_NextHopIpv6AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).NextHopIpv6Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv6-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv6-address"
func (n *BgpPeer_UnicastIpv4Prefix_NextHopIpv6AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).NextHopIpv6Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv4Prefix_OriginPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/origin YANG schema element.
type BgpPeer_UnicastIpv4Prefix_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv4Prefix_OriginPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/origin YANG schema element.
type BgpPeer_UnicastIpv4Prefix_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/origin"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/origin"
func (n *BgpPeer_UnicastIpv4Prefix_OriginPath) State() ygnmi.SingletonQuery[oc.E_UnicastIpv4Prefix_Origin] {
	return ygnmi.NewSingletonQuery[oc.E_UnicastIpv4Prefix_Origin](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_UnicastIpv4Prefix_Origin, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/origin"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/origin"
func (n *BgpPeer_UnicastIpv4Prefix_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_UnicastIpv4Prefix_Origin] {
	return ygnmi.NewWildcardQuery[oc.E_UnicastIpv4Prefix_Origin](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_UnicastIpv4Prefix_Origin, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "origin"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv4Prefix_OriginPath) Config() ygnmi.ConfigQuery[oc.E_UnicastIpv4Prefix_Origin] {
	return ygnmi.NewConfigQuery[oc.E_UnicastIpv4Prefix_Origin](
		"BgpPeer_UnicastIpv4Prefix",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_UnicastIpv4Prefix_Origin, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "origin"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv4Prefix_OriginPathAny) Config() ygnmi.WildcardQuery[oc.E_UnicastIpv4Prefix_Origin] {
	return ygnmi.NewWildcardQuery[oc.E_UnicastIpv4Prefix_Origin](
		"BgpPeer_UnicastIpv4Prefix",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_UnicastIpv4Prefix_Origin, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv4Prefix_PathIdPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/path-id YANG schema element.
type BgpPeer_UnicastIpv4Prefix_PathIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv4Prefix_PathIdPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/path-id YANG schema element.
type BgpPeer_UnicastIpv4Prefix_PathIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/path-id"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/path-id"
func (n *BgpPeer_UnicastIpv4Prefix_PathIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).PathId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/path-id"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/path-id"
func (n *BgpPeer_UnicastIpv4Prefix_PathIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).PathId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "path-id"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv4Prefix_PathIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).PathId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "path-id"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv4Prefix_PathIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).PathId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv4Prefix_PrefixLengthPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/prefix-length YANG schema element.
type BgpPeer_UnicastIpv4Prefix_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv4Prefix_PrefixLengthPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/prefix-length YANG schema element.
type BgpPeer_UnicastIpv4Prefix_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/prefix-length"
func (n *BgpPeer_UnicastIpv4Prefix_PrefixLengthPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/prefix-length"
func (n *BgpPeer_UnicastIpv4Prefix_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "prefix-length"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv4Prefix_PrefixLengthPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "prefix-length"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv4Prefix_PrefixLengthPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv4Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv4Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv4Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv4PrefixPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix YANG schema element.
type BgpPeer_UnicastIpv4PrefixPath struct {
	*ygnmi.NodePath
}

// BgpPeer_UnicastIpv4PrefixPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix YANG schema element.
type BgpPeer_UnicastIpv4PrefixPathAny struct {
	*ygnmi.NodePath
}

// BgpPeer_UnicastIpv4PrefixPathMap represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix YANG schema element.
type BgpPeer_UnicastIpv4PrefixPathMap struct {
	*ygnmi.NodePath
}

// BgpPeer_UnicastIpv4PrefixPathMapAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix YANG schema element.
type BgpPeer_UnicastIpv4PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): The IPv4 address.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/*/address"
func (n *BgpPeer_UnicastIpv4PrefixPath) Address() *BgpPeer_UnicastIpv4Prefix_AddressPath {
	ps := &BgpPeer_UnicastIpv4Prefix_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): The IPv4 address.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/*/address"
func (n *BgpPeer_UnicastIpv4PrefixPathAny) Address() *BgpPeer_UnicastIpv4Prefix_AddressPathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathAny (list): Unkeyed list of AS PATH segments
// This attribute identifies the autonomous systems through which routing information
// carried in this UPDATE message has passed.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/as-path"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/as-path"
func (n *BgpPeer_UnicastIpv4PrefixPath) AsPathAny() *BgpPeer_UnicastIpv4Prefix_AsPathPathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_AsPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "as-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AsPathAny (list): Unkeyed list of AS PATH segments
// This attribute identifies the autonomous systems through which routing information
// carried in this UPDATE message has passed.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/as-path"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/as-path"
func (n *BgpPeer_UnicastIpv4PrefixPathAny) AsPathAny() *BgpPeer_UnicastIpv4Prefix_AsPathPathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_AsPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "as-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunityAny (list): Unkeyed list of optional community attributes present in the UPDATE message.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/community"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/community"
func (n *BgpPeer_UnicastIpv4PrefixPath) CommunityAny() *BgpPeer_UnicastIpv4Prefix_CommunityPathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_CommunityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunityAny (list): Unkeyed list of optional community attributes present in the UPDATE message.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/community"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/community"
func (n *BgpPeer_UnicastIpv4PrefixPathAny) CommunityAny() *BgpPeer_UnicastIpv4Prefix_CommunityPathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_CommunityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LocalPreference (leaf): The local preference is a well-known attribute and the value is used for route selection. The route with the highest local preference value is preferred.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/local-preference"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/local-preference"
func (n *BgpPeer_UnicastIpv4PrefixPath) LocalPreference() *BgpPeer_UnicastIpv4Prefix_LocalPreferencePath {
	ps := &BgpPeer_UnicastIpv4Prefix_LocalPreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalPreference (leaf): The local preference is a well-known attribute and the value is used for route selection. The route with the highest local preference value is preferred.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/local-preference"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/local-preference"
func (n *BgpPeer_UnicastIpv4PrefixPathAny) LocalPreference() *BgpPeer_UnicastIpv4Prefix_LocalPreferencePathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_LocalPreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultiExitDiscriminator (leaf): The multi exit discriminator (MED) is an optional non-transitive attribute and the value is used for route selection. The route with the lowest MED value is preferred.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/multi-exit-discriminator"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/multi-exit-discriminator"
func (n *BgpPeer_UnicastIpv4PrefixPath) MultiExitDiscriminator() *BgpPeer_UnicastIpv4Prefix_MultiExitDiscriminatorPath {
	ps := &BgpPeer_UnicastIpv4Prefix_MultiExitDiscriminatorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "multi-exit-discriminator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultiExitDiscriminator (leaf): The multi exit discriminator (MED) is an optional non-transitive attribute and the value is used for route selection. The route with the lowest MED value is preferred.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/multi-exit-discriminator"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/multi-exit-discriminator"
func (n *BgpPeer_UnicastIpv4PrefixPathAny) MultiExitDiscriminator() *BgpPeer_UnicastIpv4Prefix_MultiExitDiscriminatorPathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_MultiExitDiscriminatorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "multi-exit-discriminator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIpv4Address (leaf): The IPv4 address of the egress interface.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv4-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv4-address"
func (n *BgpPeer_UnicastIpv4PrefixPath) NextHopIpv4Address() *BgpPeer_UnicastIpv4Prefix_NextHopIpv4AddressPath {
	ps := &BgpPeer_UnicastIpv4Prefix_NextHopIpv4AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIpv4Address (leaf): The IPv4 address of the egress interface.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv4-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv4-address"
func (n *BgpPeer_UnicastIpv4PrefixPathAny) NextHopIpv4Address() *BgpPeer_UnicastIpv4Prefix_NextHopIpv4AddressPathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_NextHopIpv4AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIpv6Address (leaf): The IPv6 address of the egress interface.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv6-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv6-address"
func (n *BgpPeer_UnicastIpv4PrefixPath) NextHopIpv6Address() *BgpPeer_UnicastIpv4Prefix_NextHopIpv6AddressPath {
	ps := &BgpPeer_UnicastIpv4Prefix_NextHopIpv6AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIpv6Address (leaf): The IPv6 address of the egress interface.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv6-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/next-hop-ipv6-address"
func (n *BgpPeer_UnicastIpv4PrefixPathAny) NextHopIpv6Address() *BgpPeer_UnicastIpv4Prefix_NextHopIpv6AddressPathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_NextHopIpv6AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of the prefix.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/origin"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/*/origin"
func (n *BgpPeer_UnicastIpv4PrefixPath) Origin() *BgpPeer_UnicastIpv4Prefix_OriginPath {
	ps := &BgpPeer_UnicastIpv4Prefix_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of the prefix.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/origin"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/*/origin"
func (n *BgpPeer_UnicastIpv4PrefixPathAny) Origin() *BgpPeer_UnicastIpv4Prefix_OriginPathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathId (leaf): If the route is learned from a neighbor, the path-id
// corresponds to the path-id for the route in the
// corresponding adj-rib-in-post table.  If the route is
// injected from another protocol, or the neighbor does not
// support BGP add-paths, the path-id should be set
// to zero, also the default value.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/path-id"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/*/path-id"
func (n *BgpPeer_UnicastIpv4PrefixPath) PathId() *BgpPeer_UnicastIpv4Prefix_PathIdPath {
	ps := &BgpPeer_UnicastIpv4Prefix_PathIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathId (leaf): If the route is learned from a neighbor, the path-id
// corresponds to the path-id for the route in the
// corresponding adj-rib-in-post table.  If the route is
// injected from another protocol, or the neighbor does not
// support BGP add-paths, the path-id should be set
// to zero, also the default value.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/path-id"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/*/path-id"
func (n *BgpPeer_UnicastIpv4PrefixPathAny) PathId() *BgpPeer_UnicastIpv4Prefix_PathIdPathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_PathIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The prefix length.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/*/prefix-length"
func (n *BgpPeer_UnicastIpv4PrefixPath) PrefixLength() *BgpPeer_UnicastIpv4Prefix_PrefixLengthPath {
	ps := &BgpPeer_UnicastIpv4Prefix_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The prefix length.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/*/prefix-length"
func (n *BgpPeer_UnicastIpv4PrefixPathAny) PrefixLength() *BgpPeer_UnicastIpv4Prefix_PrefixLengthPathAny {
	ps := &BgpPeer_UnicastIpv4Prefix_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv4PrefixPath) State() ygnmi.SingletonQuery[*oc.BgpPeer_UnicastIpv4Prefix] {
	return ygnmi.NewSingletonQuery[*oc.BgpPeer_UnicastIpv4Prefix](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv4PrefixPathAny) State() ygnmi.WildcardQuery[*oc.BgpPeer_UnicastIpv4Prefix] {
	return ygnmi.NewWildcardQuery[*oc.BgpPeer_UnicastIpv4Prefix](
		"BgpPeer_UnicastIpv4Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv4Prefix_AsPathPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/as-path YANG schema element.
type BgpPeer_UnicastIpv4Prefix_AsPathPath struct {
	*ygnmi.NodePath
}

// BgpPeer_UnicastIpv4Prefix_AsPathPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/as-path YANG schema element.
type BgpPeer_UnicastIpv4Prefix_AsPathPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv4Prefix_AsPathPath) State() ygnmi.SingletonQuery[*oc.BgpPeer_UnicastIpv4Prefix_AsPath] {
	return ygnmi.NewSingletonQuery[*oc.BgpPeer_UnicastIpv4Prefix_AsPath](
		"BgpPeer_UnicastIpv4Prefix_AsPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv4Prefix_AsPathPathAny) State() ygnmi.WildcardQuery[*oc.BgpPeer_UnicastIpv4Prefix_AsPath] {
	return ygnmi.NewWildcardQuery[*oc.BgpPeer_UnicastIpv4Prefix_AsPath](
		"BgpPeer_UnicastIpv4Prefix_AsPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv4Prefix_CommunityPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/community YANG schema element.
type BgpPeer_UnicastIpv4Prefix_CommunityPath struct {
	*ygnmi.NodePath
}

// BgpPeer_UnicastIpv4Prefix_CommunityPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv4-prefixes/unicast-ipv4-prefix/state/community YANG schema element.
type BgpPeer_UnicastIpv4Prefix_CommunityPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv4Prefix_CommunityPath) State() ygnmi.SingletonQuery[*oc.BgpPeer_UnicastIpv4Prefix_Community] {
	return ygnmi.NewSingletonQuery[*oc.BgpPeer_UnicastIpv4Prefix_Community](
		"BgpPeer_UnicastIpv4Prefix_Community",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv4Prefix_CommunityPathAny) State() ygnmi.WildcardQuery[*oc.BgpPeer_UnicastIpv4Prefix_Community] {
	return ygnmi.NewWildcardQuery[*oc.BgpPeer_UnicastIpv4Prefix_Community](
		"BgpPeer_UnicastIpv4Prefix_Community",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv6Prefix_AddressPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/address YANG schema element.
type BgpPeer_UnicastIpv6Prefix_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv6Prefix_AddressPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/address YANG schema element.
type BgpPeer_UnicastIpv6Prefix_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/address"
func (n *BgpPeer_UnicastIpv6Prefix_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/address"
func (n *BgpPeer_UnicastIpv6Prefix_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv6Prefix_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"BgpPeer_UnicastIpv6Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv6Prefix_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BgpPeer_UnicastIpv6Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv6Prefix_LocalPreferencePath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/local-preference YANG schema element.
type BgpPeer_UnicastIpv6Prefix_LocalPreferencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv6Prefix_LocalPreferencePathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/local-preference YANG schema element.
type BgpPeer_UnicastIpv6Prefix_LocalPreferencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/local-preference"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/local-preference"
func (n *BgpPeer_UnicastIpv6Prefix_LocalPreferencePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).LocalPreference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/local-preference"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/local-preference"
func (n *BgpPeer_UnicastIpv6Prefix_LocalPreferencePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).LocalPreference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv6Prefix_MultiExitDiscriminatorPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/multi-exit-discriminator YANG schema element.
type BgpPeer_UnicastIpv6Prefix_MultiExitDiscriminatorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv6Prefix_MultiExitDiscriminatorPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/multi-exit-discriminator YANG schema element.
type BgpPeer_UnicastIpv6Prefix_MultiExitDiscriminatorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/multi-exit-discriminator"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/multi-exit-discriminator"
func (n *BgpPeer_UnicastIpv6Prefix_MultiExitDiscriminatorPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multi-exit-discriminator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).MultiExitDiscriminator
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/multi-exit-discriminator"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/multi-exit-discriminator"
func (n *BgpPeer_UnicastIpv6Prefix_MultiExitDiscriminatorPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multi-exit-discriminator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).MultiExitDiscriminator
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv6Prefix_NextHopIpv4AddressPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv4-address YANG schema element.
type BgpPeer_UnicastIpv6Prefix_NextHopIpv4AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv6Prefix_NextHopIpv4AddressPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv4-address YANG schema element.
type BgpPeer_UnicastIpv6Prefix_NextHopIpv4AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv4-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv4-address"
func (n *BgpPeer_UnicastIpv6Prefix_NextHopIpv4AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).NextHopIpv4Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv4-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv4-address"
func (n *BgpPeer_UnicastIpv6Prefix_NextHopIpv4AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).NextHopIpv4Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv6Prefix_NextHopIpv6AddressPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv6-address YANG schema element.
type BgpPeer_UnicastIpv6Prefix_NextHopIpv6AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv6Prefix_NextHopIpv6AddressPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv6-address YANG schema element.
type BgpPeer_UnicastIpv6Prefix_NextHopIpv6AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv6-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv6-address"
func (n *BgpPeer_UnicastIpv6Prefix_NextHopIpv6AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).NextHopIpv6Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv6-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv6-address"
func (n *BgpPeer_UnicastIpv6Prefix_NextHopIpv6AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).NextHopIpv6Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv6Prefix_OriginPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/origin YANG schema element.
type BgpPeer_UnicastIpv6Prefix_OriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv6Prefix_OriginPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/origin YANG schema element.
type BgpPeer_UnicastIpv6Prefix_OriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/origin"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/origin"
func (n *BgpPeer_UnicastIpv6Prefix_OriginPath) State() ygnmi.SingletonQuery[oc.E_UnicastIpv6Prefix_Origin] {
	return ygnmi.NewSingletonQuery[oc.E_UnicastIpv6Prefix_Origin](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_UnicastIpv6Prefix_Origin, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/origin"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/origin"
func (n *BgpPeer_UnicastIpv6Prefix_OriginPathAny) State() ygnmi.WildcardQuery[oc.E_UnicastIpv6Prefix_Origin] {
	return ygnmi.NewWildcardQuery[oc.E_UnicastIpv6Prefix_Origin](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_UnicastIpv6Prefix_Origin, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "origin"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv6Prefix_OriginPath) Config() ygnmi.ConfigQuery[oc.E_UnicastIpv6Prefix_Origin] {
	return ygnmi.NewConfigQuery[oc.E_UnicastIpv6Prefix_Origin](
		"BgpPeer_UnicastIpv6Prefix",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_UnicastIpv6Prefix_Origin, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "origin"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv6Prefix_OriginPathAny) Config() ygnmi.WildcardQuery[oc.E_UnicastIpv6Prefix_Origin] {
	return ygnmi.NewWildcardQuery[oc.E_UnicastIpv6Prefix_Origin](
		"BgpPeer_UnicastIpv6Prefix",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_UnicastIpv6Prefix_Origin, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).Origin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv6Prefix_PathIdPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/path-id YANG schema element.
type BgpPeer_UnicastIpv6Prefix_PathIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv6Prefix_PathIdPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/path-id YANG schema element.
type BgpPeer_UnicastIpv6Prefix_PathIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/path-id"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/path-id"
func (n *BgpPeer_UnicastIpv6Prefix_PathIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).PathId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/path-id"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/path-id"
func (n *BgpPeer_UnicastIpv6Prefix_PathIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).PathId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "path-id"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv6Prefix_PathIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).PathId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "path-id"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv6Prefix_PathIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).PathId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv6Prefix_PrefixLengthPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/prefix-length YANG schema element.
type BgpPeer_UnicastIpv6Prefix_PrefixLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpPeer_UnicastIpv6Prefix_PrefixLengthPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/prefix-length YANG schema element.
type BgpPeer_UnicastIpv6Prefix_PrefixLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/prefix-length"
func (n *BgpPeer_UnicastIpv6Prefix_PrefixLengthPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/prefix-length"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/prefix-length"
func (n *BgpPeer_UnicastIpv6Prefix_PrefixLengthPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "prefix-length"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv6Prefix_PrefixLengthPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "prefix-length"
//	Path from root:       ""
func (n *BgpPeer_UnicastIpv6Prefix_PrefixLengthPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"BgpPeer_UnicastIpv6Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.BgpPeer_UnicastIpv6Prefix).PrefixLength
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpPeer_UnicastIpv6Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv6PrefixPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix YANG schema element.
type BgpPeer_UnicastIpv6PrefixPath struct {
	*ygnmi.NodePath
}

// BgpPeer_UnicastIpv6PrefixPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix YANG schema element.
type BgpPeer_UnicastIpv6PrefixPathAny struct {
	*ygnmi.NodePath
}

// BgpPeer_UnicastIpv6PrefixPathMap represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix YANG schema element.
type BgpPeer_UnicastIpv6PrefixPathMap struct {
	*ygnmi.NodePath
}

// BgpPeer_UnicastIpv6PrefixPathMapAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix YANG schema element.
type BgpPeer_UnicastIpv6PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): The IPv6 address.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/*/address"
func (n *BgpPeer_UnicastIpv6PrefixPath) Address() *BgpPeer_UnicastIpv6Prefix_AddressPath {
	ps := &BgpPeer_UnicastIpv6Prefix_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): The IPv6 address.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/*/address"
func (n *BgpPeer_UnicastIpv6PrefixPathAny) Address() *BgpPeer_UnicastIpv6Prefix_AddressPathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathAny (list): Unkeyed list of AS PATH segments
// This attribute identifies the autonomous systems through which routing information
// carried in this UPDATE message has passed.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/as-path"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/as-path"
func (n *BgpPeer_UnicastIpv6PrefixPath) AsPathAny() *BgpPeer_UnicastIpv6Prefix_AsPathPathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_AsPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "as-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AsPathAny (list): Unkeyed list of AS PATH segments
// This attribute identifies the autonomous systems through which routing information
// carried in this UPDATE message has passed.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/as-path"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/as-path"
func (n *BgpPeer_UnicastIpv6PrefixPathAny) AsPathAny() *BgpPeer_UnicastIpv6Prefix_AsPathPathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_AsPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "as-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunityAny (list): Unkeyed list of optional community attributes present in the UPDATE message.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/community"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/community"
func (n *BgpPeer_UnicastIpv6PrefixPath) CommunityAny() *BgpPeer_UnicastIpv6Prefix_CommunityPathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_CommunityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunityAny (list): Unkeyed list of optional community attributes present in the UPDATE message.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/community"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/community"
func (n *BgpPeer_UnicastIpv6PrefixPathAny) CommunityAny() *BgpPeer_UnicastIpv6Prefix_CommunityPathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_CommunityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LocalPreference (leaf): The local preference is a well-known attribute and the value is used for route selection. The route with the highest local preference value is preferred.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/local-preference"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/local-preference"
func (n *BgpPeer_UnicastIpv6PrefixPath) LocalPreference() *BgpPeer_UnicastIpv6Prefix_LocalPreferencePath {
	ps := &BgpPeer_UnicastIpv6Prefix_LocalPreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalPreference (leaf): The local preference is a well-known attribute and the value is used for route selection. The route with the highest local preference value is preferred.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/local-preference"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/local-preference"
func (n *BgpPeer_UnicastIpv6PrefixPathAny) LocalPreference() *BgpPeer_UnicastIpv6Prefix_LocalPreferencePathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_LocalPreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultiExitDiscriminator (leaf): The multi exit discriminator (MED) is an optional non-transitive attribute and the value is used for route selection. The route with the lowest MED value is preferred.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/multi-exit-discriminator"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/multi-exit-discriminator"
func (n *BgpPeer_UnicastIpv6PrefixPath) MultiExitDiscriminator() *BgpPeer_UnicastIpv6Prefix_MultiExitDiscriminatorPath {
	ps := &BgpPeer_UnicastIpv6Prefix_MultiExitDiscriminatorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "multi-exit-discriminator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultiExitDiscriminator (leaf): The multi exit discriminator (MED) is an optional non-transitive attribute and the value is used for route selection. The route with the lowest MED value is preferred.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/multi-exit-discriminator"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/multi-exit-discriminator"
func (n *BgpPeer_UnicastIpv6PrefixPathAny) MultiExitDiscriminator() *BgpPeer_UnicastIpv6Prefix_MultiExitDiscriminatorPathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_MultiExitDiscriminatorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "multi-exit-discriminator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIpv4Address (leaf): The IPv4 address of the egress interface.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv4-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv4-address"
func (n *BgpPeer_UnicastIpv6PrefixPath) NextHopIpv4Address() *BgpPeer_UnicastIpv6Prefix_NextHopIpv4AddressPath {
	ps := &BgpPeer_UnicastIpv6Prefix_NextHopIpv4AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIpv4Address (leaf): The IPv4 address of the egress interface.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv4-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv4-address"
func (n *BgpPeer_UnicastIpv6PrefixPathAny) NextHopIpv4Address() *BgpPeer_UnicastIpv6Prefix_NextHopIpv4AddressPathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_NextHopIpv4AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIpv6Address (leaf): The IPv6 address of the egress interface.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv6-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv6-address"
func (n *BgpPeer_UnicastIpv6PrefixPath) NextHopIpv6Address() *BgpPeer_UnicastIpv6Prefix_NextHopIpv6AddressPath {
	ps := &BgpPeer_UnicastIpv6Prefix_NextHopIpv6AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIpv6Address (leaf): The IPv6 address of the egress interface.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "state/next-hop-ipv6-address"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/next-hop-ipv6-address"
func (n *BgpPeer_UnicastIpv6PrefixPathAny) NextHopIpv6Address() *BgpPeer_UnicastIpv6Prefix_NextHopIpv6AddressPathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_NextHopIpv6AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of the prefix.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/origin"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/*/origin"
func (n *BgpPeer_UnicastIpv6PrefixPath) Origin() *BgpPeer_UnicastIpv6Prefix_OriginPath {
	ps := &BgpPeer_UnicastIpv6Prefix_OriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Origin (leaf): The origin of the prefix.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/origin"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/*/origin"
func (n *BgpPeer_UnicastIpv6PrefixPathAny) Origin() *BgpPeer_UnicastIpv6Prefix_OriginPathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_OriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathId (leaf): If the route is learned from a neighbor, the path-id
// corresponds to the path-id for the route in the
// corresponding adj-rib-in-post table.  If the route is
// injected from another protocol, or the neighbor does not
// support BGP add-paths, the path-id should be set
// to zero, also the default value.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/path-id"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/*/path-id"
func (n *BgpPeer_UnicastIpv6PrefixPath) PathId() *BgpPeer_UnicastIpv6Prefix_PathIdPath {
	ps := &BgpPeer_UnicastIpv6Prefix_PathIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathId (leaf): If the route is learned from a neighbor, the path-id
// corresponds to the path-id for the route in the
// corresponding adj-rib-in-post table.  If the route is
// injected from another protocol, or the neighbor does not
// support BGP add-paths, the path-id should be set
// to zero, also the default value.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/path-id"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/*/path-id"
func (n *BgpPeer_UnicastIpv6PrefixPathAny) PathId() *BgpPeer_UnicastIpv6Prefix_PathIdPathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_PathIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The prefix length.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/*/prefix-length"
func (n *BgpPeer_UnicastIpv6PrefixPath) PrefixLength() *BgpPeer_UnicastIpv6Prefix_PrefixLengthPath {
	ps := &BgpPeer_UnicastIpv6Prefix_PrefixLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixLength (leaf): The prefix length.
//
//	Defining module:      "open-traffic-generator-bgp"
//	Instantiating module: "open-traffic-generator-bgp"
//	Path from parent:     "*/prefix-length"
//	Path from root:       "/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/*/prefix-length"
func (n *BgpPeer_UnicastIpv6PrefixPathAny) PrefixLength() *BgpPeer_UnicastIpv6Prefix_PrefixLengthPathAny {
	ps := &BgpPeer_UnicastIpv6Prefix_PrefixLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv6PrefixPath) State() ygnmi.SingletonQuery[*oc.BgpPeer_UnicastIpv6Prefix] {
	return ygnmi.NewSingletonQuery[*oc.BgpPeer_UnicastIpv6Prefix](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv6PrefixPathAny) State() ygnmi.WildcardQuery[*oc.BgpPeer_UnicastIpv6Prefix] {
	return ygnmi.NewWildcardQuery[*oc.BgpPeer_UnicastIpv6Prefix](
		"BgpPeer_UnicastIpv6Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv6Prefix_AsPathPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/as-path YANG schema element.
type BgpPeer_UnicastIpv6Prefix_AsPathPath struct {
	*ygnmi.NodePath
}

// BgpPeer_UnicastIpv6Prefix_AsPathPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/as-path YANG schema element.
type BgpPeer_UnicastIpv6Prefix_AsPathPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv6Prefix_AsPathPath) State() ygnmi.SingletonQuery[*oc.BgpPeer_UnicastIpv6Prefix_AsPath] {
	return ygnmi.NewSingletonQuery[*oc.BgpPeer_UnicastIpv6Prefix_AsPath](
		"BgpPeer_UnicastIpv6Prefix_AsPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv6Prefix_AsPathPathAny) State() ygnmi.WildcardQuery[*oc.BgpPeer_UnicastIpv6Prefix_AsPath] {
	return ygnmi.NewWildcardQuery[*oc.BgpPeer_UnicastIpv6Prefix_AsPath](
		"BgpPeer_UnicastIpv6Prefix_AsPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// BgpPeer_UnicastIpv6Prefix_CommunityPath represents the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/community YANG schema element.
type BgpPeer_UnicastIpv6Prefix_CommunityPath struct {
	*ygnmi.NodePath
}

// BgpPeer_UnicastIpv6Prefix_CommunityPathAny represents the wildcard version of the /open-traffic-generator-bgp/bgp-peers/bgp-peer/unicast-ipv6-prefixes/unicast-ipv6-prefix/state/community YANG schema element.
type BgpPeer_UnicastIpv6Prefix_CommunityPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv6Prefix_CommunityPath) State() ygnmi.SingletonQuery[*oc.BgpPeer_UnicastIpv6Prefix_Community] {
	return ygnmi.NewSingletonQuery[*oc.BgpPeer_UnicastIpv6Prefix_Community](
		"BgpPeer_UnicastIpv6Prefix_Community",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpPeer_UnicastIpv6Prefix_CommunityPathAny) State() ygnmi.WildcardQuery[*oc.BgpPeer_UnicastIpv6Prefix_Community] {
	return ygnmi.NewWildcardQuery[*oc.BgpPeer_UnicastIpv6Prefix_Community](
		"BgpPeer_UnicastIpv6Prefix_Community",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
