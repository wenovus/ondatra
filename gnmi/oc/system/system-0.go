/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.10.0: (ygot: v0.29.12)
using the following YANG input files:
  - gnmi-collector-metadata.yang
  - gnsi/authz/gnsi-authz.yang
  - gnsi/cert/gnsi-cert.yang
  - gnsi/console/gnsi-console.yang
  - gnsi/pathz/gnsi-pathz.yang
  - gnsi/ssh/gnsi-ssh.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/ate/openconfig-ate-flow.yang
  - public/release/models/ate/openconfig-ate-intf.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-terminal-device.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	"reflect"

	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_BootTimePath represents the /openconfig-system/system/state/boot-time YANG schema element.
type System_BootTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_BootTimePathAny represents the wildcard version of the /openconfig-system/system/state/boot-time YANG schema element.
type System_BootTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/system/state/boot-time"
func (n *System_BootTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System).BootTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/system/state/boot-time"
func (n *System_BootTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System).BootTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_CurrentDatetimePath represents the /openconfig-system/system/state/current-datetime YANG schema element.
type System_CurrentDatetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_CurrentDatetimePathAny represents the wildcard version of the /openconfig-system/system/state/current-datetime YANG schema element.
type System_CurrentDatetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/current-datetime"
//	Path from root:       "/system/state/current-datetime"
func (n *System_CurrentDatetimePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-datetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).CurrentDatetime
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/current-datetime"
//	Path from root:       "/system/state/current-datetime"
func (n *System_CurrentDatetimePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-datetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).CurrentDatetime
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_DomainNamePath represents the /openconfig-system/system/state/domain-name YANG schema element.
type System_DomainNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_DomainNamePathAny represents the wildcard version of the /openconfig-system/system/state/domain-name YANG schema element.
type System_DomainNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/domain-name"
//	Path from root:       "/system/state/domain-name"
func (n *System_DomainNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "domain-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).DomainName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/domain-name"
//	Path from root:       "/system/state/domain-name"
func (n *System_DomainNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "domain-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).DomainName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/domain-name"
//	Path from root:       "/system/config/domain-name"
func (n *System_DomainNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "domain-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).DomainName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/domain-name"
//	Path from root:       "/system/config/domain-name"
func (n *System_DomainNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "domain-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).DomainName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_HostnamePath represents the /openconfig-system/system/state/hostname YANG schema element.
type System_HostnamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_HostnamePathAny represents the wildcard version of the /openconfig-system/system/state/hostname YANG schema element.
type System_HostnamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/state/hostname"
func (n *System_HostnamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/state/hostname"
func (n *System_HostnamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/config/hostname"
func (n *System_HostnamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/config/hostname"
func (n *System_HostnamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_LastConfigurationTimestampPath represents the /openconfig-system/system/state/last-configuration-timestamp YANG schema element.
type System_LastConfigurationTimestampPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_LastConfigurationTimestampPathAny represents the wildcard version of the /openconfig-system/system/state/last-configuration-timestamp YANG schema element.
type System_LastConfigurationTimestampPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-configuration-timestamp"
//	Path from root:       "/system/state/last-configuration-timestamp"
func (n *System_LastConfigurationTimestampPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-configuration-timestamp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System).LastConfigurationTimestamp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-configuration-timestamp"
//	Path from root:       "/system/state/last-configuration-timestamp"
func (n *System_LastConfigurationTimestampPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-configuration-timestamp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System).LastConfigurationTimestamp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_LoginBannerPath represents the /openconfig-system/system/state/login-banner YANG schema element.
type System_LoginBannerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_LoginBannerPathAny represents the wildcard version of the /openconfig-system/system/state/login-banner YANG schema element.
type System_LoginBannerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/login-banner"
//	Path from root:       "/system/state/login-banner"
func (n *System_LoginBannerPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "login-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).LoginBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/login-banner"
//	Path from root:       "/system/state/login-banner"
func (n *System_LoginBannerPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "login-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).LoginBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/login-banner"
//	Path from root:       "/system/config/login-banner"
func (n *System_LoginBannerPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "login-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).LoginBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/login-banner"
//	Path from root:       "/system/config/login-banner"
func (n *System_LoginBannerPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "login-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).LoginBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MotdBannerPath represents the /openconfig-system/system/state/motd-banner YANG schema element.
type System_MotdBannerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MotdBannerPathAny represents the wildcard version of the /openconfig-system/system/state/motd-banner YANG schema element.
type System_MotdBannerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/motd-banner"
//	Path from root:       "/system/state/motd-banner"
func (n *System_MotdBannerPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "motd-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).MotdBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/motd-banner"
//	Path from root:       "/system/state/motd-banner"
func (n *System_MotdBannerPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "motd-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).MotdBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/motd-banner"
//	Path from root:       "/system/config/motd-banner"
func (n *System_MotdBannerPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "motd-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).MotdBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/motd-banner"
//	Path from root:       "/system/config/motd-banner"
func (n *System_MotdBannerPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "motd-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).MotdBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SoftwareVersionPath represents the /openconfig-system/system/state/software-version YANG schema element.
type System_SoftwareVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SoftwareVersionPathAny represents the wildcard version of the /openconfig-system/system/state/software-version YANG schema element.
type System_SoftwareVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/software-version"
//	Path from root:       "/system/state/software-version"
func (n *System_SoftwareVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).SoftwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/software-version"
//	Path from root:       "/system/state/software-version"
func (n *System_SoftwareVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).SoftwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// SystemPath represents the /openconfig-system/system YANG schema element.
type SystemPath struct {
	*ygnmi.NodePath
}

// SystemPathAny represents the wildcard version of the /openconfig-system/system YANG schema element.
type SystemPathAny struct {
	*ygnmi.NodePath
}

// Aaa (container): Top-level container for AAA services
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "aaa"
//	Path from root:       "/system/aaa"
func (n *SystemPath) Aaa() *System_AaaPath {
	ps := &System_AaaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"aaa"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Aaa (container): Top-level container for AAA services
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "aaa"
//	Path from root:       "/system/aaa"
func (n *SystemPathAny) Aaa() *System_AaaPathAny {
	ps := &System_AaaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aaa"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AlarmAny (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
func (n *SystemPath) AlarmAny() *System_AlarmPathAny {
	ps := &System_AlarmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// AlarmAny (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
func (n *SystemPathAny) AlarmAny() *System_AlarmPathAny {
	ps := &System_AlarmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Alarm (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
//
//	Id: string
func (n *SystemPath) Alarm(Id string) *System_AlarmPath {
	ps := &System_AlarmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Alarm (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
//
//	Id: string
func (n *SystemPathAny) Alarm(Id string) *System_AlarmPathAny {
	ps := &System_AlarmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// AlarmMap (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
func (n *SystemPath) AlarmMap() *System_AlarmPathMap {
	ps := &System_AlarmPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AlarmMap (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
func (n *SystemPathAny) AlarmMap() *System_AlarmPathMapAny {
	ps := &System_AlarmPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BootTime (leaf): This timestamp indicates the time that the system was last
// restarted.  The value is the timestamp in nanoseconds relative
// to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/system/state/boot-time"
func (n *SystemPath) BootTime() *System_BootTimePath {
	ps := &System_BootTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootTime (leaf): This timestamp indicates the time that the system was last
// restarted.  The value is the timestamp in nanoseconds relative
// to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/system/state/boot-time"
func (n *SystemPathAny) BootTime() *System_BootTimePathAny {
	ps := &System_BootTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Clock (container): Top-level container for clock configuration data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "clock"
//	Path from root:       "/system/clock"
func (n *SystemPath) Clock() *System_ClockPath {
	ps := &System_ClockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"clock"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Clock (container): Top-level container for clock configuration data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "clock"
//	Path from root:       "/system/clock"
func (n *SystemPathAny) Clock() *System_ClockPathAny {
	ps := &System_ClockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"clock"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CpuAny (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
func (n *SystemPath) CpuAny() *System_CpuPathAny {
	ps := &System_CpuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// CpuAny (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
func (n *SystemPathAny) CpuAny() *System_CpuPathAny {
	ps := &System_CpuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Cpu (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
//
//	Index: [oc.E_Cpu_Index, oc.UnionUint32]
func (n *SystemPath) Cpu(Index oc.System_Cpu_Index_Union) *System_CpuPath {
	ps := &System_CpuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Cpu (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
//
//	Index: [oc.E_Cpu_Index, oc.UnionUint32]
func (n *SystemPathAny) Cpu(Index oc.System_Cpu_Index_Union) *System_CpuPathAny {
	ps := &System_CpuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// CpuMap (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
func (n *SystemPath) CpuMap() *System_CpuPathMap {
	ps := &System_CpuPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CpuMap (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
func (n *SystemPathAny) CpuMap() *System_CpuPathMapAny {
	ps := &System_CpuPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CurrentDatetime (leaf): The current system date and time.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/current-datetime"
//	Path from root:       "/system/state/current-datetime"
func (n *SystemPath) CurrentDatetime() *System_CurrentDatetimePath {
	ps := &System_CurrentDatetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-datetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentDatetime (leaf): The current system date and time.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/current-datetime"
//	Path from root:       "/system/state/current-datetime"
func (n *SystemPathAny) CurrentDatetime() *System_CurrentDatetimePathAny {
	ps := &System_CurrentDatetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-datetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dns (container): Enclosing container for DNS resolver data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "dns"
//	Path from root:       "/system/dns"
func (n *SystemPath) Dns() *System_DnsPath {
	ps := &System_DnsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dns"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Dns (container): Enclosing container for DNS resolver data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "dns"
//	Path from root:       "/system/dns"
func (n *SystemPathAny) Dns() *System_DnsPathAny {
	ps := &System_DnsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dns"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DomainName (leaf): Specifies the domain name used to form fully qualified name
// for unqualified hostnames.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/domain-name"
//	Path from root:       "/system/*/domain-name"
func (n *SystemPath) DomainName() *System_DomainNamePath {
	ps := &System_DomainNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "domain-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DomainName (leaf): Specifies the domain name used to form fully qualified name
// for unqualified hostnames.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/domain-name"
//	Path from root:       "/system/*/domain-name"
func (n *SystemPathAny) DomainName() *System_DomainNamePathAny {
	ps := &System_DomainNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "domain-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicies (container): Collection of OpenConfig-path-based authorization policies that
// have been installed on the device using the gNSI OpenConfig-
// path-based authorization policy management service.
// Each policy listed here is identified by an ID and has its
// version and creation date/time listed.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "gnmi-pathz-policies"
//	Path from root:       "/system/gnmi-pathz-policies"
func (n *SystemPath) GnmiPathzPolicies() *System_GnmiPathzPoliciesPath {
	ps := &System_GnmiPathzPoliciesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"gnmi-pathz-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GnmiPathzPolicies (container): Collection of OpenConfig-path-based authorization policies that
// have been installed on the device using the gNSI OpenConfig-
// path-based authorization policy management service.
// Each policy listed here is identified by an ID and has its
// version and creation date/time listed.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "gnmi-pathz-policies"
//	Path from root:       "/system/gnmi-pathz-policies"
func (n *SystemPathAny) GnmiPathzPolicies() *System_GnmiPathzPoliciesPathAny {
	ps := &System_GnmiPathzPoliciesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"gnmi-pathz-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GrpcCredentials (container): Collection of credentials that have been installed on
// the device using the gNSI certificate management service.
// Each credential listed here is identified by an ID and has its
// version and creation date/time listed.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-credentials"
//	Path from root:       "/system/grpc-credentials"
func (n *SystemPath) GrpcCredentials() *System_GrpcCredentialsPath {
	ps := &System_GrpcCredentialsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-credentials"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GrpcCredentials (container): Collection of credentials that have been installed on
// the device using the gNSI certificate management service.
// Each credential listed here is identified by an ID and has its
// version and creation date/time listed.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-credentials"
//	Path from root:       "/system/grpc-credentials"
func (n *SystemPathAny) GrpcCredentials() *System_GrpcCredentialsPathAny {
	ps := &System_GrpcCredentialsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-credentials"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GrpcServerAny (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
func (n *SystemPath) GrpcServerAny() *System_GrpcServerPathAny {
	ps := &System_GrpcServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// GrpcServerAny (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
func (n *SystemPathAny) GrpcServerAny() *System_GrpcServerPathAny {
	ps := &System_GrpcServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// GrpcServer (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
//
//	Name: string
func (n *SystemPath) GrpcServer(Name string) *System_GrpcServerPath {
	ps := &System_GrpcServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// GrpcServer (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
//
//	Name: string
func (n *SystemPathAny) GrpcServer(Name string) *System_GrpcServerPathAny {
	ps := &System_GrpcServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// GrpcServerMap (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
func (n *SystemPath) GrpcServerMap() *System_GrpcServerPathMap {
	ps := &System_GrpcServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GrpcServerMap (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
func (n *SystemPathAny) GrpcServerMap() *System_GrpcServerPathMapAny {
	ps := &System_GrpcServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Hostname (leaf): The hostname of the device -- should be a single domain
// label, without the domain.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/*/hostname"
func (n *SystemPath) Hostname() *System_HostnamePath {
	ps := &System_HostnamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Hostname (leaf): The hostname of the device -- should be a single domain
// label, without the domain.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/*/hostname"
func (n *SystemPathAny) Hostname() *System_HostnamePathAny {
	ps := &System_HostnamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastConfigurationTimestamp (leaf): Indicates the monotonically increasing timestamp at which the
// last configuration change was made. This may may be through CLI,
// gNMI or some other mechanism. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-configuration-timestamp"
//	Path from root:       "/system/state/last-configuration-timestamp"
func (n *SystemPath) LastConfigurationTimestamp() *System_LastConfigurationTimestampPath {
	ps := &System_LastConfigurationTimestampPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-configuration-timestamp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastConfigurationTimestamp (leaf): Indicates the monotonically increasing timestamp at which the
// last configuration change was made. This may may be through CLI,
// gNMI or some other mechanism. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-configuration-timestamp"
//	Path from root:       "/system/state/last-configuration-timestamp"
func (n *SystemPathAny) LastConfigurationTimestamp() *System_LastConfigurationTimestampPathAny {
	ps := &System_LastConfigurationTimestampPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-configuration-timestamp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// License (container): Container for license model
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "license"
//	Path from root:       "/system/license"
func (n *SystemPath) License() *System_LicensePath {
	ps := &System_LicensePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"license"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// License (container): Container for license model
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "license"
//	Path from root:       "/system/license"
func (n *SystemPathAny) License() *System_LicensePathAny {
	ps := &System_LicensePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"license"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Logging (container): Top-level container for data related to logging / syslog
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "logging"
//	Path from root:       "/system/logging"
func (n *SystemPath) Logging() *System_LoggingPath {
	ps := &System_LoggingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"logging"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Logging (container): Top-level container for data related to logging / syslog
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "logging"
//	Path from root:       "/system/logging"
func (n *SystemPathAny) Logging() *System_LoggingPathAny {
	ps := &System_LoggingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"logging"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LoginBanner (leaf): The console login message displayed before the login prompt,
// i.e., before a user logs into the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/login-banner"
//	Path from root:       "/system/*/login-banner"
func (n *SystemPath) LoginBanner() *System_LoginBannerPath {
	ps := &System_LoginBannerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "login-banner"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoginBanner (leaf): The console login message displayed before the login prompt,
// i.e., before a user logs into the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/login-banner"
//	Path from root:       "/system/*/login-banner"
func (n *SystemPathAny) LoginBanner() *System_LoginBannerPathAny {
	ps := &System_LoginBannerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "login-banner"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (container): Top-level container for system's MAC address configuration and state
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mac-address"
//	Path from root:       "/system/mac-address"
func (n *SystemPath) MacAddress() *System_MacAddressPath {
	ps := &System_MacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacAddress (container): Top-level container for system's MAC address configuration and state
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mac-address"
//	Path from root:       "/system/mac-address"
func (n *SystemPathAny) MacAddress() *System_MacAddressPathAny {
	ps := &System_MacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Memory (container): Top-level container for system memory data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "memory"
//	Path from root:       "/system/memory"
func (n *SystemPath) Memory() *System_MemoryPath {
	ps := &System_MemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Memory (container): Top-level container for system memory data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "memory"
//	Path from root:       "/system/memory"
func (n *SystemPathAny) Memory() *System_MemoryPathAny {
	ps := &System_MemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Messages (container): Top-level container for Syslog messages.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "messages"
//	Path from root:       "/system/messages"
func (n *SystemPath) Messages() *System_MessagesPath {
	ps := &System_MessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"messages"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Messages (container): Top-level container for Syslog messages.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "messages"
//	Path from root:       "/system/messages"
func (n *SystemPathAny) Messages() *System_MessagesPathAny {
	ps := &System_MessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"messages"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MotdBanner (leaf): The console message displayed after a user logs into the
// system.  They system may append additional standard
// information such as the current system date and time, uptime,
// last login timestamp, etc.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/motd-banner"
//	Path from root:       "/system/*/motd-banner"
func (n *SystemPath) MotdBanner() *System_MotdBannerPath {
	ps := &System_MotdBannerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "motd-banner"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MotdBanner (leaf): The console message displayed after a user logs into the
// system.  They system may append additional standard
// information such as the current system date and time, uptime,
// last login timestamp, etc.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/motd-banner"
//	Path from root:       "/system/*/motd-banner"
func (n *SystemPathAny) MotdBanner() *System_MotdBannerPathAny {
	ps := &System_MotdBannerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "motd-banner"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MountPointAny (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
func (n *SystemPath) MountPointAny() *System_MountPointPathAny {
	ps := &System_MountPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// MountPointAny (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
func (n *SystemPathAny) MountPointAny() *System_MountPointPathAny {
	ps := &System_MountPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// MountPoint (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
//
//	Name: string
func (n *SystemPath) MountPoint(Name string) *System_MountPointPath {
	ps := &System_MountPointPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// MountPoint (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
//
//	Name: string
func (n *SystemPathAny) MountPoint(Name string) *System_MountPointPathAny {
	ps := &System_MountPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// MountPointMap (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
func (n *SystemPath) MountPointMap() *System_MountPointPathMap {
	ps := &System_MountPointPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MountPointMap (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
func (n *SystemPathAny) MountPointMap() *System_MountPointPathMapAny {
	ps := &System_MountPointPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ntp (container): Top-level container for NTP configuration and state
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp"
//	Path from root:       "/system/ntp"
func (n *SystemPath) Ntp() *System_NtpPath {
	ps := &System_NtpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ntp (container): Top-level container for NTP configuration and state
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp"
//	Path from root:       "/system/ntp"
func (n *SystemPathAny) Ntp() *System_NtpPathAny {
	ps := &System_NtpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProcessAny (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
func (n *SystemPath) ProcessAny() *System_ProcessPathAny {
	ps := &System_ProcessPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": "*"},
			n,
		),
	}
	return ps
}

// ProcessAny (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
func (n *SystemPathAny) ProcessAny() *System_ProcessPathAny {
	ps := &System_ProcessPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": "*"},
			n,
		),
	}
	return ps
}

// Process (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
//
//	Pid: uint64
func (n *SystemPath) Process(Pid uint64) *System_ProcessPath {
	ps := &System_ProcessPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": Pid},
			n,
		),
	}
	return ps
}

// Process (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
//
//	Pid: uint64
func (n *SystemPathAny) Process(Pid uint64) *System_ProcessPathAny {
	ps := &System_ProcessPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": Pid},
			n,
		),
	}
	return ps
}

// ProcessMap (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
func (n *SystemPath) ProcessMap() *System_ProcessPathMap {
	ps := &System_ProcessPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProcessMap (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
func (n *SystemPathAny) ProcessMap() *System_ProcessPathMapAny {
	ps := &System_ProcessPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SoftwareVersion (leaf): Operating system version of the currently active controller
// of the device.  It is required that this value matches the
// value of the state/software-version leaf in the component
// of type OPERATING_SYSTEM.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/software-version"
//	Path from root:       "/system/state/software-version"
func (n *SystemPath) SoftwareVersion() *System_SoftwareVersionPath {
	ps := &System_SoftwareVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftwareVersion (leaf): Operating system version of the currently active controller
// of the device.  It is required that this value matches the
// value of the state/software-version leaf in the component
// of type OPERATING_SYSTEM.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/software-version"
//	Path from root:       "/system/state/software-version"
func (n *SystemPathAny) SoftwareVersion() *System_SoftwareVersionPathAny {
	ps := &System_SoftwareVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SshServer (container): Top-level container for ssh server
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ssh-server"
//	Path from root:       "/system/ssh-server"
func (n *SystemPath) SshServer() *System_SshServerPath {
	ps := &System_SshServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ssh-server"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SshServer (container): Top-level container for ssh server
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ssh-server"
//	Path from root:       "/system/ssh-server"
func (n *SystemPathAny) SshServer() *System_SshServerPathAny {
	ps := &System_SshServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ssh-server"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TelnetServer (container): Top-level container for telnet terminal servers
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "telnet-server"
//	Path from root:       "/system/telnet-server"
func (n *SystemPath) TelnetServer() *System_TelnetServerPath {
	ps := &System_TelnetServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"telnet-server"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TelnetServer (container): Top-level container for telnet terminal servers
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "telnet-server"
//	Path from root:       "/system/telnet-server"
func (n *SystemPathAny) TelnetServer() *System_TelnetServerPathAny {
	ps := &System_TelnetServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"telnet-server"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *SystemPath) State() ygnmi.SingletonQuery[*oc.System] {
	return ygnmi.NewSingletonQuery[*oc.System](
		"System",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *SystemPathAny) State() ygnmi.WildcardQuery[*oc.System] {
	return ygnmi.NewWildcardQuery[*oc.System](
		"System",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *SystemPath) Config() ygnmi.ConfigQuery[*oc.System] {
	return ygnmi.NewConfigQuery[*oc.System](
		"System",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *SystemPathAny) Config() ygnmi.WildcardQuery[*oc.System] {
	return ygnmi.NewWildcardQuery[*oc.System](
		"System",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_AaaPath represents the /openconfig-system/system/aaa YANG schema element.
type System_AaaPath struct {
	*ygnmi.NodePath
}

// System_AaaPathAny represents the wildcard version of the /openconfig-system/system/aaa YANG schema element.
type System_AaaPathAny struct {
	*ygnmi.NodePath
}

// Accounting (container): Top-level container for AAA accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "accounting"
//	Path from root:       "/system/aaa/accounting"
func (n *System_AaaPath) Accounting() *System_Aaa_AccountingPath {
	ps := &System_Aaa_AccountingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"accounting"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Accounting (container): Top-level container for AAA accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "accounting"
//	Path from root:       "/system/aaa/accounting"
func (n *System_AaaPathAny) Accounting() *System_Aaa_AccountingPathAny {
	ps := &System_Aaa_AccountingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"accounting"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): Top-level container for global authentication data
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "authentication"
//	Path from root:       "/system/aaa/authentication"
func (n *System_AaaPath) Authentication() *System_Aaa_AuthenticationPath {
	ps := &System_Aaa_AuthenticationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): Top-level container for global authentication data
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "authentication"
//	Path from root:       "/system/aaa/authentication"
func (n *System_AaaPathAny) Authentication() *System_Aaa_AuthenticationPathAny {
	ps := &System_Aaa_AuthenticationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authorization (container): Top-level container for AAA authorization configuration
// and operational state data
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "authorization"
//	Path from root:       "/system/aaa/authorization"
func (n *System_AaaPath) Authorization() *System_Aaa_AuthorizationPath {
	ps := &System_Aaa_AuthorizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authorization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authorization (container): Top-level container for AAA authorization configuration
// and operational state data
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "authorization"
//	Path from root:       "/system/aaa/authorization"
func (n *System_AaaPathAny) Authorization() *System_Aaa_AuthorizationPathAny {
	ps := &System_Aaa_AuthorizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authorization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerGroupAny (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
func (n *System_AaaPath) ServerGroupAny() *System_Aaa_ServerGroupPathAny {
	ps := &System_Aaa_ServerGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ServerGroupAny (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
func (n *System_AaaPathAny) ServerGroupAny() *System_Aaa_ServerGroupPathAny {
	ps := &System_Aaa_ServerGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ServerGroup (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
//
//	Name: string
func (n *System_AaaPath) ServerGroup(Name string) *System_Aaa_ServerGroupPath {
	ps := &System_Aaa_ServerGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ServerGroup (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
//
//	Name: string
func (n *System_AaaPathAny) ServerGroup(Name string) *System_Aaa_ServerGroupPathAny {
	ps := &System_Aaa_ServerGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ServerGroupMap (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
func (n *System_AaaPath) ServerGroupMap() *System_Aaa_ServerGroupPathMap {
	ps := &System_Aaa_ServerGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerGroupMap (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
func (n *System_AaaPathAny) ServerGroupMap() *System_Aaa_ServerGroupPathMapAny {
	ps := &System_Aaa_ServerGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AaaPath) State() ygnmi.SingletonQuery[*oc.System_Aaa] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa](
		"System_Aaa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AaaPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa](
		"System_Aaa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_AaaPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa](
		"System_Aaa",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_AaaPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa](
		"System_Aaa",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_AccountingMethodPath represents the /openconfig-system/system/aaa/accounting/state/accounting-method YANG schema element.
type System_Aaa_Accounting_AccountingMethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Accounting_AccountingMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/state/accounting-method YANG schema element.
type System_Aaa_Accounting_AccountingMethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/accounting-method"
//	Path from root:       "/system/aaa/accounting/state/accounting-method"
func (n *System_Aaa_Accounting_AccountingMethodPath) State() ygnmi.SingletonQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union] {
	return ygnmi.NewSingletonQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union](
		"System_Aaa_Accounting",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accounting-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Accounting_AccountingMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).AccountingMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/accounting-method"
//	Path from root:       "/system/aaa/accounting/state/accounting-method"
func (n *System_Aaa_Accounting_AccountingMethodPathAny) State() ygnmi.WildcardQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union](
		"System_Aaa_Accounting",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accounting-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Accounting_AccountingMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).AccountingMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/accounting-method"
//	Path from root:       "/system/aaa/accounting/config/accounting-method"
func (n *System_Aaa_Accounting_AccountingMethodPath) Config() ygnmi.ConfigQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union] {
	return ygnmi.NewConfigQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union](
		"System_Aaa_Accounting",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accounting-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Accounting_AccountingMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).AccountingMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/accounting-method"
//	Path from root:       "/system/aaa/accounting/config/accounting-method"
func (n *System_Aaa_Accounting_AccountingMethodPathAny) Config() ygnmi.WildcardQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union](
		"System_Aaa_Accounting",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accounting-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Accounting_AccountingMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).AccountingMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_AccountingPath represents the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_AccountingPath struct {
	*ygnmi.NodePath
}

// System_Aaa_AccountingPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_AccountingPathAny struct {
	*ygnmi.NodePath
}

// AccountingMethod (leaf-list): An ordered list of methods used for AAA accounting for this
// event type.  The method is defined by the destination for
// accounting data, which may be specified as the group of
// all TACACS+/RADIUS servers, a defined server group, or
// the local system.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/accounting-method"
//	Path from root:       "/system/aaa/accounting/*/accounting-method"
func (n *System_Aaa_AccountingPath) AccountingMethod() *System_Aaa_Accounting_AccountingMethodPath {
	ps := &System_Aaa_Accounting_AccountingMethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accounting-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccountingMethod (leaf-list): An ordered list of methods used for AAA accounting for this
// event type.  The method is defined by the destination for
// accounting data, which may be specified as the group of
// all TACACS+/RADIUS servers, a defined server group, or
// the local system.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/accounting-method"
//	Path from root:       "/system/aaa/accounting/*/accounting-method"
func (n *System_Aaa_AccountingPathAny) AccountingMethod() *System_Aaa_Accounting_AccountingMethodPathAny {
	ps := &System_Aaa_Accounting_AccountingMethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accounting-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EventAny (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
func (n *System_Aaa_AccountingPath) EventAny() *System_Aaa_Accounting_EventPathAny {
	ps := &System_Aaa_Accounting_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
	return ps
}

// EventAny (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
func (n *System_Aaa_AccountingPathAny) EventAny() *System_Aaa_Accounting_EventPathAny {
	ps := &System_Aaa_Accounting_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
	return ps
}

// Event (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
//
//	EventType: oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPath) Event(EventType oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_EventPath {
	ps := &System_Aaa_Accounting_EventPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
	return ps
}

// Event (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
//
//	EventType: oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPathAny) Event(EventType oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_EventPathAny {
	ps := &System_Aaa_Accounting_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
	return ps
}

// EventMap (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
func (n *System_Aaa_AccountingPath) EventMap() *System_Aaa_Accounting_EventPathMap {
	ps := &System_Aaa_Accounting_EventPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"events"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EventMap (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
func (n *System_Aaa_AccountingPathAny) EventMap() *System_Aaa_Accounting_EventPathMapAny {
	ps := &System_Aaa_Accounting_EventPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AccountingPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Accounting] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Accounting](
		"System_Aaa_Accounting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AccountingPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Accounting] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Accounting](
		"System_Aaa_Accounting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AccountingPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Accounting] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Accounting](
		"System_Aaa_Accounting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AccountingPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Accounting] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Accounting](
		"System_Aaa_Accounting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_Event_EventTypePath represents the /openconfig-system/system/aaa/accounting/events/event/state/event-type YANG schema element.
type System_Aaa_Accounting_Event_EventTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Accounting_Event_EventTypePathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event/state/event-type YANG schema element.
type System_Aaa_Accounting_Event_EventTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/state/event-type"
func (n *System_Aaa_Accounting_Event_EventTypePath) State() ygnmi.SingletonQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE](
		"System_Aaa_Accounting_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/state/event-type"
func (n *System_Aaa_Accounting_Event_EventTypePathAny) State() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE](
		"System_Aaa_Accounting_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/config/event-type"
func (n *System_Aaa_Accounting_Event_EventTypePath) Config() ygnmi.ConfigQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE](
		"System_Aaa_Accounting_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/config/event-type"
func (n *System_Aaa_Accounting_Event_EventTypePathAny) Config() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE](
		"System_Aaa_Accounting_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_Event_RecordPath represents the /openconfig-system/system/aaa/accounting/events/event/state/record YANG schema element.
type System_Aaa_Accounting_Event_RecordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Accounting_Event_RecordPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event/state/record YANG schema element.
type System_Aaa_Accounting_Event_RecordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/record"
//	Path from root:       "/system/aaa/accounting/events/event/state/record"
func (n *System_Aaa_Accounting_Event_RecordPath) State() ygnmi.SingletonQuery[oc.E_Event_Record] {
	return ygnmi.NewSingletonQuery[oc.E_Event_Record](
		"System_Aaa_Accounting_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "record"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Event_Record, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).Record
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/record"
//	Path from root:       "/system/aaa/accounting/events/event/state/record"
func (n *System_Aaa_Accounting_Event_RecordPathAny) State() ygnmi.WildcardQuery[oc.E_Event_Record] {
	return ygnmi.NewWildcardQuery[oc.E_Event_Record](
		"System_Aaa_Accounting_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "record"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Event_Record, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).Record
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/record"
//	Path from root:       "/system/aaa/accounting/events/event/config/record"
func (n *System_Aaa_Accounting_Event_RecordPath) Config() ygnmi.ConfigQuery[oc.E_Event_Record] {
	return ygnmi.NewConfigQuery[oc.E_Event_Record](
		"System_Aaa_Accounting_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "record"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Event_Record, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).Record
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/record"
//	Path from root:       "/system/aaa/accounting/events/event/config/record"
func (n *System_Aaa_Accounting_Event_RecordPathAny) Config() ygnmi.WildcardQuery[oc.E_Event_Record] {
	return ygnmi.NewWildcardQuery[oc.E_Event_Record](
		"System_Aaa_Accounting_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "record"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Event_Record, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).Record
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_EventPath represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPath struct {
	*ygnmi.NodePath
}

// System_Aaa_Accounting_EventPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPathAny struct {
	*ygnmi.NodePath
}

// System_Aaa_Accounting_EventPathMap represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPathMap struct {
	*ygnmi.NodePath
}

// System_Aaa_Accounting_EventPathMapAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPathMapAny struct {
	*ygnmi.NodePath
}

// EventType (leaf): The type of activity to record at the AAA accounting
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/*/event-type"
func (n *System_Aaa_Accounting_EventPath) EventType() *System_Aaa_Accounting_Event_EventTypePath {
	ps := &System_Aaa_Accounting_Event_EventTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "event-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EventType (leaf): The type of activity to record at the AAA accounting
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/*/event-type"
func (n *System_Aaa_Accounting_EventPathAny) EventType() *System_Aaa_Accounting_Event_EventTypePathAny {
	ps := &System_Aaa_Accounting_Event_EventTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "event-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Record (leaf): Type of record to send to the accounting server for this
// activity type
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/record"
//	Path from root:       "/system/aaa/accounting/events/event/*/record"
func (n *System_Aaa_Accounting_EventPath) Record() *System_Aaa_Accounting_Event_RecordPath {
	ps := &System_Aaa_Accounting_Event_RecordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "record"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Record (leaf): Type of record to send to the accounting server for this
// activity type
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/record"
//	Path from root:       "/system/aaa/accounting/events/event/*/record"
func (n *System_Aaa_Accounting_EventPathAny) Record() *System_Aaa_Accounting_Event_RecordPathAny {
	ps := &System_Aaa_Accounting_Event_RecordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "record"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting_Event",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting_Event",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting_Event",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting_Event",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathMap) State() ygnmi.SingletonQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewSingletonQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewWildcardQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathMap) Config() ygnmi.ConfigQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewConfigQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewWildcardQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// System_Aaa_Authentication_AuthenticationMethodPath represents the /openconfig-system/system/aaa/authentication/state/authentication-method YANG schema element.
type System_Aaa_Authentication_AuthenticationMethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AuthenticationMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/state/authentication-method YANG schema element.
type System_Aaa_Authentication_AuthenticationMethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authentication-method"
//	Path from root:       "/system/aaa/authentication/state/authentication-method"
func (n *System_Aaa_Authentication_AuthenticationMethodPath) State() ygnmi.SingletonQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union] {
	return ygnmi.NewSingletonQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union](
		"System_Aaa_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authentication_AuthenticationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).AuthenticationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authentication-method"
//	Path from root:       "/system/aaa/authentication/state/authentication-method"
func (n *System_Aaa_Authentication_AuthenticationMethodPathAny) State() ygnmi.WildcardQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union](
		"System_Aaa_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authentication_AuthenticationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).AuthenticationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/authentication-method"
//	Path from root:       "/system/aaa/authentication/config/authentication-method"
func (n *System_Aaa_Authentication_AuthenticationMethodPath) Config() ygnmi.ConfigQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union] {
	return ygnmi.NewConfigQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union](
		"System_Aaa_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authentication_AuthenticationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).AuthenticationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/authentication-method"
//	Path from root:       "/system/aaa/authentication/config/authentication-method"
func (n *System_Aaa_Authentication_AuthenticationMethodPathAny) Config() ygnmi.WildcardQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union](
		"System_Aaa_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authentication_AuthenticationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).AuthenticationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_AuthenticationPath represents the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_AuthenticationPath struct {
	*ygnmi.NodePath
}

// System_Aaa_AuthenticationPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_AuthenticationPathAny struct {
	*ygnmi.NodePath
}

// AdminUser (container): Top-level container for the system root or admin user
// configuration and operational state
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "admin-user"
//	Path from root:       "/system/aaa/authentication/admin-user"
func (n *System_Aaa_AuthenticationPath) AdminUser() *System_Aaa_Authentication_AdminUserPath {
	ps := &System_Aaa_Authentication_AdminUserPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-user"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdminUser (container): Top-level container for the system root or admin user
// configuration and operational state
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "admin-user"
//	Path from root:       "/system/aaa/authentication/admin-user"
func (n *System_Aaa_AuthenticationPathAny) AdminUser() *System_Aaa_Authentication_AdminUserPathAny {
	ps := &System_Aaa_Authentication_AdminUserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-user"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AuthenticationMethod (leaf-list): Ordered list of authentication methods for users.  This
// can be either a reference to a server group, or a well-
// defined designation in the AAA_METHOD_TYPE identity.  If
// authentication fails with one method, the next defined
// method is tried -- failure of all methods results in the
// user being denied access.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/authentication-method"
//	Path from root:       "/system/aaa/authentication/*/authentication-method"
func (n *System_Aaa_AuthenticationPath) AuthenticationMethod() *System_Aaa_Authentication_AuthenticationMethodPath {
	ps := &System_Aaa_Authentication_AuthenticationMethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationMethod (leaf-list): Ordered list of authentication methods for users.  This
// can be either a reference to a server group, or a well-
// defined designation in the AAA_METHOD_TYPE identity.  If
// authentication fails with one method, the next defined
// method is tried -- failure of all methods results in the
// user being denied access.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/authentication-method"
//	Path from root:       "/system/aaa/authentication/*/authentication-method"
func (n *System_Aaa_AuthenticationPathAny) AuthenticationMethod() *System_Aaa_Authentication_AuthenticationMethodPathAny {
	ps := &System_Aaa_Authentication_AuthenticationMethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UserAny (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
func (n *System_Aaa_AuthenticationPath) UserAny() *System_Aaa_Authentication_UserPathAny {
	ps := &System_Aaa_Authentication_UserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": "*"},
			n,
		),
	}
	return ps
}

// UserAny (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
func (n *System_Aaa_AuthenticationPathAny) UserAny() *System_Aaa_Authentication_UserPathAny {
	ps := &System_Aaa_Authentication_UserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": "*"},
			n,
		),
	}
	return ps
}

// User (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
//
//	Username: string
func (n *System_Aaa_AuthenticationPath) User(Username string) *System_Aaa_Authentication_UserPath {
	ps := &System_Aaa_Authentication_UserPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": Username},
			n,
		),
	}
	return ps
}

// User (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
//
//	Username: string
func (n *System_Aaa_AuthenticationPathAny) User(Username string) *System_Aaa_Authentication_UserPathAny {
	ps := &System_Aaa_Authentication_UserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": Username},
			n,
		),
	}
	return ps
}

// UserMap (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
func (n *System_Aaa_AuthenticationPath) UserMap() *System_Aaa_Authentication_UserPathMap {
	ps := &System_Aaa_Authentication_UserPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"users"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UserMap (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
func (n *System_Aaa_AuthenticationPathAny) UserMap() *System_Aaa_Authentication_UserPathMapAny {
	ps := &System_Aaa_Authentication_UserPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"users"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthenticationPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Authentication] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Authentication](
		"System_Aaa_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthenticationPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication](
		"System_Aaa_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthenticationPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Authentication] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Authentication](
		"System_Aaa_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthenticationPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication](
		"System_Aaa_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_AdminPasswordPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_AdminPasswordPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-password"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-password"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/config/admin-password"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/config/admin-password"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password-hashed YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password-hashed YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/config/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/config/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_AdminUsernamePath represents the /openconfig-system/system/aaa/authentication/admin-user/state/admin-username YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminUsernamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_AdminUsernamePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/admin-username YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminUsernamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-username"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUser_AdminUsernamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminUsername
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-username"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUser_AdminUsernamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminUsername
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUserPath represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUserPath struct {
	*ygnmi.NodePath
}

// System_Aaa_Authentication_AdminUserPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUserPathAny struct {
	*ygnmi.NodePath
}

// AdminPassword (leaf): The admin/root password, supplied as a cleartext string.
// The system should hash and only store the password as a
// hashed value.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/*/admin-password"
func (n *System_Aaa_Authentication_AdminUserPath) AdminPassword() *System_Aaa_Authentication_AdminUser_AdminPasswordPath {
	ps := &System_Aaa_Authentication_AdminUser_AdminPasswordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminPassword (leaf): The admin/root password, supplied as a cleartext string.
// The system should hash and only store the password as a
// hashed value.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/*/admin-password"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminPassword() *System_Aaa_Authentication_AdminUser_AdminPasswordPathAny {
	ps := &System_Aaa_Authentication_AdminUser_AdminPasswordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminPasswordHashed (leaf): The admin/root password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/*/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUserPath) AdminPasswordHashed() *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath {
	ps := &System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-password-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminPasswordHashed (leaf): The admin/root password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/*/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminPasswordHashed() *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny {
	ps := &System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-password-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminUsername (leaf): Name of the administrator user account, e.g., admin, root,
// etc.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-username"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUserPath) AdminUsername() *System_Aaa_Authentication_AdminUser_AdminUsernamePath {
	ps := &System_Aaa_Authentication_AdminUser_AdminUsernamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-username"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminUsername (leaf): Name of the administrator user account, e.g., admin, root,
// etc.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-username"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminUsername() *System_Aaa_Authentication_AdminUser_AdminUsernamePathAny {
	ps := &System_Aaa_Authentication_AdminUser_AdminUsernamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-username"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_AdminUserPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Authentication_AdminUser] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Authentication_AdminUser](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_AdminUserPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication_AdminUser] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication_AdminUser](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_AdminUserPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Authentication_AdminUser] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Authentication_AdminUser](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_AdminUserPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication_AdminUser] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication_AdminUser](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPath represents the /openconfig-system/system/aaa/authentication/users/user/state/authorized-keys-list-created-on YANG schema element.
type System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/authorized-keys-list-created-on YANG schema element.
type System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedKeysListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedKeysListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_AuthorizedKeysListVersionPath represents the /openconfig-system/system/aaa/authentication/users/user/state/authorized-keys-list-version YANG schema element.
type System_Aaa_Authentication_User_AuthorizedKeysListVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_AuthorizedKeysListVersionPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/authorized-keys-list-version YANG schema element.
type System_Aaa_Authentication_User_AuthorizedKeysListVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_User_AuthorizedKeysListVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedKeysListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_User_AuthorizedKeysListVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedKeysListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_AuthorizedUsersListCreatedOnPath represents the /openconfig-system/system/aaa/authentication/users/user/state/authorized-users-list-created-on YANG schema element.
type System_Aaa_Authentication_User_AuthorizedUsersListCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_AuthorizedUsersListCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/authorized-users-list-created-on YANG schema element.
type System_Aaa_Authentication_User_AuthorizedUsersListCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/authorized-users-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-users-list-created-on"
func (n *System_Aaa_Authentication_User_AuthorizedUsersListCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-users-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedUsersListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/authorized-users-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-users-list-created-on"
func (n *System_Aaa_Authentication_User_AuthorizedUsersListCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-users-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedUsersListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_AuthorizedUsersListVersionPath represents the /openconfig-system/system/aaa/authentication/users/user/state/authorized-users-list-version YANG schema element.
type System_Aaa_Authentication_User_AuthorizedUsersListVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_AuthorizedUsersListVersionPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/authorized-users-list-version YANG schema element.
type System_Aaa_Authentication_User_AuthorizedUsersListVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/authorized-users-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-users-list-version"
func (n *System_Aaa_Authentication_User_AuthorizedUsersListVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-users-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedUsersListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/authorized-users-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-users-list-version"
func (n *System_Aaa_Authentication_User_AuthorizedUsersListVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-users-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedUsersListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_PasswordPath represents the /openconfig-system/system/aaa/authentication/users/user/state/password YANG schema element.
type System_Aaa_Authentication_User_PasswordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_PasswordPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/password YANG schema element.
type System_Aaa_Authentication_User_PasswordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password"
//	Path from root:       "/system/aaa/authentication/users/user/state/password"
func (n *System_Aaa_Authentication_User_PasswordPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Password
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password"
//	Path from root:       "/system/aaa/authentication/users/user/state/password"
func (n *System_Aaa_Authentication_User_PasswordPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Password
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/password"
//	Path from root:       "/system/aaa/authentication/users/user/config/password"
func (n *System_Aaa_Authentication_User_PasswordPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Password
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/password"
//	Path from root:       "/system/aaa/authentication/users/user/config/password"
func (n *System_Aaa_Authentication_User_PasswordPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Password
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_PasswordCreatedOnPath represents the /openconfig-system/system/aaa/authentication/users/user/state/password-created-on YANG schema element.
type System_Aaa_Authentication_User_PasswordCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_PasswordCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/password-created-on YANG schema element.
type System_Aaa_Authentication_User_PasswordCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-console"
//	Instantiating module: "gnsi-console"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-created-on"
func (n *System_Aaa_Authentication_User_PasswordCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-console"
//	Instantiating module: "gnsi-console"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-created-on"
func (n *System_Aaa_Authentication_User_PasswordCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_PasswordHashedPath represents the /openconfig-system/system/aaa/authentication/users/user/state/password-hashed YANG schema element.
type System_Aaa_Authentication_User_PasswordHashedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_PasswordHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/password-hashed YANG schema element.
type System_Aaa_Authentication_User_PasswordHashedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-hashed"
func (n *System_Aaa_Authentication_User_PasswordHashedPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-hashed"
func (n *System_Aaa_Authentication_User_PasswordHashedPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/config/password-hashed"
func (n *System_Aaa_Authentication_User_PasswordHashedPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/config/password-hashed"
func (n *System_Aaa_Authentication_User_PasswordHashedPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_PasswordVersionPath represents the /openconfig-system/system/aaa/authentication/users/user/state/password-version YANG schema element.
type System_Aaa_Authentication_User_PasswordVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_PasswordVersionPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/password-version YANG schema element.
type System_Aaa_Authentication_User_PasswordVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-console"
//	Instantiating module: "gnsi-console"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-version"
func (n *System_Aaa_Authentication_User_PasswordVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-console"
//	Instantiating module: "gnsi-console"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-version"
func (n *System_Aaa_Authentication_User_PasswordVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_RolePath represents the /openconfig-system/system/aaa/authentication/users/user/state/role YANG schema element.
type System_Aaa_Authentication_User_RolePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_RolePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/role YANG schema element.
type System_Aaa_Authentication_User_RolePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/role"
//	Path from root:       "/system/aaa/authentication/users/user/state/role"
func (n *System_Aaa_Authentication_User_RolePath) State() ygnmi.SingletonQuery[oc.System_Aaa_Authentication_User_Role_Union] {
	return ygnmi.NewSingletonQuery[oc.System_Aaa_Authentication_User_Role_Union](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Authentication_User_Role_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/role"
//	Path from root:       "/system/aaa/authentication/users/user/state/role"
func (n *System_Aaa_Authentication_User_RolePathAny) State() ygnmi.WildcardQuery[oc.System_Aaa_Authentication_User_Role_Union] {
	return ygnmi.NewWildcardQuery[oc.System_Aaa_Authentication_User_Role_Union](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Authentication_User_Role_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/role"
//	Path from root:       "/system/aaa/authentication/users/user/config/role"
func (n *System_Aaa_Authentication_User_RolePath) Config() ygnmi.ConfigQuery[oc.System_Aaa_Authentication_User_Role_Union] {
	return ygnmi.NewConfigQuery[oc.System_Aaa_Authentication_User_Role_Union](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Authentication_User_Role_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/role"
//	Path from root:       "/system/aaa/authentication/users/user/config/role"
func (n *System_Aaa_Authentication_User_RolePathAny) Config() ygnmi.WildcardQuery[oc.System_Aaa_Authentication_User_Role_Union] {
	return ygnmi.NewWildcardQuery[oc.System_Aaa_Authentication_User_Role_Union](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Authentication_User_Role_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_SshKeyPath represents the /openconfig-system/system/aaa/authentication/users/user/state/ssh-key YANG schema element.
type System_Aaa_Authentication_User_SshKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_SshKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/ssh-key YANG schema element.
type System_Aaa_Authentication_User_SshKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/state/ssh-key"
func (n *System_Aaa_Authentication_User_SshKeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ssh-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).SshKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/state/ssh-key"
func (n *System_Aaa_Authentication_User_SshKeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ssh-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).SshKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/config/ssh-key"
func (n *System_Aaa_Authentication_User_SshKeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ssh-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).SshKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/config/ssh-key"
func (n *System_Aaa_Authentication_User_SshKeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ssh-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).SshKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_UsernamePath represents the /openconfig-system/system/aaa/authentication/users/user/state/username YANG schema element.
type System_Aaa_Authentication_User_UsernamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_UsernamePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/username YANG schema element.
type System_Aaa_Authentication_User_UsernamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/username"
//	Path from root:       "/system/aaa/authentication/users/user/state/username"
func (n *System_Aaa_Authentication_User_UsernamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Username
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/username"
//	Path from root:       "/system/aaa/authentication/users/user/state/username"
func (n *System_Aaa_Authentication_User_UsernamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Username
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/username"
//	Path from root:       "/system/aaa/authentication/users/user/config/username"
func (n *System_Aaa_Authentication_User_UsernamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Username
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/username"
//	Path from root:       "/system/aaa/authentication/users/user/config/username"
func (n *System_Aaa_Authentication_User_UsernamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Username
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_UserPath represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPath struct {
	*ygnmi.NodePath
}

// System_Aaa_Authentication_UserPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPathAny struct {
	*ygnmi.NodePath
}

// System_Aaa_Authentication_UserPathMap represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPathMap struct {
	*ygnmi.NodePath
}

// System_Aaa_Authentication_UserPathMapAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPathMapAny struct {
	*ygnmi.NodePath
}

// AuthorizedKeysListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized keys has been created.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_UserPath) AuthorizedKeysListCreatedOn() *System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPath {
	ps := &System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedKeysListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized keys has been created.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_UserPathAny) AuthorizedKeysListCreatedOn() *System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPathAny {
	ps := &System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedKeysListVersion (leaf): The version of the list of authorized keys that is currently
// associated with this system role.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_UserPath) AuthorizedKeysListVersion() *System_Aaa_Authentication_User_AuthorizedKeysListVersionPath {
	ps := &System_Aaa_Authentication_User_AuthorizedKeysListVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedKeysListVersion (leaf): The version of the list of authorized keys that is currently
// associated with this system role.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_UserPathAny) AuthorizedKeysListVersion() *System_Aaa_Authentication_User_AuthorizedKeysListVersionPathAny {
	ps := &System_Aaa_Authentication_User_AuthorizedKeysListVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedUsersListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized users has been created.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-users-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-users-list-created-on"
func (n *System_Aaa_Authentication_UserPath) AuthorizedUsersListCreatedOn() *System_Aaa_Authentication_User_AuthorizedUsersListCreatedOnPath {
	ps := &System_Aaa_Authentication_User_AuthorizedUsersListCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-users-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedUsersListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized users has been created.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-users-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-users-list-created-on"
func (n *System_Aaa_Authentication_UserPathAny) AuthorizedUsersListCreatedOn() *System_Aaa_Authentication_User_AuthorizedUsersListCreatedOnPathAny {
	ps := &System_Aaa_Authentication_User_AuthorizedUsersListCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-users-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedUsersListVersion (leaf): The version of the list of authorized users that is currently
// associated with this system role.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-users-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-users-list-version"
func (n *System_Aaa_Authentication_UserPath) AuthorizedUsersListVersion() *System_Aaa_Authentication_User_AuthorizedUsersListVersionPath {
	ps := &System_Aaa_Authentication_User_AuthorizedUsersListVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-users-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedUsersListVersion (leaf): The version of the list of authorized users that is currently
// associated with this system role.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-users-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-users-list-version"
func (n *System_Aaa_Authentication_UserPathAny) AuthorizedUsersListVersion() *System_Aaa_Authentication_User_AuthorizedUsersListVersionPathAny {
	ps := &System_Aaa_Authentication_User_AuthorizedUsersListVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-users-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Password (leaf): The user password, supplied as cleartext.  The system
// must hash the value and only store the hashed value.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/password"
//	Path from root:       "/system/aaa/authentication/users/user/*/password"
func (n *System_Aaa_Authentication_UserPath) Password() *System_Aaa_Authentication_User_PasswordPath {
	ps := &System_Aaa_Authentication_User_PasswordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Password (leaf): The user password, supplied as cleartext.  The system
// must hash the value and only store the hashed value.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/password"
//	Path from root:       "/system/aaa/authentication/users/user/*/password"
func (n *System_Aaa_Authentication_UserPathAny) Password() *System_Aaa_Authentication_User_PasswordPathAny {
	ps := &System_Aaa_Authentication_User_PasswordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordCreatedOn (leaf): The timestamp of the moment the currently used password has
// been created.
//
//	Defining module:      "gnsi-console"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-created-on"
func (n *System_Aaa_Authentication_UserPath) PasswordCreatedOn() *System_Aaa_Authentication_User_PasswordCreatedOnPath {
	ps := &System_Aaa_Authentication_User_PasswordCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordCreatedOn (leaf): The timestamp of the moment the currently used password has
// been created.
//
//	Defining module:      "gnsi-console"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-created-on"
func (n *System_Aaa_Authentication_UserPathAny) PasswordCreatedOn() *System_Aaa_Authentication_User_PasswordCreatedOnPathAny {
	ps := &System_Aaa_Authentication_User_PasswordCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordHashed (leaf): The user password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/*/password-hashed"
func (n *System_Aaa_Authentication_UserPath) PasswordHashed() *System_Aaa_Authentication_User_PasswordHashedPath {
	ps := &System_Aaa_Authentication_User_PasswordHashedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "password-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordHashed (leaf): The user password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/*/password-hashed"
func (n *System_Aaa_Authentication_UserPathAny) PasswordHashed() *System_Aaa_Authentication_User_PasswordHashedPathAny {
	ps := &System_Aaa_Authentication_User_PasswordHashedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "password-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordVersion (leaf): The version of the password that is currently used to
// authenticate this user account.
//
//	Defining module:      "gnsi-console"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-version"
func (n *System_Aaa_Authentication_UserPath) PasswordVersion() *System_Aaa_Authentication_User_PasswordVersionPath {
	ps := &System_Aaa_Authentication_User_PasswordVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordVersion (leaf): The version of the password that is currently used to
// authenticate this user account.
//
//	Defining module:      "gnsi-console"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-version"
func (n *System_Aaa_Authentication_UserPathAny) PasswordVersion() *System_Aaa_Authentication_User_PasswordVersionPathAny {
	ps := &System_Aaa_Authentication_User_PasswordVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Role (leaf): Role assigned to the user.  The role must be supplied
// as a role defined by the SYSTEM_DEFINED_ROLES
// identity or a string that matches a user defined role.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/role"
//	Path from root:       "/system/aaa/authentication/users/user/*/role"
func (n *System_Aaa_Authentication_UserPath) Role() *System_Aaa_Authentication_User_RolePath {
	ps := &System_Aaa_Authentication_User_RolePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "role"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Role (leaf): Role assigned to the user.  The role must be supplied
// as a role defined by the SYSTEM_DEFINED_ROLES
// identity or a string that matches a user defined role.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/role"
//	Path from root:       "/system/aaa/authentication/users/user/*/role"
func (n *System_Aaa_Authentication_UserPathAny) Role() *System_Aaa_Authentication_User_RolePathAny {
	ps := &System_Aaa_Authentication_User_RolePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "role"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SshKey (leaf): SSH public key for the user (RSA or DSA)
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/*/ssh-key"
func (n *System_Aaa_Authentication_UserPath) SshKey() *System_Aaa_Authentication_User_SshKeyPath {
	ps := &System_Aaa_Authentication_User_SshKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ssh-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SshKey (leaf): SSH public key for the user (RSA or DSA)
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/*/ssh-key"
func (n *System_Aaa_Authentication_UserPathAny) SshKey() *System_Aaa_Authentication_User_SshKeyPathAny {
	ps := &System_Aaa_Authentication_User_SshKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ssh-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Username (leaf): Assigned username for this user
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/username"
//	Path from root:       "/system/aaa/authentication/users/user/*/username"
func (n *System_Aaa_Authentication_UserPath) Username() *System_Aaa_Authentication_User_UsernamePath {
	ps := &System_Aaa_Authentication_User_UsernamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "username"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Username (leaf): Assigned username for this user
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/username"
//	Path from root:       "/system/aaa/authentication/users/user/*/username"
func (n *System_Aaa_Authentication_UserPathAny) Username() *System_Aaa_Authentication_User_UsernamePathAny {
	ps := &System_Aaa_Authentication_User_UsernamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "username"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication_User",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication_User",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication_User",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication_User",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_Authentication_User, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).User
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:users"},
			PostRelPath: []string{"openconfig-system:user"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_Authentication_User, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).User
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:users"},
			PostRelPath: []string{"openconfig-system:user"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_Authentication_User, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).User
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:users"},
			PostRelPath: []string{"openconfig-system:user"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_Authentication_User, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).User
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:users"},
			PostRelPath: []string{"openconfig-system:user"},
		},
	)
}

// System_Aaa_Authorization_AuthorizationMethodPath represents the /openconfig-system/system/aaa/authorization/state/authorization-method YANG schema element.
type System_Aaa_Authorization_AuthorizationMethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authorization_AuthorizationMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/state/authorization-method YANG schema element.
type System_Aaa_Authorization_AuthorizationMethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorization-method"
//	Path from root:       "/system/aaa/authorization/state/authorization-method"
func (n *System_Aaa_Authorization_AuthorizationMethodPath) State() ygnmi.SingletonQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union] {
	return ygnmi.NewSingletonQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union](
		"System_Aaa_Authorization",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorization-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authorization_AuthorizationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).AuthorizationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorization-method"
//	Path from root:       "/system/aaa/authorization/state/authorization-method"
func (n *System_Aaa_Authorization_AuthorizationMethodPathAny) State() ygnmi.WildcardQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union](
		"System_Aaa_Authorization",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorization-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authorization_AuthorizationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).AuthorizationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/authorization-method"
//	Path from root:       "/system/aaa/authorization/config/authorization-method"
func (n *System_Aaa_Authorization_AuthorizationMethodPath) Config() ygnmi.ConfigQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union] {
	return ygnmi.NewConfigQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union](
		"System_Aaa_Authorization",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authorization-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authorization_AuthorizationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).AuthorizationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/authorization-method"
//	Path from root:       "/system/aaa/authorization/config/authorization-method"
func (n *System_Aaa_Authorization_AuthorizationMethodPathAny) Config() ygnmi.WildcardQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union](
		"System_Aaa_Authorization",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authorization-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authorization_AuthorizationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).AuthorizationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_AuthorizationPath represents the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_AuthorizationPath struct {
	*ygnmi.NodePath
}

// System_Aaa_AuthorizationPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_AuthorizationPathAny struct {
	*ygnmi.NodePath
}

// AuthorizationMethod (leaf-list): Ordered list of methods for authorizing commands.  The first
// method that provides a response (positive or negative) should
// be used.  The list may contain a well-defined method such
// as the set of all TACACS or RADIUS servers, or the name of
// a defined AAA server group.  The system must validate
// that the named server group exists.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/authorization-method"
//	Path from root:       "/system/aaa/authorization/*/authorization-method"
func (n *System_Aaa_AuthorizationPath) AuthorizationMethod() *System_Aaa_Authorization_AuthorizationMethodPath {
	ps := &System_Aaa_Authorization_AuthorizationMethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authorization-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizationMethod (leaf-list): Ordered list of methods for authorizing commands.  The first
// method that provides a response (positive or negative) should
// be used.  The list may contain a well-defined method such
// as the set of all TACACS or RADIUS servers, or the name of
// a defined AAA server group.  The system must validate
// that the named server group exists.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/authorization-method"
//	Path from root:       "/system/aaa/authorization/*/authorization-method"
func (n *System_Aaa_AuthorizationPathAny) AuthorizationMethod() *System_Aaa_Authorization_AuthorizationMethodPathAny {
	ps := &System_Aaa_Authorization_AuthorizationMethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authorization-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EventAny (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
func (n *System_Aaa_AuthorizationPath) EventAny() *System_Aaa_Authorization_EventPathAny {
	ps := &System_Aaa_Authorization_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
	return ps
}

// EventAny (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
func (n *System_Aaa_AuthorizationPathAny) EventAny() *System_Aaa_Authorization_EventPathAny {
	ps := &System_Aaa_Authorization_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
	return ps
}

// Event (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
//
//	EventType: oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPath) Event(EventType oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_EventPath {
	ps := &System_Aaa_Authorization_EventPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
	return ps
}

// Event (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
//
//	EventType: oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPathAny) Event(EventType oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_EventPathAny {
	ps := &System_Aaa_Authorization_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
	return ps
}

// EventMap (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
func (n *System_Aaa_AuthorizationPath) EventMap() *System_Aaa_Authorization_EventPathMap {
	ps := &System_Aaa_Authorization_EventPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"events"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EventMap (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
func (n *System_Aaa_AuthorizationPathAny) EventMap() *System_Aaa_Authorization_EventPathMapAny {
	ps := &System_Aaa_Authorization_EventPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthorizationPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Authorization] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Authorization](
		"System_Aaa_Authorization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthorizationPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Authorization] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authorization](
		"System_Aaa_Authorization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthorizationPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Authorization] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Authorization](
		"System_Aaa_Authorization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthorizationPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Authorization] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authorization](
		"System_Aaa_Authorization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authorization_Event_EventTypePath represents the /openconfig-system/system/aaa/authorization/events/event/state/event-type YANG schema element.
type System_Aaa_Authorization_Event_EventTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authorization_Event_EventTypePathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event/state/event-type YANG schema element.
type System_Aaa_Authorization_Event_EventTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/state/event-type"
func (n *System_Aaa_Authorization_Event_EventTypePath) State() ygnmi.SingletonQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE](
		"System_Aaa_Authorization_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Authorization_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/state/event-type"
func (n *System_Aaa_Authorization_Event_EventTypePathAny) State() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE](
		"System_Aaa_Authorization_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Authorization_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/config/event-type"
func (n *System_Aaa_Authorization_Event_EventTypePath) Config() ygnmi.ConfigQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE](
		"System_Aaa_Authorization_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Authorization_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/config/event-type"
func (n *System_Aaa_Authorization_Event_EventTypePathAny) Config() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE](
		"System_Aaa_Authorization_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Authorization_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authorization_EventPath represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPath struct {
	*ygnmi.NodePath
}

// System_Aaa_Authorization_EventPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPathAny struct {
	*ygnmi.NodePath
}

// System_Aaa_Authorization_EventPathMap represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPathMap struct {
	*ygnmi.NodePath
}

// System_Aaa_Authorization_EventPathMapAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_EventPathMapAny struct {
	*ygnmi.NodePath
}

// EventType (leaf): The type of event to record at the AAA authorization
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/*/event-type"
func (n *System_Aaa_Authorization_EventPath) EventType() *System_Aaa_Authorization_Event_EventTypePath {
	ps := &System_Aaa_Authorization_Event_EventTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "event-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EventType (leaf): The type of event to record at the AAA authorization
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/*/event-type"
func (n *System_Aaa_Authorization_EventPathAny) EventType() *System_Aaa_Authorization_Event_EventTypePathAny {
	ps := &System_Aaa_Authorization_Event_EventTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "event-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization_Event",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization_Event",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization_Event",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization_Event",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathMap) State() ygnmi.SingletonQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewSingletonQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewWildcardQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathMap) Config() ygnmi.ConfigQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewConfigQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authorization_EventPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event] {
	return ygnmi.NewWildcardQuery[map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event](
		"System_Aaa_Authorization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*oc.System_Aaa_Authorization_Event, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// System_Aaa_ServerGroup_NamePath represents the /openconfig-system/system/aaa/server-groups/server-group/state/name YANG schema element.
type System_Aaa_ServerGroup_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_NamePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/state/name YANG schema element.
type System_Aaa_ServerGroup_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/aaa/server-groups/server-group/state/name"
func (n *System_Aaa_ServerGroup_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/aaa/server-groups/server-group/state/name"
func (n *System_Aaa_ServerGroup_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/name"
//	Path from root:       "/system/aaa/server-groups/server-group/config/name"
func (n *System_Aaa_ServerGroup_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/name"
//	Path from root:       "/system/aaa/server-groups/server-group/config/name"
func (n *System_Aaa_ServerGroup_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_TypePath represents the /openconfig-system/system/aaa/server-groups/server-group/state/type YANG schema element.
type System_Aaa_ServerGroup_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_TypePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/state/type YANG schema element.
type System_Aaa_ServerGroup_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type"
//	Path from root:       "/system/aaa/server-groups/server-group/state/type"
func (n *System_Aaa_ServerGroup_TypePath) State() ygnmi.SingletonQuery[oc.E_AaaTypes_AAA_SERVER_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_AaaTypes_AAA_SERVER_TYPE](
		"System_Aaa_ServerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_SERVER_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type"
//	Path from root:       "/system/aaa/server-groups/server-group/state/type"
func (n *System_Aaa_ServerGroup_TypePathAny) State() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_SERVER_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_SERVER_TYPE](
		"System_Aaa_ServerGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_SERVER_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/type"
//	Path from root:       "/system/aaa/server-groups/server-group/config/type"
func (n *System_Aaa_ServerGroup_TypePath) Config() ygnmi.ConfigQuery[oc.E_AaaTypes_AAA_SERVER_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_AaaTypes_AAA_SERVER_TYPE](
		"System_Aaa_ServerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_SERVER_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/type"
//	Path from root:       "/system/aaa/server-groups/server-group/config/type"
func (n *System_Aaa_ServerGroup_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_SERVER_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_SERVER_TYPE](
		"System_Aaa_ServerGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_SERVER_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroupPath represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPath struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroupPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPathAny struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroupPathMap represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPathMap struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroupPathMapAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroupPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Name for the server group
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/aaa/server-groups/server-group/*/name"
func (n *System_Aaa_ServerGroupPath) Name() *System_Aaa_ServerGroup_NamePath {
	ps := &System_Aaa_ServerGroup_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name for the server group
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/aaa/server-groups/server-group/*/name"
func (n *System_Aaa_ServerGroupPathAny) Name() *System_Aaa_ServerGroup_NamePathAny {
	ps := &System_Aaa_ServerGroup_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServerAny (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
func (n *System_Aaa_ServerGroupPath) ServerAny() *System_Aaa_ServerGroup_ServerPathAny {
	ps := &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// ServerAny (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
func (n *System_Aaa_ServerGroupPathAny) ServerAny() *System_Aaa_ServerGroup_ServerPathAny {
	ps := &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// Server (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
//
//	Address: string
func (n *System_Aaa_ServerGroupPath) Server(Address string) *System_Aaa_ServerGroup_ServerPath {
	ps := &System_Aaa_ServerGroup_ServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// Server (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
//
//	Address: string
func (n *System_Aaa_ServerGroupPathAny) Server(Address string) *System_Aaa_ServerGroup_ServerPathAny {
	ps := &System_Aaa_ServerGroup_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
func (n *System_Aaa_ServerGroupPath) ServerMap() *System_Aaa_ServerGroup_ServerPathMap {
	ps := &System_Aaa_ServerGroup_ServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of AAA servers
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server"
func (n *System_Aaa_ServerGroupPathAny) ServerMap() *System_Aaa_ServerGroup_ServerPathMapAny {
	ps := &System_Aaa_ServerGroup_ServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): AAA server type -- all servers in the group must be of this
// type
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/type"
//	Path from root:       "/system/aaa/server-groups/server-group/*/type"
func (n *System_Aaa_ServerGroupPath) Type() *System_Aaa_ServerGroup_TypePath {
	ps := &System_Aaa_ServerGroup_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): AAA server type -- all servers in the group must be of this
// type
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/type"
//	Path from root:       "/system/aaa/server-groups/server-group/*/type"
func (n *System_Aaa_ServerGroupPathAny) Type() *System_Aaa_ServerGroup_TypePathAny {
	ps := &System_Aaa_ServerGroup_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_ServerGroup](
		"System_Aaa_ServerGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup](
		"System_Aaa_ServerGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_ServerGroup](
		"System_Aaa_ServerGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup](
		"System_Aaa_ServerGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Aaa_ServerGroup](
		"System_Aaa",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup, bool) {
			ret := gs.(*oc.System_Aaa).ServerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:server-groups"},
			PostRelPath: []string{"openconfig-system:server-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_ServerGroup](
		"System_Aaa",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup, bool) {
			ret := gs.(*oc.System_Aaa).ServerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:server-groups"},
			PostRelPath: []string{"openconfig-system:server-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Aaa_ServerGroup](
		"System_Aaa",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup, bool) {
			ret := gs.(*oc.System_Aaa).ServerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:server-groups"},
			PostRelPath: []string{"openconfig-system:server-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroupPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_ServerGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_ServerGroup](
		"System_Aaa",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup, bool) {
			ret := gs.(*oc.System_Aaa).ServerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:server-groups"},
			PostRelPath: []string{"openconfig-system:server-group"},
		},
	)
}

// System_Aaa_ServerGroup_Server_AddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/address YANG schema element.
type System_Aaa_ServerGroup_Server_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/address YANG schema element.
type System_Aaa_ServerGroup_Server_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/address"
func (n *System_Aaa_ServerGroup_Server_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/address"
func (n *System_Aaa_ServerGroup_Server_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/address"
func (n *System_Aaa_ServerGroup_Server_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/address"
func (n *System_Aaa_ServerGroup_Server_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ConnectionAbortsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-aborts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionAbortsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-aborts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-aborts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_Server_ConnectionAbortsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-aborts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionAborts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-aborts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-aborts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionAborts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ConnectionClosesPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-closes YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionClosesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ConnectionClosesPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-closes YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionClosesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-closes"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_Server_ConnectionClosesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-closes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionCloses
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-closes"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_Server_ConnectionClosesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-closes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionCloses
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ConnectionFailuresPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-failures YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionFailuresPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-failures YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-failures"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_Server_ConnectionFailuresPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-failures"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionFailures
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-failures"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-failures"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionFailures
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ConnectionOpensPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-opens YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionOpensPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ConnectionOpensPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-opens YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionOpensPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-opens"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_Server_ConnectionOpensPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-opens"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionOpens
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-opens"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_Server_ConnectionOpensPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-opens"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionOpens
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts YANG schema element.
type System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-timeouts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-timeouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionTimeouts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-timeouts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-timeouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ConnectionTimeouts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_ErrorsReceivedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/errors-received YANG schema element.
type System_Aaa_ServerGroup_Server_ErrorsReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/errors-received YANG schema element.
type System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/errors-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_Server_ErrorsReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "errors-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ErrorsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/errors-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "errors-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).ErrorsReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_MessagesReceivedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-received YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_MessagesReceivedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-received YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_Server_MessagesReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).MessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_Server_MessagesReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "messages-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).MessagesReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_MessagesSentPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-sent YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_MessagesSentPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/messages-sent YANG schema element.
type System_Aaa_ServerGroup_Server_MessagesSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-sent"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_Server_MessagesSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "messages-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).MessagesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-sent"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_Server_MessagesSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "messages-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).MessagesSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_NamePath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/name YANG schema element.
type System_Aaa_ServerGroup_Server_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_NamePathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/name YANG schema element.
type System_Aaa_ServerGroup_Server_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/name"
func (n *System_Aaa_ServerGroup_Server_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/name"
func (n *System_Aaa_ServerGroup_Server_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/name"
func (n *System_Aaa_ServerGroup_Server_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/name"
func (n *System_Aaa_ServerGroup_Server_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_TimeoutPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/timeout YANG schema element.
type System_Aaa_ServerGroup_Server_TimeoutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state/timeout YANG schema element.
type System_Aaa_ServerGroup_Server_TimeoutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/timeout"
func (n *System_Aaa_ServerGroup_Server_TimeoutPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/timeout"
func (n *System_Aaa_ServerGroup_Server_TimeoutPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/timeout"
func (n *System_Aaa_ServerGroup_Server_TimeoutPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/config/timeout"
func (n *System_Aaa_ServerGroup_Server_TimeoutPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_ServerPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPath struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_ServerPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPathAny struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_ServerPathMap represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPathMap struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_ServerPathMapAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_ServerPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): Address of the authentication server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/address"
func (n *System_Aaa_ServerGroup_ServerPath) Address() *System_Aaa_ServerGroup_Server_AddressPath {
	ps := &System_Aaa_ServerGroup_Server_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): Address of the authentication server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/address"
func (n *System_Aaa_ServerGroup_ServerPathAny) Address() *System_Aaa_ServerGroup_Server_AddressPathAny {
	ps := &System_Aaa_ServerGroup_Server_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionAborts (leaf): Number of aborted connections to the server.  These do
// not include connections that are close gracefully.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-aborts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionAborts() *System_Aaa_ServerGroup_Server_ConnectionAbortsPath {
	ps := &System_Aaa_ServerGroup_Server_ConnectionAbortsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-aborts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionAborts (leaf): Number of aborted connections to the server.  These do
// not include connections that are close gracefully.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-aborts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-aborts"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionAborts() *System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny {
	ps := &System_Aaa_ServerGroup_Server_ConnectionAbortsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-aborts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionCloses (leaf): Number of connection close requests sent to the server, e.g.
// socket close
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-closes"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionCloses() *System_Aaa_ServerGroup_Server_ConnectionClosesPath {
	ps := &System_Aaa_ServerGroup_Server_ConnectionClosesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-closes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionCloses (leaf): Number of connection close requests sent to the server, e.g.
// socket close
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-closes"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-closes"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionCloses() *System_Aaa_ServerGroup_Server_ConnectionClosesPathAny {
	ps := &System_Aaa_ServerGroup_Server_ConnectionClosesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-closes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionFailures (leaf): Number of connection failures to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-failures"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionFailures() *System_Aaa_ServerGroup_Server_ConnectionFailuresPath {
	ps := &System_Aaa_ServerGroup_Server_ConnectionFailuresPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-failures"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionFailures (leaf): Number of connection failures to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-failures"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-failures"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionFailures() *System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny {
	ps := &System_Aaa_ServerGroup_Server_ConnectionFailuresPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-failures"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionOpens (leaf): Number of new connection requests sent to the server, e.g.
// socket open
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-opens"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionOpens() *System_Aaa_ServerGroup_Server_ConnectionOpensPath {
	ps := &System_Aaa_ServerGroup_Server_ConnectionOpensPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-opens"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionOpens (leaf): Number of new connection requests sent to the server, e.g.
// socket open
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-opens"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-opens"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionOpens() *System_Aaa_ServerGroup_Server_ConnectionOpensPathAny {
	ps := &System_Aaa_ServerGroup_Server_ConnectionOpensPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-opens"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionTimeouts (leaf): Number of connection timeouts to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-timeouts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_ServerPath) ConnectionTimeouts() *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath {
	ps := &System_Aaa_ServerGroup_Server_ConnectionTimeoutsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-timeouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionTimeouts (leaf): Number of connection timeouts to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/connection-timeouts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/connection-timeouts"
func (n *System_Aaa_ServerGroup_ServerPathAny) ConnectionTimeouts() *System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny {
	ps := &System_Aaa_ServerGroup_Server_ConnectionTimeoutsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connection-timeouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErrorsReceived (leaf): Number of error messages received from the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/errors-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_ServerPath) ErrorsReceived() *System_Aaa_ServerGroup_Server_ErrorsReceivedPath {
	ps := &System_Aaa_ServerGroup_Server_ErrorsReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "errors-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ErrorsReceived (leaf): Number of error messages received from the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/errors-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/errors-received"
func (n *System_Aaa_ServerGroup_ServerPathAny) ErrorsReceived() *System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny {
	ps := &System_Aaa_ServerGroup_Server_ErrorsReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "errors-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MessagesReceived (leaf): Number of messages received by the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_ServerPath) MessagesReceived() *System_Aaa_ServerGroup_Server_MessagesReceivedPath {
	ps := &System_Aaa_ServerGroup_Server_MessagesReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MessagesReceived (leaf): Number of messages received by the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-received"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-received"
func (n *System_Aaa_ServerGroup_ServerPathAny) MessagesReceived() *System_Aaa_ServerGroup_Server_MessagesReceivedPathAny {
	ps := &System_Aaa_ServerGroup_Server_MessagesReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "messages-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MessagesSent (leaf): Number of messages sent to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-sent"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_ServerPath) MessagesSent() *System_Aaa_ServerGroup_Server_MessagesSentPath {
	ps := &System_Aaa_ServerGroup_Server_MessagesSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "messages-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MessagesSent (leaf): Number of messages sent to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/messages-sent"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/state/messages-sent"
func (n *System_Aaa_ServerGroup_ServerPathAny) MessagesSent() *System_Aaa_ServerGroup_Server_MessagesSentPathAny {
	ps := &System_Aaa_ServerGroup_Server_MessagesSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "messages-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name assigned to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/name"
func (n *System_Aaa_ServerGroup_ServerPath) Name() *System_Aaa_ServerGroup_Server_NamePath {
	ps := &System_Aaa_ServerGroup_Server_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name assigned to the server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/name"
func (n *System_Aaa_ServerGroup_ServerPathAny) Name() *System_Aaa_ServerGroup_Server_NamePathAny {
	ps := &System_Aaa_ServerGroup_Server_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Radius (container): Top-level container for RADIUS server data
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "radius"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius"
func (n *System_Aaa_ServerGroup_ServerPath) Radius() *System_Aaa_ServerGroup_Server_RadiusPath {
	ps := &System_Aaa_ServerGroup_Server_RadiusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"radius"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Radius (container): Top-level container for RADIUS server data
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "radius"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius"
func (n *System_Aaa_ServerGroup_ServerPathAny) Radius() *System_Aaa_ServerGroup_Server_RadiusPathAny {
	ps := &System_Aaa_ServerGroup_Server_RadiusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"radius"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tacacs (container): Top-level container for TACACS+ server data
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "tacacs"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs"
func (n *System_Aaa_ServerGroup_ServerPath) Tacacs() *System_Aaa_ServerGroup_Server_TacacsPath {
	ps := &System_Aaa_ServerGroup_Server_TacacsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tacacs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tacacs (container): Top-level container for TACACS+ server data
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "tacacs"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs"
func (n *System_Aaa_ServerGroup_ServerPathAny) Tacacs() *System_Aaa_ServerGroup_Server_TacacsPathAny {
	ps := &System_Aaa_ServerGroup_Server_TacacsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tacacs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Timeout (leaf): Set the timeout in seconds on responses from the AAA
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/timeout"
func (n *System_Aaa_ServerGroup_ServerPath) Timeout() *System_Aaa_ServerGroup_Server_TimeoutPath {
	ps := &System_Aaa_ServerGroup_Server_TimeoutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): Set the timeout in seconds on responses from the AAA
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/*/timeout"
func (n *System_Aaa_ServerGroup_ServerPathAny) Timeout() *System_Aaa_ServerGroup_Server_TimeoutPathAny {
	ps := &System_Aaa_ServerGroup_Server_TimeoutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup_Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup_Server",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup_Server, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup_Server, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup_Server, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_ServerPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_ServerGroup_Server] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_ServerGroup_Server](
		"System_Aaa_ServerGroup",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_ServerGroup_Server, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// System_Aaa_ServerGroup_Server_Radius_AcctPortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AcctPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AcctPortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acct-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AcctPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/acct-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acct-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AcctPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AcctPortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "acct-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AcctPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/acct-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "acct-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AcctPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_AuthPortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AuthPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AuthPortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AuthPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/auth-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AuthPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AuthPortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AuthPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/auth-port"
func (n *System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).AuthPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit-attempts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).RetransmitAttempts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit-attempts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).RetransmitAttempts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retransmit-attempts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).RetransmitAttempts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retransmit-attempts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).RetransmitAttempts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_SourceAddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/source-address"
func (n *System_Aaa_ServerGroup_Server_Radius_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/source-address"
func (n *System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/source-address"
func (n *System_Aaa_ServerGroup_Server_Radius_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/config/source-address"
func (n *System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_RadiusPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_RadiusPath struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_Server_RadiusPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_RadiusPathAny struct {
	*ygnmi.NodePath
}

// AcctPort (leaf): Port number for accounting requests
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/acct-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) AcctPort() *System_Aaa_ServerGroup_Server_Radius_AcctPortPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_AcctPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "acct-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcctPort (leaf): Port number for accounting requests
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/acct-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/acct-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) AcctPort() *System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_AcctPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "acct-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthPort (leaf): Port number for authentication requests
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/auth-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) AuthPort() *System_Aaa_ServerGroup_Server_Radius_AuthPortPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_AuthPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthPort (leaf): Port number for authentication requests
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/auth-port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/auth-port"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) AuthPort() *System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_AuthPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): A collection of RADIUS related state objects.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) Counters() *System_Aaa_ServerGroup_Server_Radius_CountersPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of RADIUS related state objects.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) Counters() *System_Aaa_ServerGroup_Server_Radius_CountersPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RetransmitAttempts (leaf): Number of times the system may resend a request to the
// RADIUS server when it is unresponsive
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) RetransmitAttempts() *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retransmit-attempts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetransmitAttempts (leaf): Number of times the system may resend a request to the
// RADIUS server when it is unresponsive
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/retransmit-attempts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/retransmit-attempts"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) RetransmitAttempts() *System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_RetransmitAttemptsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retransmit-attempts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/secret-key"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SecretKey() *System_Aaa_ServerGroup_Server_Radius_SecretKeyPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_SecretKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/secret-key"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SecretKey() *System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_SecretKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_SecretKeyHashedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IP address to use in messages to the RADIUS server
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/source-address"
func (n *System_Aaa_ServerGroup_Server_RadiusPath) SourceAddress() *System_Aaa_ServerGroup_Server_Radius_SourceAddressPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IP address to use in messages to the RADIUS server
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/*/source-address"
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) SourceAddress() *System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_RadiusPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_ServerGroup_Server_Radius] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_ServerGroup_Server_Radius](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius](
		"System_Aaa_ServerGroup_Server_Radius",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_RadiusPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_ServerGroup_Server_Radius] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_ServerGroup_Server_Radius](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_RadiusPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius](
		"System_Aaa_ServerGroup_Server_Radius",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "retried-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"retried-access-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).RetriedAccessRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "retried-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"retried-access-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).RetriedAccessRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "timeout-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"timeout-access-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).TimeoutAccessRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "timeout-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"timeout-access-requests"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Radius_Counters).TimeoutAccessRequests
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Radius_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Radius_CountersPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_CountersPath struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_Server_Radius_CountersPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_CountersPathAny struct {
	*ygnmi.NodePath
}

// AccessAccepts (leaf): Received Access-Accept messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) AccessAccepts() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessAccepts (leaf): Received Access-Accept messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-accepts"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) AccessAccepts() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_AccessAcceptsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): Received Access-Reject messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) AccessRejects() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): Received Access-Reject messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/access-rejects"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) AccessRejects() *System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_AccessRejectsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetriedAccessRequests (leaf): Retransmitted Access-Request messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "retried-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) RetriedAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"retried-access-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetriedAccessRequests (leaf): Retransmitted Access-Request messages.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "retried-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/retried-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) RetriedAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_RetriedAccessRequestsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"retried-access-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TimeoutAccessRequests (leaf): Access-Request messages that have timed-out,
// requiring retransmission.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "timeout-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) TimeoutAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"timeout-access-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TimeoutAccessRequests (leaf): Access-Request messages that have timed-out,
// requiring retransmission.
//
//	Defining module:      "openconfig-aaa-radius"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "timeout-access-requests"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/radius/state/counters/timeout-access-requests"
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) TimeoutAccessRequests() *System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny {
	ps := &System_Aaa_ServerGroup_Server_Radius_Counters_TimeoutAccessRequestsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"timeout-access-requests"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_ServerGroup_Server_Radius_Counters] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_ServerGroup_Server_Radius_Counters](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_Radius_CountersPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius_Counters] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server_Radius_Counters](
		"System_Aaa_ServerGroup_Server_Radius_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Tacacs_PortPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/port YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_PortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Tacacs_PortPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/port YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_PortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/port"
func (n *System_Aaa_ServerGroup_Server_Tacacs_PortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/port"
func (n *System_Aaa_ServerGroup_Server_Tacacs_PortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/port"
func (n *System_Aaa_ServerGroup_Server_Tacacs_PortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/port"
func (n *System_Aaa_ServerGroup_Server_Tacacs_PortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SecretKeyHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/state/source-address"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/config/source-address"
func (n *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_ServerGroup_Server_Tacacs).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_ServerGroup_Server_Tacacs) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_ServerGroup_Server_TacacsPath represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_TacacsPath struct {
	*ygnmi.NodePath
}

// System_Aaa_ServerGroup_Server_TacacsPathAny represents the wildcard version of the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_TacacsPathAny struct {
	*ygnmi.NodePath
}

// Port (leaf): The port number on which to contact the TACACS server
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/port"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) Port() *System_Aaa_ServerGroup_Server_Tacacs_PortPath {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_PortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): The port number on which to contact the TACACS server
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/port"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) Port() *System_Aaa_ServerGroup_Server_Tacacs_PortPathAny {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_PortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/secret-key"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SecretKey() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKey (leaf): The unencrypted shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/secret-key"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SecretKey() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKeyHashed (leaf): The hashed shared key used between the authentication
// server and the device.
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/secret-key-hashed"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/secret-key-hashed"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SecretKeyHashed() *System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SecretKeyHashedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IP address to use in messages to the TACACS server
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/source-address"
func (n *System_Aaa_ServerGroup_Server_TacacsPath) SourceAddress() *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IP address to use in messages to the TACACS server
//
//	Defining module:      "openconfig-aaa-tacacs"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/aaa/server-groups/server-group/servers/server/tacacs/*/source-address"
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) SourceAddress() *System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny {
	ps := &System_Aaa_ServerGroup_Server_Tacacs_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_TacacsPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs](
		"System_Aaa_ServerGroup_Server_Tacacs",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_TacacsPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_ServerGroup_Server_TacacsPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_ServerGroup_Server_Tacacs](
		"System_Aaa_ServerGroup_Server_Tacacs",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_IdPath represents the /openconfig-system/system/alarms/alarm/state/id YANG schema element.
type System_Alarm_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_IdPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/id YANG schema element.
type System_Alarm_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/id"
//	Path from root:       "/system/alarms/alarm/state/id"
func (n *System_Alarm_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/id"
//	Path from root:       "/system/alarms/alarm/state/id"
func (n *System_Alarm_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *System_Alarm_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Alarm",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *System_Alarm_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Alarm",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_ResourcePath represents the /openconfig-system/system/alarms/alarm/state/resource YANG schema element.
type System_Alarm_ResourcePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_ResourcePathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/resource YANG schema element.
type System_Alarm_ResourcePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/resource"
//	Path from root:       "/system/alarms/alarm/state/resource"
func (n *System_Alarm_ResourcePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resource"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Resource
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/resource"
//	Path from root:       "/system/alarms/alarm/state/resource"
func (n *System_Alarm_ResourcePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resource"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Resource
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_SeverityPath represents the /openconfig-system/system/alarms/alarm/state/severity YANG schema element.
type System_Alarm_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_SeverityPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/severity YANG schema element.
type System_Alarm_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/alarms/alarm/state/severity"
func (n *System_Alarm_SeverityPath) State() ygnmi.SingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewSingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"System_Alarm",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.System_Alarm).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/alarms/alarm/state/severity"
func (n *System_Alarm_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewWildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"System_Alarm",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.System_Alarm).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_TextPath represents the /openconfig-system/system/alarms/alarm/state/text YANG schema element.
type System_Alarm_TextPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_TextPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/text YANG schema element.
type System_Alarm_TextPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/text"
//	Path from root:       "/system/alarms/alarm/state/text"
func (n *System_Alarm_TextPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "text"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Text
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/text"
//	Path from root:       "/system/alarms/alarm/state/text"
func (n *System_Alarm_TextPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "text"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Alarm).Text
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_TimeCreatedPath represents the /openconfig-system/system/alarms/alarm/state/time-created YANG schema element.
type System_Alarm_TimeCreatedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_TimeCreatedPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/time-created YANG schema element.
type System_Alarm_TimeCreatedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/time-created"
//	Path from root:       "/system/alarms/alarm/state/time-created"
func (n *System_Alarm_TimeCreatedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "time-created"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Alarm).TimeCreated
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/time-created"
//	Path from root:       "/system/alarms/alarm/state/time-created"
func (n *System_Alarm_TimeCreatedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Alarm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "time-created"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Alarm).TimeCreated
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Alarm_TypeIdPath represents the /openconfig-system/system/alarms/alarm/state/type-id YANG schema element.
type System_Alarm_TypeIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Alarm_TypeIdPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm/state/type-id YANG schema element.
type System_Alarm_TypeIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type-id"
//	Path from root:       "/system/alarms/alarm/state/type-id"
func (n *System_Alarm_TypeIdPath) State() ygnmi.SingletonQuery[oc.System_Alarm_TypeId_Union] {
	return ygnmi.NewSingletonQuery[oc.System_Alarm_TypeId_Union](
		"System_Alarm",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Alarm_TypeId_Union, bool) {
			ret := gs.(*oc.System_Alarm).TypeId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type-id"
//	Path from root:       "/system/alarms/alarm/state/type-id"
func (n *System_Alarm_TypeIdPathAny) State() ygnmi.WildcardQuery[oc.System_Alarm_TypeId_Union] {
	return ygnmi.NewWildcardQuery[oc.System_Alarm_TypeId_Union](
		"System_Alarm",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Alarm_TypeId_Union, bool) {
			ret := gs.(*oc.System_Alarm).TypeId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Alarm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_AlarmPath represents the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPath struct {
	*ygnmi.NodePath
}

// System_AlarmPathAny represents the wildcard version of the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPathAny struct {
	*ygnmi.NodePath
}

// System_AlarmPathMap represents the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPathMap struct {
	*ygnmi.NodePath
}

// System_AlarmPathMapAny represents the wildcard version of the /openconfig-system/system/alarms/alarm YANG schema element.
type System_AlarmPathMapAny struct {
	*ygnmi.NodePath
}

// Id (leaf): Unique ID for the alarm -- this will not be a
// configurable parameter on many implementations
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/id"
//	Path from root:       "/system/alarms/alarm/*/id"
func (n *System_AlarmPath) Id() *System_Alarm_IdPath {
	ps := &System_Alarm_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Unique ID for the alarm -- this will not be a
// configurable parameter on many implementations
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/id"
//	Path from root:       "/system/alarms/alarm/*/id"
func (n *System_AlarmPathAny) Id() *System_Alarm_IdPathAny {
	ps := &System_Alarm_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resource (leaf): The item that is under alarm within the device. The
// resource may be a reference to an item which is
// defined elsewhere in the model. For example, it
// may be a platform/component, interfaces/interface,
// terminal-device/logical-channels/channel, etc. In this
// case the system should match the name of the referenced
// item exactly. The referenced item could alternatively be
// the path of the item within the model.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/resource"
//	Path from root:       "/system/alarms/alarm/state/resource"
func (n *System_AlarmPath) Resource() *System_Alarm_ResourcePath {
	ps := &System_Alarm_ResourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resource"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resource (leaf): The item that is under alarm within the device. The
// resource may be a reference to an item which is
// defined elsewhere in the model. For example, it
// may be a platform/component, interfaces/interface,
// terminal-device/logical-channels/channel, etc. In this
// case the system should match the name of the referenced
// item exactly. The referenced item could alternatively be
// the path of the item within the model.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/resource"
//	Path from root:       "/system/alarms/alarm/state/resource"
func (n *System_AlarmPathAny) Resource() *System_Alarm_ResourcePathAny {
	ps := &System_Alarm_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resource"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): The severity level indicating the criticality and impact
// of the alarm
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/alarms/alarm/state/severity"
func (n *System_AlarmPath) Severity() *System_Alarm_SeverityPath {
	ps := &System_Alarm_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): The severity level indicating the criticality and impact
// of the alarm
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/alarms/alarm/state/severity"
func (n *System_AlarmPathAny) Severity() *System_Alarm_SeverityPathAny {
	ps := &System_Alarm_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Text (leaf): The string used to inform operators about the alarm. This
// MUST contain enough information for an operator to be able
// to understand the problem. If this string contains structure,
// this format should be clearly documented for programs to be
// able to parse that information
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/text"
//	Path from root:       "/system/alarms/alarm/state/text"
func (n *System_AlarmPath) Text() *System_Alarm_TextPath {
	ps := &System_Alarm_TextPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "text"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Text (leaf): The string used to inform operators about the alarm. This
// MUST contain enough information for an operator to be able
// to understand the problem. If this string contains structure,
// this format should be clearly documented for programs to be
// able to parse that information
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/text"
//	Path from root:       "/system/alarms/alarm/state/text"
func (n *System_AlarmPathAny) Text() *System_Alarm_TextPathAny {
	ps := &System_Alarm_TextPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "text"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TimeCreated (leaf): The time at which the alarm was raised by the system.
// This value is expressed relative to the Unix Epoch.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/time-created"
//	Path from root:       "/system/alarms/alarm/state/time-created"
func (n *System_AlarmPath) TimeCreated() *System_Alarm_TimeCreatedPath {
	ps := &System_Alarm_TimeCreatedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "time-created"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TimeCreated (leaf): The time at which the alarm was raised by the system.
// This value is expressed relative to the Unix Epoch.
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/time-created"
//	Path from root:       "/system/alarms/alarm/state/time-created"
func (n *System_AlarmPathAny) TimeCreated() *System_Alarm_TimeCreatedPathAny {
	ps := &System_Alarm_TimeCreatedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "time-created"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TypeId (leaf): The abbreviated name of the alarm, for example LOS,
// EQPT, or OTS. Also referred to in different systems as
// condition type, alarm identifier, or alarm mnemonic. It
// is recommended to use the OPENCONFIG_ALARM_TYPE_ID
// identities where possible and only use the string type
// when the desired identityref is not yet defined
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type-id"
//	Path from root:       "/system/alarms/alarm/state/type-id"
func (n *System_AlarmPath) TypeId() *System_Alarm_TypeIdPath {
	ps := &System_Alarm_TypeIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TypeId (leaf): The abbreviated name of the alarm, for example LOS,
// EQPT, or OTS. Also referred to in different systems as
// condition type, alarm identifier, or alarm mnemonic. It
// is recommended to use the OPENCONFIG_ALARM_TYPE_ID
// identities where possible and only use the string type
// when the desired identityref is not yet defined
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/type-id"
//	Path from root:       "/system/alarms/alarm/state/type-id"
func (n *System_AlarmPathAny) TypeId() *System_Alarm_TypeIdPathAny {
	ps := &System_Alarm_TypeIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AlarmPath) State() ygnmi.SingletonQuery[*oc.System_Alarm] {
	return ygnmi.NewSingletonQuery[*oc.System_Alarm](
		"System_Alarm",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AlarmPathAny) State() ygnmi.WildcardQuery[*oc.System_Alarm] {
	return ygnmi.NewWildcardQuery[*oc.System_Alarm](
		"System_Alarm",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AlarmPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Alarm] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Alarm](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Alarm, bool) {
			ret := gs.(*oc.System).Alarm
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:alarms"},
			PostRelPath: []string{"openconfig-system:alarm"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AlarmPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Alarm] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Alarm](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Alarm, bool) {
			ret := gs.(*oc.System).Alarm
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:alarms"},
			PostRelPath: []string{"openconfig-system:alarm"},
		},
	)
}

// System_Clock_TimezoneNamePath represents the /openconfig-system/system/clock/state/timezone-name YANG schema element.
type System_Clock_TimezoneNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Clock_TimezoneNamePathAny represents the wildcard version of the /openconfig-system/system/clock/state/timezone-name YANG schema element.
type System_Clock_TimezoneNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timezone-name"
//	Path from root:       "/system/clock/state/timezone-name"
func (n *System_Clock_TimezoneNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Clock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timezone-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Clock).TimezoneName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Clock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timezone-name"
//	Path from root:       "/system/clock/state/timezone-name"
func (n *System_Clock_TimezoneNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Clock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timezone-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Clock).TimezoneName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Clock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timezone-name"
//	Path from root:       "/system/clock/config/timezone-name"
func (n *System_Clock_TimezoneNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Clock",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timezone-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Clock).TimezoneName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Clock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timezone-name"
//	Path from root:       "/system/clock/config/timezone-name"
func (n *System_Clock_TimezoneNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Clock",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timezone-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Clock).TimezoneName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Clock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_ClockPath represents the /openconfig-system/system/clock YANG schema element.
type System_ClockPath struct {
	*ygnmi.NodePath
}

// System_ClockPathAny represents the wildcard version of the /openconfig-system/system/clock YANG schema element.
type System_ClockPathAny struct {
	*ygnmi.NodePath
}

// TimezoneName (leaf): The TZ database name to use for the system, such
// as 'Europe/Stockholm'.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timezone-name"
//	Path from root:       "/system/clock/*/timezone-name"
func (n *System_ClockPath) TimezoneName() *System_Clock_TimezoneNamePath {
	ps := &System_Clock_TimezoneNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timezone-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TimezoneName (leaf): The TZ database name to use for the system, such
// as 'Europe/Stockholm'.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timezone-name"
//	Path from root:       "/system/clock/*/timezone-name"
func (n *System_ClockPathAny) TimezoneName() *System_Clock_TimezoneNamePathAny {
	ps := &System_Clock_TimezoneNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timezone-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ClockPath) State() ygnmi.SingletonQuery[*oc.System_Clock] {
	return ygnmi.NewSingletonQuery[*oc.System_Clock](
		"System_Clock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ClockPathAny) State() ygnmi.WildcardQuery[*oc.System_Clock] {
	return ygnmi.NewWildcardQuery[*oc.System_Clock](
		"System_Clock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_ClockPath) Config() ygnmi.ConfigQuery[*oc.System_Clock] {
	return ygnmi.NewConfigQuery[*oc.System_Clock](
		"System_Clock",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_ClockPathAny) Config() ygnmi.WildcardQuery[*oc.System_Clock] {
	return ygnmi.NewWildcardQuery[*oc.System_Clock](
		"System_Clock",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_IndexPath represents the /openconfig-system/system/cpus/cpu/state/index YANG schema element.
type System_Cpu_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_IndexPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/index YANG schema element.
type System_Cpu_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/index"
//	Path from root:       "/system/cpus/cpu/state/index"
func (n *System_Cpu_IndexPath) State() ygnmi.SingletonQuery[oc.System_Cpu_Index_Union] {
	return ygnmi.NewSingletonQuery[oc.System_Cpu_Index_Union](
		"System_Cpu",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Cpu_Index_Union, bool) {
			ret := gs.(*oc.System_Cpu).Index
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/index"
//	Path from root:       "/system/cpus/cpu/state/index"
func (n *System_Cpu_IndexPathAny) State() ygnmi.WildcardQuery[oc.System_Cpu_Index_Union] {
	return ygnmi.NewWildcardQuery[oc.System_Cpu_Index_Union](
		"System_Cpu",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Cpu_Index_Union, bool) {
			ret := gs.(*oc.System_Cpu).Index
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *System_Cpu_IndexPath) Config() ygnmi.ConfigQuery[oc.System_Cpu_Index_Union] {
	return ygnmi.NewConfigQuery[oc.System_Cpu_Index_Union](
		"System_Cpu",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Cpu_Index_Union, bool) {
			ret := gs.(*oc.System_Cpu).Index
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *System_Cpu_IndexPathAny) Config() ygnmi.WildcardQuery[oc.System_Cpu_Index_Union] {
	return ygnmi.NewWildcardQuery[oc.System_Cpu_Index_Union](
		"System_Cpu",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Cpu_Index_Union, bool) {
			ret := gs.(*oc.System_Cpu).Index
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_CpuPath represents the /openconfig-system/system/cpus/cpu YANG schema element.
type System_CpuPath struct {
	*ygnmi.NodePath
}

// System_CpuPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu YANG schema element.
type System_CpuPathAny struct {
	*ygnmi.NodePath
}

// System_CpuPathMap represents the /openconfig-system/system/cpus/cpu YANG schema element.
type System_CpuPathMap struct {
	*ygnmi.NodePath
}

// System_CpuPathMapAny represents the wildcard version of the /openconfig-system/system/cpus/cpu YANG schema element.
type System_CpuPathMapAny struct {
	*ygnmi.NodePath
}

// HardwareInterrupt (container): Percentage of CPU time spent servicing hardware interrupts.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hardware-interrupt"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt"
func (n *System_CpuPath) HardwareInterrupt() *System_Cpu_HardwareInterruptPath {
	ps := &System_Cpu_HardwareInterruptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hardware-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HardwareInterrupt (container): Percentage of CPU time spent servicing hardware interrupts.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hardware-interrupt"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt"
func (n *System_CpuPathAny) HardwareInterrupt() *System_Cpu_HardwareInterruptPathAny {
	ps := &System_Cpu_HardwareInterruptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hardware-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Idle (container): Percentage of CPU time spent idle.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/idle"
//	Path from root:       "/system/cpus/cpu/state/idle"
func (n *System_CpuPath) Idle() *System_Cpu_IdlePath {
	ps := &System_Cpu_IdlePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "idle"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Idle (container): Percentage of CPU time spent idle.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/idle"
//	Path from root:       "/system/cpus/cpu/state/idle"
func (n *System_CpuPathAny) Idle() *System_Cpu_IdlePathAny {
	ps := &System_Cpu_IdlePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "idle"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Index (leaf): The CPU index for each processor core on the system.  On a
// single-core system, the index should be zero.  The ALL
// index signifies an aggregation of the CPU utilization
// statistics over all cores in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/index"
//	Path from root:       "/system/cpus/cpu/*/index"
func (n *System_CpuPath) Index() *System_Cpu_IndexPath {
	ps := &System_Cpu_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): The CPU index for each processor core on the system.  On a
// single-core system, the index should be zero.  The ALL
// index signifies an aggregation of the CPU utilization
// statistics over all cores in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/index"
//	Path from root:       "/system/cpus/cpu/*/index"
func (n *System_CpuPathAny) Index() *System_Cpu_IndexPathAny {
	ps := &System_Cpu_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Kernel (container): Percentage of CPU time spent running in kernel space.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/kernel"
//	Path from root:       "/system/cpus/cpu/state/kernel"
func (n *System_CpuPath) Kernel() *System_Cpu_KernelPath {
	ps := &System_Cpu_KernelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "kernel"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Kernel (container): Percentage of CPU time spent running in kernel space.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/kernel"
//	Path from root:       "/system/cpus/cpu/state/kernel"
func (n *System_CpuPathAny) Kernel() *System_Cpu_KernelPathAny {
	ps := &System_Cpu_KernelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "kernel"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Nice (container): Percentage of CPU time spent running low-priority (niced)
// user processes.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/nice"
//	Path from root:       "/system/cpus/cpu/state/nice"
func (n *System_CpuPath) Nice() *System_Cpu_NicePath {
	ps := &System_Cpu_NicePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nice"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Nice (container): Percentage of CPU time spent running low-priority (niced)
// user processes.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/nice"
//	Path from root:       "/system/cpus/cpu/state/nice"
func (n *System_CpuPathAny) Nice() *System_Cpu_NicePathAny {
	ps := &System_Cpu_NicePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nice"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SoftwareInterrupt (container): Percentage of CPU time spent servicing software interrupts
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/software-interrupt"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt"
func (n *System_CpuPath) SoftwareInterrupt() *System_Cpu_SoftwareInterruptPath {
	ps := &System_Cpu_SoftwareInterruptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "software-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SoftwareInterrupt (container): Percentage of CPU time spent servicing software interrupts
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/software-interrupt"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt"
func (n *System_CpuPathAny) SoftwareInterrupt() *System_Cpu_SoftwareInterruptPathAny {
	ps := &System_Cpu_SoftwareInterruptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "software-interrupt"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Total (container): Total CPU utilization.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/total"
//	Path from root:       "/system/cpus/cpu/state/total"
func (n *System_CpuPath) Total() *System_Cpu_TotalPath {
	ps := &System_Cpu_TotalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Total (container): Total CPU utilization.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/total"
//	Path from root:       "/system/cpus/cpu/state/total"
func (n *System_CpuPathAny) Total() *System_Cpu_TotalPathAny {
	ps := &System_Cpu_TotalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// User (container): Percentage of CPU time spent running in user space.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/user"
//	Path from root:       "/system/cpus/cpu/state/user"
func (n *System_CpuPath) User() *System_Cpu_UserPath {
	ps := &System_Cpu_UserPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "user"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// User (container): Percentage of CPU time spent running in user space.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/user"
//	Path from root:       "/system/cpus/cpu/state/user"
func (n *System_CpuPathAny) User() *System_Cpu_UserPathAny {
	ps := &System_Cpu_UserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "user"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Wait (container): Percentage of CPU time spent waiting for I/O.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/wait"
//	Path from root:       "/system/cpus/cpu/state/wait"
func (n *System_CpuPath) Wait() *System_Cpu_WaitPath {
	ps := &System_Cpu_WaitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "wait"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Wait (container): Percentage of CPU time spent waiting for I/O.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/wait"
//	Path from root:       "/system/cpus/cpu/state/wait"
func (n *System_CpuPathAny) Wait() *System_Cpu_WaitPathAny {
	ps := &System_Cpu_WaitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "wait"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_CpuPath) State() ygnmi.SingletonQuery[*oc.System_Cpu] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu](
		"System_Cpu",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_CpuPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu](
		"System_Cpu",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_CpuPathMap) State() ygnmi.SingletonQuery[map[oc.System_Cpu_Index_Union]*oc.System_Cpu] {
	return ygnmi.NewSingletonQuery[map[oc.System_Cpu_Index_Union]*oc.System_Cpu](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Cpu_Index_Union]*oc.System_Cpu, bool) {
			ret := gs.(*oc.System).Cpu
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:cpus"},
			PostRelPath: []string{"openconfig-system:cpu"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_CpuPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Cpu_Index_Union]*oc.System_Cpu] {
	return ygnmi.NewWildcardQuery[map[oc.System_Cpu_Index_Union]*oc.System_Cpu](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Cpu_Index_Union]*oc.System_Cpu, bool) {
			ret := gs.(*oc.System).Cpu
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:cpus"},
			PostRelPath: []string{"openconfig-system:cpu"},
		},
	)
}

// System_Cpu_HardwareInterrupt_AvgPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/avg YANG schema element.
type System_Cpu_HardwareInterrupt_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_HardwareInterrupt_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/avg YANG schema element.
type System_Cpu_HardwareInterrupt_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/avg"
func (n *System_Cpu_HardwareInterrupt_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/avg"
func (n *System_Cpu_HardwareInterrupt_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_HardwareInterrupt_InstantPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/instant YANG schema element.
type System_Cpu_HardwareInterrupt_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_HardwareInterrupt_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/instant YANG schema element.
type System_Cpu_HardwareInterrupt_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/instant"
func (n *System_Cpu_HardwareInterrupt_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/instant"
func (n *System_Cpu_HardwareInterrupt_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_HardwareInterrupt_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/interval YANG schema element.
type System_Cpu_HardwareInterrupt_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_HardwareInterrupt_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/interval YANG schema element.
type System_Cpu_HardwareInterrupt_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/interval"
func (n *System_Cpu_HardwareInterrupt_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/interval"
func (n *System_Cpu_HardwareInterrupt_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_HardwareInterrupt_MaxPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max YANG schema element.
type System_Cpu_HardwareInterrupt_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_HardwareInterrupt_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max YANG schema element.
type System_Cpu_HardwareInterrupt_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/max"
func (n *System_Cpu_HardwareInterrupt_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/max"
func (n *System_Cpu_HardwareInterrupt_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_HardwareInterrupt_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max-time YANG schema element.
type System_Cpu_HardwareInterrupt_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_HardwareInterrupt_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/max-time YANG schema element.
type System_Cpu_HardwareInterrupt_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/max-time"
func (n *System_Cpu_HardwareInterrupt_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/max-time"
func (n *System_Cpu_HardwareInterrupt_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_HardwareInterrupt_MinPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min YANG schema element.
type System_Cpu_HardwareInterrupt_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_HardwareInterrupt_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min YANG schema element.
type System_Cpu_HardwareInterrupt_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/min"
func (n *System_Cpu_HardwareInterrupt_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/min"
func (n *System_Cpu_HardwareInterrupt_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_HardwareInterrupt_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min-time YANG schema element.
type System_Cpu_HardwareInterrupt_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_HardwareInterrupt_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt/min-time YANG schema element.
type System_Cpu_HardwareInterrupt_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/min-time"
func (n *System_Cpu_HardwareInterrupt_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/min-time"
func (n *System_Cpu_HardwareInterrupt_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_HardwareInterrupt).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_HardwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_HardwareInterruptPath represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type System_Cpu_HardwareInterruptPath struct {
	*ygnmi.NodePath
}

// System_Cpu_HardwareInterruptPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type System_Cpu_HardwareInterruptPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/avg"
func (n *System_Cpu_HardwareInterruptPath) Avg() *System_Cpu_HardwareInterrupt_AvgPath {
	ps := &System_Cpu_HardwareInterrupt_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/avg"
func (n *System_Cpu_HardwareInterruptPathAny) Avg() *System_Cpu_HardwareInterrupt_AvgPathAny {
	ps := &System_Cpu_HardwareInterrupt_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/instant"
func (n *System_Cpu_HardwareInterruptPath) Instant() *System_Cpu_HardwareInterrupt_InstantPath {
	ps := &System_Cpu_HardwareInterrupt_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/instant"
func (n *System_Cpu_HardwareInterruptPathAny) Instant() *System_Cpu_HardwareInterrupt_InstantPathAny {
	ps := &System_Cpu_HardwareInterrupt_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/interval"
func (n *System_Cpu_HardwareInterruptPath) Interval() *System_Cpu_HardwareInterrupt_IntervalPath {
	ps := &System_Cpu_HardwareInterrupt_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/interval"
func (n *System_Cpu_HardwareInterruptPathAny) Interval() *System_Cpu_HardwareInterrupt_IntervalPathAny {
	ps := &System_Cpu_HardwareInterrupt_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/max"
func (n *System_Cpu_HardwareInterruptPath) Max() *System_Cpu_HardwareInterrupt_MaxPath {
	ps := &System_Cpu_HardwareInterrupt_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/max"
func (n *System_Cpu_HardwareInterruptPathAny) Max() *System_Cpu_HardwareInterrupt_MaxPathAny {
	ps := &System_Cpu_HardwareInterrupt_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/hardware-interrupt/max-time"
func (n *System_Cpu_HardwareInterruptPath) MaxTime() *System_Cpu_HardwareInterrupt_MaxTimePath {
	ps := &System_Cpu_HardwareInterrupt_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/hardware-interrupt/max-time"
func (n *System_Cpu_HardwareInterruptPathAny) MaxTime() *System_Cpu_HardwareInterrupt_MaxTimePathAny {
	ps := &System_Cpu_HardwareInterrupt_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/min"
func (n *System_Cpu_HardwareInterruptPath) Min() *System_Cpu_HardwareInterrupt_MinPath {
	ps := &System_Cpu_HardwareInterrupt_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/hardware-interrupt/min"
func (n *System_Cpu_HardwareInterruptPathAny) Min() *System_Cpu_HardwareInterrupt_MinPathAny {
	ps := &System_Cpu_HardwareInterrupt_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/hardware-interrupt/min-time"
func (n *System_Cpu_HardwareInterruptPath) MinTime() *System_Cpu_HardwareInterrupt_MinTimePath {
	ps := &System_Cpu_HardwareInterrupt_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/hardware-interrupt/min-time"
func (n *System_Cpu_HardwareInterruptPathAny) MinTime() *System_Cpu_HardwareInterrupt_MinTimePathAny {
	ps := &System_Cpu_HardwareInterrupt_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_HardwareInterruptPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_HardwareInterrupt] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_HardwareInterrupt](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_HardwareInterruptPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_HardwareInterrupt] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_HardwareInterrupt](
		"System_Cpu_HardwareInterrupt",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Idle_AvgPath represents the /openconfig-system/system/cpus/cpu/state/idle/avg YANG schema element.
type System_Cpu_Idle_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Idle_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/avg YANG schema element.
type System_Cpu_Idle_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/idle/avg"
func (n *System_Cpu_Idle_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Idle).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/idle/avg"
func (n *System_Cpu_Idle_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Idle).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Idle_InstantPath represents the /openconfig-system/system/cpus/cpu/state/idle/instant YANG schema element.
type System_Cpu_Idle_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Idle_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/instant YANG schema element.
type System_Cpu_Idle_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/idle/instant"
func (n *System_Cpu_Idle_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Idle).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/idle/instant"
func (n *System_Cpu_Idle_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Idle).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Idle_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/idle/interval YANG schema element.
type System_Cpu_Idle_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Idle_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/interval YANG schema element.
type System_Cpu_Idle_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/idle/interval"
func (n *System_Cpu_Idle_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Idle).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/idle/interval"
func (n *System_Cpu_Idle_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Idle).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Idle_MaxPath represents the /openconfig-system/system/cpus/cpu/state/idle/max YANG schema element.
type System_Cpu_Idle_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Idle_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/max YANG schema element.
type System_Cpu_Idle_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/idle/max"
func (n *System_Cpu_Idle_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Idle).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/idle/max"
func (n *System_Cpu_Idle_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Idle).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Idle_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/idle/max-time YANG schema element.
type System_Cpu_Idle_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Idle_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/max-time YANG schema element.
type System_Cpu_Idle_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/idle/max-time"
func (n *System_Cpu_Idle_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Idle).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/idle/max-time"
func (n *System_Cpu_Idle_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Idle).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Idle_MinPath represents the /openconfig-system/system/cpus/cpu/state/idle/min YANG schema element.
type System_Cpu_Idle_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Idle_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/min YANG schema element.
type System_Cpu_Idle_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/idle/min"
func (n *System_Cpu_Idle_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Idle).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/idle/min"
func (n *System_Cpu_Idle_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Idle).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Idle_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/idle/min-time YANG schema element.
type System_Cpu_Idle_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Idle_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle/min-time YANG schema element.
type System_Cpu_Idle_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/idle/min-time"
func (n *System_Cpu_Idle_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Idle).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/idle/min-time"
func (n *System_Cpu_Idle_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Idle",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Idle).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Idle) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_IdlePath represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type System_Cpu_IdlePath struct {
	*ygnmi.NodePath
}

// System_Cpu_IdlePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type System_Cpu_IdlePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/idle/avg"
func (n *System_Cpu_IdlePath) Avg() *System_Cpu_Idle_AvgPath {
	ps := &System_Cpu_Idle_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/idle/avg"
func (n *System_Cpu_IdlePathAny) Avg() *System_Cpu_Idle_AvgPathAny {
	ps := &System_Cpu_Idle_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/idle/instant"
func (n *System_Cpu_IdlePath) Instant() *System_Cpu_Idle_InstantPath {
	ps := &System_Cpu_Idle_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/idle/instant"
func (n *System_Cpu_IdlePathAny) Instant() *System_Cpu_Idle_InstantPathAny {
	ps := &System_Cpu_Idle_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/idle/interval"
func (n *System_Cpu_IdlePath) Interval() *System_Cpu_Idle_IntervalPath {
	ps := &System_Cpu_Idle_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/idle/interval"
func (n *System_Cpu_IdlePathAny) Interval() *System_Cpu_Idle_IntervalPathAny {
	ps := &System_Cpu_Idle_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/idle/max"
func (n *System_Cpu_IdlePath) Max() *System_Cpu_Idle_MaxPath {
	ps := &System_Cpu_Idle_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/idle/max"
func (n *System_Cpu_IdlePathAny) Max() *System_Cpu_Idle_MaxPathAny {
	ps := &System_Cpu_Idle_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/idle/max-time"
func (n *System_Cpu_IdlePath) MaxTime() *System_Cpu_Idle_MaxTimePath {
	ps := &System_Cpu_Idle_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/idle/max-time"
func (n *System_Cpu_IdlePathAny) MaxTime() *System_Cpu_Idle_MaxTimePathAny {
	ps := &System_Cpu_Idle_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/idle/min"
func (n *System_Cpu_IdlePath) Min() *System_Cpu_Idle_MinPath {
	ps := &System_Cpu_Idle_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/idle/min"
func (n *System_Cpu_IdlePathAny) Min() *System_Cpu_Idle_MinPathAny {
	ps := &System_Cpu_Idle_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/idle/min-time"
func (n *System_Cpu_IdlePath) MinTime() *System_Cpu_Idle_MinTimePath {
	ps := &System_Cpu_Idle_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/idle/min-time"
func (n *System_Cpu_IdlePathAny) MinTime() *System_Cpu_Idle_MinTimePathAny {
	ps := &System_Cpu_Idle_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_IdlePath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Idle] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Idle](
		"System_Cpu_Idle",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_IdlePathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Idle] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Idle](
		"System_Cpu_Idle",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Kernel_AvgPath represents the /openconfig-system/system/cpus/cpu/state/kernel/avg YANG schema element.
type System_Cpu_Kernel_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Kernel_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/avg YANG schema element.
type System_Cpu_Kernel_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/kernel/avg"
func (n *System_Cpu_Kernel_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/kernel/avg"
func (n *System_Cpu_Kernel_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Kernel_InstantPath represents the /openconfig-system/system/cpus/cpu/state/kernel/instant YANG schema element.
type System_Cpu_Kernel_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Kernel_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/instant YANG schema element.
type System_Cpu_Kernel_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/kernel/instant"
func (n *System_Cpu_Kernel_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/kernel/instant"
func (n *System_Cpu_Kernel_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Kernel_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/kernel/interval YANG schema element.
type System_Cpu_Kernel_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Kernel_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/interval YANG schema element.
type System_Cpu_Kernel_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/kernel/interval"
func (n *System_Cpu_Kernel_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/kernel/interval"
func (n *System_Cpu_Kernel_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Kernel_MaxPath represents the /openconfig-system/system/cpus/cpu/state/kernel/max YANG schema element.
type System_Cpu_Kernel_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Kernel_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/max YANG schema element.
type System_Cpu_Kernel_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/kernel/max"
func (n *System_Cpu_Kernel_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/kernel/max"
func (n *System_Cpu_Kernel_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Kernel_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/kernel/max-time YANG schema element.
type System_Cpu_Kernel_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Kernel_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/max-time YANG schema element.
type System_Cpu_Kernel_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/kernel/max-time"
func (n *System_Cpu_Kernel_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/kernel/max-time"
func (n *System_Cpu_Kernel_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Kernel_MinPath represents the /openconfig-system/system/cpus/cpu/state/kernel/min YANG schema element.
type System_Cpu_Kernel_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Kernel_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/min YANG schema element.
type System_Cpu_Kernel_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_Kernel_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_Kernel_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Kernel_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/kernel/min-time YANG schema element.
type System_Cpu_Kernel_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Kernel_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel/min-time YANG schema element.
type System_Cpu_Kernel_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_Kernel_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_Kernel_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Kernel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Kernel).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Kernel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_KernelPath represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_KernelPath struct {
	*ygnmi.NodePath
}

// System_Cpu_KernelPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_KernelPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/kernel/avg"
func (n *System_Cpu_KernelPath) Avg() *System_Cpu_Kernel_AvgPath {
	ps := &System_Cpu_Kernel_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/kernel/avg"
func (n *System_Cpu_KernelPathAny) Avg() *System_Cpu_Kernel_AvgPathAny {
	ps := &System_Cpu_Kernel_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/kernel/instant"
func (n *System_Cpu_KernelPath) Instant() *System_Cpu_Kernel_InstantPath {
	ps := &System_Cpu_Kernel_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/kernel/instant"
func (n *System_Cpu_KernelPathAny) Instant() *System_Cpu_Kernel_InstantPathAny {
	ps := &System_Cpu_Kernel_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/kernel/interval"
func (n *System_Cpu_KernelPath) Interval() *System_Cpu_Kernel_IntervalPath {
	ps := &System_Cpu_Kernel_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/kernel/interval"
func (n *System_Cpu_KernelPathAny) Interval() *System_Cpu_Kernel_IntervalPathAny {
	ps := &System_Cpu_Kernel_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/kernel/max"
func (n *System_Cpu_KernelPath) Max() *System_Cpu_Kernel_MaxPath {
	ps := &System_Cpu_Kernel_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/kernel/max"
func (n *System_Cpu_KernelPathAny) Max() *System_Cpu_Kernel_MaxPathAny {
	ps := &System_Cpu_Kernel_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/kernel/max-time"
func (n *System_Cpu_KernelPath) MaxTime() *System_Cpu_Kernel_MaxTimePath {
	ps := &System_Cpu_Kernel_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/kernel/max-time"
func (n *System_Cpu_KernelPathAny) MaxTime() *System_Cpu_Kernel_MaxTimePathAny {
	ps := &System_Cpu_Kernel_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_KernelPath) Min() *System_Cpu_Kernel_MinPath {
	ps := &System_Cpu_Kernel_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/kernel/min"
func (n *System_Cpu_KernelPathAny) Min() *System_Cpu_Kernel_MinPathAny {
	ps := &System_Cpu_Kernel_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_KernelPath) MinTime() *System_Cpu_Kernel_MinTimePath {
	ps := &System_Cpu_Kernel_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/kernel/min-time"
func (n *System_Cpu_KernelPathAny) MinTime() *System_Cpu_Kernel_MinTimePathAny {
	ps := &System_Cpu_Kernel_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_KernelPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Kernel] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Kernel](
		"System_Cpu_Kernel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_KernelPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Kernel] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Kernel](
		"System_Cpu_Kernel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_AvgPath represents the /openconfig-system/system/cpus/cpu/state/nice/avg YANG schema element.
type System_Cpu_Nice_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/avg YANG schema element.
type System_Cpu_Nice_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_Nice_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_Nice_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_InstantPath represents the /openconfig-system/system/cpus/cpu/state/nice/instant YANG schema element.
type System_Cpu_Nice_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/instant YANG schema element.
type System_Cpu_Nice_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_Nice_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_Nice_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/nice/interval YANG schema element.
type System_Cpu_Nice_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/interval YANG schema element.
type System_Cpu_Nice_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_Nice_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_Nice_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_MaxPath represents the /openconfig-system/system/cpus/cpu/state/nice/max YANG schema element.
type System_Cpu_Nice_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/max YANG schema element.
type System_Cpu_Nice_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_Nice_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_Nice_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/nice/max-time YANG schema element.
type System_Cpu_Nice_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/max-time YANG schema element.
type System_Cpu_Nice_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_Nice_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_Nice_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_MinPath represents the /openconfig-system/system/cpus/cpu/state/nice/min YANG schema element.
type System_Cpu_Nice_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/min YANG schema element.
type System_Cpu_Nice_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_Nice_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_Nice_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Nice).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Nice_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/nice/min-time YANG schema element.
type System_Cpu_Nice_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Nice_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice/min-time YANG schema element.
type System_Cpu_Nice_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_Nice_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_Nice_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Nice",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Nice).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Nice) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_NicePath represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_NicePath struct {
	*ygnmi.NodePath
}

// System_Cpu_NicePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_NicePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_NicePath) Avg() *System_Cpu_Nice_AvgPath {
	ps := &System_Cpu_Nice_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/nice/avg"
func (n *System_Cpu_NicePathAny) Avg() *System_Cpu_Nice_AvgPathAny {
	ps := &System_Cpu_Nice_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_NicePath) Instant() *System_Cpu_Nice_InstantPath {
	ps := &System_Cpu_Nice_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/nice/instant"
func (n *System_Cpu_NicePathAny) Instant() *System_Cpu_Nice_InstantPathAny {
	ps := &System_Cpu_Nice_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_NicePath) Interval() *System_Cpu_Nice_IntervalPath {
	ps := &System_Cpu_Nice_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/nice/interval"
func (n *System_Cpu_NicePathAny) Interval() *System_Cpu_Nice_IntervalPathAny {
	ps := &System_Cpu_Nice_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_NicePath) Max() *System_Cpu_Nice_MaxPath {
	ps := &System_Cpu_Nice_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/nice/max"
func (n *System_Cpu_NicePathAny) Max() *System_Cpu_Nice_MaxPathAny {
	ps := &System_Cpu_Nice_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_NicePath) MaxTime() *System_Cpu_Nice_MaxTimePath {
	ps := &System_Cpu_Nice_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/nice/max-time"
func (n *System_Cpu_NicePathAny) MaxTime() *System_Cpu_Nice_MaxTimePathAny {
	ps := &System_Cpu_Nice_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_NicePath) Min() *System_Cpu_Nice_MinPath {
	ps := &System_Cpu_Nice_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/nice/min"
func (n *System_Cpu_NicePathAny) Min() *System_Cpu_Nice_MinPathAny {
	ps := &System_Cpu_Nice_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_NicePath) MinTime() *System_Cpu_Nice_MinTimePath {
	ps := &System_Cpu_Nice_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/nice/min-time"
func (n *System_Cpu_NicePathAny) MinTime() *System_Cpu_Nice_MinTimePathAny {
	ps := &System_Cpu_Nice_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_NicePath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Nice] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Nice](
		"System_Cpu_Nice",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_NicePathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Nice] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Nice](
		"System_Cpu_Nice",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_AvgPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/avg YANG schema element.
type System_Cpu_SoftwareInterrupt_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/avg YANG schema element.
type System_Cpu_SoftwareInterrupt_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterrupt_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterrupt_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_InstantPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/instant YANG schema element.
type System_Cpu_SoftwareInterrupt_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/instant YANG schema element.
type System_Cpu_SoftwareInterrupt_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterrupt_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterrupt_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/interval YANG schema element.
type System_Cpu_SoftwareInterrupt_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/interval YANG schema element.
type System_Cpu_SoftwareInterrupt_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterrupt_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterrupt_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MaxPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/max YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/max YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterrupt_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterrupt_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/max-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/max-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterrupt_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterrupt_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MinPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/min YANG schema element.
type System_Cpu_SoftwareInterrupt_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/min YANG schema element.
type System_Cpu_SoftwareInterrupt_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterrupt_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterrupt_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/min-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/min-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterrupt_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterrupt_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterruptPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterruptPath struct {
	*ygnmi.NodePath
}

// System_Cpu_SoftwareInterruptPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterruptPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterruptPath) Avg() *System_Cpu_SoftwareInterrupt_AvgPath {
	ps := &System_Cpu_SoftwareInterrupt_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterruptPathAny) Avg() *System_Cpu_SoftwareInterrupt_AvgPathAny {
	ps := &System_Cpu_SoftwareInterrupt_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterruptPath) Instant() *System_Cpu_SoftwareInterrupt_InstantPath {
	ps := &System_Cpu_SoftwareInterrupt_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterruptPathAny) Instant() *System_Cpu_SoftwareInterrupt_InstantPathAny {
	ps := &System_Cpu_SoftwareInterrupt_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterruptPath) Interval() *System_Cpu_SoftwareInterrupt_IntervalPath {
	ps := &System_Cpu_SoftwareInterrupt_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterruptPathAny) Interval() *System_Cpu_SoftwareInterrupt_IntervalPathAny {
	ps := &System_Cpu_SoftwareInterrupt_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterruptPath) Max() *System_Cpu_SoftwareInterrupt_MaxPath {
	ps := &System_Cpu_SoftwareInterrupt_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterruptPathAny) Max() *System_Cpu_SoftwareInterrupt_MaxPathAny {
	ps := &System_Cpu_SoftwareInterrupt_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterruptPath) MaxTime() *System_Cpu_SoftwareInterrupt_MaxTimePath {
	ps := &System_Cpu_SoftwareInterrupt_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterruptPathAny) MaxTime() *System_Cpu_SoftwareInterrupt_MaxTimePathAny {
	ps := &System_Cpu_SoftwareInterrupt_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterruptPath) Min() *System_Cpu_SoftwareInterrupt_MinPath {
	ps := &System_Cpu_SoftwareInterrupt_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterruptPathAny) Min() *System_Cpu_SoftwareInterrupt_MinPathAny {
	ps := &System_Cpu_SoftwareInterrupt_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterruptPath) MinTime() *System_Cpu_SoftwareInterrupt_MinTimePath {
	ps := &System_Cpu_SoftwareInterrupt_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterruptPathAny) MinTime() *System_Cpu_SoftwareInterrupt_MinTimePathAny {
	ps := &System_Cpu_SoftwareInterrupt_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_SoftwareInterruptPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_SoftwareInterrupt] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_SoftwareInterrupt](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_SoftwareInterruptPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_SoftwareInterrupt] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_SoftwareInterrupt](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_AvgPath represents the /openconfig-system/system/cpus/cpu/state/total/avg YANG schema element.
type System_Cpu_Total_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/avg YANG schema element.
type System_Cpu_Total_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_Total_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_Total_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_InstantPath represents the /openconfig-system/system/cpus/cpu/state/total/instant YANG schema element.
type System_Cpu_Total_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/instant YANG schema element.
type System_Cpu_Total_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_Total_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_Total_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/total/interval YANG schema element.
type System_Cpu_Total_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/interval YANG schema element.
type System_Cpu_Total_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_Total_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_Total_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MaxPath represents the /openconfig-system/system/cpus/cpu/state/total/max YANG schema element.
type System_Cpu_Total_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/max YANG schema element.
type System_Cpu_Total_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_Total_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_Total_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/total/max-time YANG schema element.
type System_Cpu_Total_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/max-time YANG schema element.
type System_Cpu_Total_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_Total_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_Total_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MinPath represents the /openconfig-system/system/cpus/cpu/state/total/min YANG schema element.
type System_Cpu_Total_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/min YANG schema element.
type System_Cpu_Total_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_Total_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_Total_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/total/min-time YANG schema element.
type System_Cpu_Total_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/min-time YANG schema element.
type System_Cpu_Total_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_Total_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_Total_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_TotalPath represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_TotalPath struct {
	*ygnmi.NodePath
}

// System_Cpu_TotalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_TotalPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_TotalPath) Avg() *System_Cpu_Total_AvgPath {
	ps := &System_Cpu_Total_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_TotalPathAny) Avg() *System_Cpu_Total_AvgPathAny {
	ps := &System_Cpu_Total_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_TotalPath) Instant() *System_Cpu_Total_InstantPath {
	ps := &System_Cpu_Total_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_TotalPathAny) Instant() *System_Cpu_Total_InstantPathAny {
	ps := &System_Cpu_Total_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_TotalPath) Interval() *System_Cpu_Total_IntervalPath {
	ps := &System_Cpu_Total_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_TotalPathAny) Interval() *System_Cpu_Total_IntervalPathAny {
	ps := &System_Cpu_Total_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_TotalPath) Max() *System_Cpu_Total_MaxPath {
	ps := &System_Cpu_Total_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_TotalPathAny) Max() *System_Cpu_Total_MaxPathAny {
	ps := &System_Cpu_Total_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_TotalPath) MaxTime() *System_Cpu_Total_MaxTimePath {
	ps := &System_Cpu_Total_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_TotalPathAny) MaxTime() *System_Cpu_Total_MaxTimePathAny {
	ps := &System_Cpu_Total_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_TotalPath) Min() *System_Cpu_Total_MinPath {
	ps := &System_Cpu_Total_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_TotalPathAny) Min() *System_Cpu_Total_MinPathAny {
	ps := &System_Cpu_Total_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_TotalPath) MinTime() *System_Cpu_Total_MinTimePath {
	ps := &System_Cpu_Total_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_TotalPathAny) MinTime() *System_Cpu_Total_MinTimePathAny {
	ps := &System_Cpu_Total_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_TotalPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Total] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Total](
		"System_Cpu_Total",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_TotalPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Total] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Total](
		"System_Cpu_Total",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_AvgPath represents the /openconfig-system/system/cpus/cpu/state/user/avg YANG schema element.
type System_Cpu_User_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/avg YANG schema element.
type System_Cpu_User_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_User_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_User_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_InstantPath represents the /openconfig-system/system/cpus/cpu/state/user/instant YANG schema element.
type System_Cpu_User_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/instant YANG schema element.
type System_Cpu_User_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_User_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_User_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/user/interval YANG schema element.
type System_Cpu_User_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/interval YANG schema element.
type System_Cpu_User_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_User_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_User_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_MaxPath represents the /openconfig-system/system/cpus/cpu/state/user/max YANG schema element.
type System_Cpu_User_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/max YANG schema element.
type System_Cpu_User_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_User_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_User_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/user/max-time YANG schema element.
type System_Cpu_User_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/max-time YANG schema element.
type System_Cpu_User_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_User_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_User_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_MinPath represents the /openconfig-system/system/cpus/cpu/state/user/min YANG schema element.
type System_Cpu_User_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/min YANG schema element.
type System_Cpu_User_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_User_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_User_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/user/min-time YANG schema element.
type System_Cpu_User_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/min-time YANG schema element.
type System_Cpu_User_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_User_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_User_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_UserPath represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_UserPath struct {
	*ygnmi.NodePath
}

// System_Cpu_UserPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_UserPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_UserPath) Avg() *System_Cpu_User_AvgPath {
	ps := &System_Cpu_User_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_UserPathAny) Avg() *System_Cpu_User_AvgPathAny {
	ps := &System_Cpu_User_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_UserPath) Instant() *System_Cpu_User_InstantPath {
	ps := &System_Cpu_User_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_UserPathAny) Instant() *System_Cpu_User_InstantPathAny {
	ps := &System_Cpu_User_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_UserPath) Interval() *System_Cpu_User_IntervalPath {
	ps := &System_Cpu_User_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_UserPathAny) Interval() *System_Cpu_User_IntervalPathAny {
	ps := &System_Cpu_User_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_UserPath) Max() *System_Cpu_User_MaxPath {
	ps := &System_Cpu_User_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_UserPathAny) Max() *System_Cpu_User_MaxPathAny {
	ps := &System_Cpu_User_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_UserPath) MaxTime() *System_Cpu_User_MaxTimePath {
	ps := &System_Cpu_User_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_UserPathAny) MaxTime() *System_Cpu_User_MaxTimePathAny {
	ps := &System_Cpu_User_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_UserPath) Min() *System_Cpu_User_MinPath {
	ps := &System_Cpu_User_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_UserPathAny) Min() *System_Cpu_User_MinPathAny {
	ps := &System_Cpu_User_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_UserPath) MinTime() *System_Cpu_User_MinTimePath {
	ps := &System_Cpu_User_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_UserPathAny) MinTime() *System_Cpu_User_MinTimePathAny {
	ps := &System_Cpu_User_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_UserPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_User] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_User](
		"System_Cpu_User",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_UserPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_User] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_User](
		"System_Cpu_User",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_AvgPath represents the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_Wait_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_Wait_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_InstantPath represents the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_Wait_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_Wait_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_Wait_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_Wait_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MaxPath represents the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_Wait_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_Wait_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_Wait_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_Wait_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MinPath represents the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_Wait_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_Wait_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_Wait_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_Wait_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_WaitPath represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPath struct {
	*ygnmi.NodePath
}

// System_Cpu_WaitPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPath) Avg() *System_Cpu_Wait_AvgPath {
	ps := &System_Cpu_Wait_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPathAny) Avg() *System_Cpu_Wait_AvgPathAny {
	ps := &System_Cpu_Wait_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPath) Instant() *System_Cpu_Wait_InstantPath {
	ps := &System_Cpu_Wait_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPathAny) Instant() *System_Cpu_Wait_InstantPathAny {
	ps := &System_Cpu_Wait_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPath) Interval() *System_Cpu_Wait_IntervalPath {
	ps := &System_Cpu_Wait_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPathAny) Interval() *System_Cpu_Wait_IntervalPathAny {
	ps := &System_Cpu_Wait_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPath) Max() *System_Cpu_Wait_MaxPath {
	ps := &System_Cpu_Wait_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPathAny) Max() *System_Cpu_Wait_MaxPathAny {
	ps := &System_Cpu_Wait_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPath) MaxTime() *System_Cpu_Wait_MaxTimePath {
	ps := &System_Cpu_Wait_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPathAny) MaxTime() *System_Cpu_Wait_MaxTimePathAny {
	ps := &System_Cpu_Wait_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPath) Min() *System_Cpu_Wait_MinPath {
	ps := &System_Cpu_Wait_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPathAny) Min() *System_Cpu_Wait_MinPathAny {
	ps := &System_Cpu_Wait_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPath) MinTime() *System_Cpu_Wait_MinTimePath {
	ps := &System_Cpu_Wait_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPathAny) MinTime() *System_Cpu_Wait_MinTimePathAny {
	ps := &System_Cpu_Wait_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_WaitPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Wait] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Wait](
		"System_Cpu_Wait",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_WaitPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Wait] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Wait](
		"System_Cpu_Wait",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_SearchPath represents the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_SearchPathAny represents the wildcard version of the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/search"
//	Path from root:       "/system/dns/state/search"
func (n *System_Dns_SearchPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/search"
//	Path from root:       "/system/dns/state/search"
func (n *System_Dns_SearchPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/search"
//	Path from root:       "/system/dns/config/search"
func (n *System_Dns_SearchPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/search"
//	Path from root:       "/system/dns/config/search"
func (n *System_Dns_SearchPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_DnsPath represents the /openconfig-system/system/dns YANG schema element.
type System_DnsPath struct {
	*ygnmi.NodePath
}

// System_DnsPathAny represents the wildcard version of the /openconfig-system/system/dns YANG schema element.
type System_DnsPathAny struct {
	*ygnmi.NodePath
}

// HostEntryAny (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPath) HostEntryAny() *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
	return ps
}

// HostEntryAny (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPathAny) HostEntryAny() *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
	return ps
}

// HostEntry (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
//
//	Hostname: string
func (n *System_DnsPath) HostEntry(Hostname string) *System_Dns_HostEntryPath {
	ps := &System_Dns_HostEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
	return ps
}

// HostEntry (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
//
//	Hostname: string
func (n *System_DnsPathAny) HostEntry(Hostname string) *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
	return ps
}

// HostEntryMap (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPath) HostEntryMap() *System_Dns_HostEntryPathMap {
	ps := &System_Dns_HostEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostEntryMap (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPathAny) HostEntryMap() *System_Dns_HostEntryPathMapAny {
	ps := &System_Dns_HostEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/search"
//	Path from root:       "/system/dns/*/search"
func (n *System_DnsPath) Search() *System_Dns_SearchPath {
	ps := &System_Dns_SearchPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "search"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/search"
//	Path from root:       "/system/dns/*/search"
func (n *System_DnsPathAny) Search() *System_Dns_SearchPathAny {
	ps := &System_Dns_SearchPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "search"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServerMap (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/dns/servers/server"
func (n *System_DnsPath) ServerMap() *System_Dns_ServerPathMap {
	ps := &System_Dns_ServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/dns/servers/server"
func (n *System_DnsPathAny) ServerMap() *System_Dns_ServerPathMapAny {
	ps := &System_Dns_ServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_DnsPath) State() ygnmi.SingletonQuery[*oc.System_Dns] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_DnsPathAny) State() ygnmi.WildcardQuery[*oc.System_Dns] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_DnsPath) Config() ygnmi.ConfigQuery[*oc.System_Dns] {
	return ygnmi.NewConfigQuery[*oc.System_Dns](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_DnsPathAny) Config() ygnmi.WildcardQuery[*oc.System_Dns] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_AliasPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_AliasPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntry_AliasPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntry_AliasPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntry_AliasPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntry_AliasPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_HostnamePath represents the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_HostnamePathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntry_HostnamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntry_HostnamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntry_HostnamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntry_HostnamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_Ipv4AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_Ipv4AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_Ipv6AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_Ipv6AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntryPath represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPath struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathAny struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathMap represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathMap struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathMapAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathMapAny struct {
	*ygnmi.NodePath
}

// Alias (leaf-list): Additional aliases for the hostname
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/*/alias"
func (n *System_Dns_HostEntryPath) Alias() *System_Dns_HostEntry_AliasPath {
	ps := &System_Dns_HostEntry_AliasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "alias"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Alias (leaf-list): Additional aliases for the hostname
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/*/alias"
func (n *System_Dns_HostEntryPathAny) Alias() *System_Dns_HostEntry_AliasPathAny {
	ps := &System_Dns_HostEntry_AliasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "alias"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Hostname (leaf): Hostname for the static DNS entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/*/hostname"
func (n *System_Dns_HostEntryPath) Hostname() *System_Dns_HostEntry_HostnamePath {
	ps := &System_Dns_HostEntry_HostnamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Hostname (leaf): Hostname for the static DNS entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/*/hostname"
func (n *System_Dns_HostEntryPathAny) Hostname() *System_Dns_HostEntry_HostnamePathAny {
	ps := &System_Dns_HostEntry_HostnamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv4-address"
func (n *System_Dns_HostEntryPath) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPath {
	ps := &System_Dns_HostEntry_Ipv4AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv4-address"
func (n *System_Dns_HostEntryPathAny) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPathAny {
	ps := &System_Dns_HostEntry_Ipv4AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv6-address"
func (n *System_Dns_HostEntryPath) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPath {
	ps := &System_Dns_HostEntry_Ipv6AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv6-address"
func (n *System_Dns_HostEntryPathAny) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPathAny {
	ps := &System_Dns_HostEntry_Ipv6AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPath) State() ygnmi.SingletonQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathAny) State() ygnmi.WildcardQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPath) Config() ygnmi.ConfigQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewConfigQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathAny) Config() ygnmi.WildcardQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// System_Dns_ServerPath represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPath struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathAny struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathMap represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathMap struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathMapAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMap) State() ygnmi.SingletonQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMapAny) State() ygnmi.WildcardQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMap) Config() ygnmi.ConfigQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewConfigQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMapAny) Config() ygnmi.WildcardQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// System_GnmiPathzPoliciesPath represents the /openconfig-system/system/gnmi-pathz-policies YANG schema element.
type System_GnmiPathzPoliciesPath struct {
	*ygnmi.NodePath
}

// System_GnmiPathzPoliciesPathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies YANG schema element.
type System_GnmiPathzPoliciesPathAny struct {
	*ygnmi.NodePath
}

// PolicyAny (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `id`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPath) PolicyAny() *System_GnmiPathzPolicies_PolicyPathAny {
	ps := &System_GnmiPathzPolicies_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// PolicyAny (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `id`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPathAny) PolicyAny() *System_GnmiPathzPolicies_PolicyPathAny {
	ps := &System_GnmiPathzPolicies_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Policy (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `id`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
//
//	Id: string
func (n *System_GnmiPathzPoliciesPath) Policy(Id string) *System_GnmiPathzPolicies_PolicyPath {
	ps := &System_GnmiPathzPolicies_PolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Policy (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `id`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
//
//	Id: string
func (n *System_GnmiPathzPoliciesPathAny) Policy(Id string) *System_GnmiPathzPolicies_PolicyPathAny {
	ps := &System_GnmiPathzPolicies_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// PolicyMap (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `id`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPath) PolicyMap() *System_GnmiPathzPolicies_PolicyPathMap {
	ps := &System_GnmiPathzPolicies_PolicyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyMap (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `id`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPathAny) PolicyMap() *System_GnmiPathzPolicies_PolicyPathMapAny {
	ps := &System_GnmiPathzPolicies_PolicyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPoliciesPath) State() ygnmi.SingletonQuery[*oc.System_GnmiPathzPolicies] {
	return ygnmi.NewSingletonQuery[*oc.System_GnmiPathzPolicies](
		"System_GnmiPathzPolicies",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPoliciesPathAny) State() ygnmi.WildcardQuery[*oc.System_GnmiPathzPolicies] {
	return ygnmi.NewWildcardQuery[*oc.System_GnmiPathzPolicies](
		"System_GnmiPathzPolicies",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GnmiPathzPolicies_Policy_CreatedOnPath represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/created-on YANG schema element.
type System_GnmiPathzPolicies_Policy_CreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GnmiPathzPolicies_Policy_CreatedOnPathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/created-on YANG schema element.
type System_GnmiPathzPolicies_Policy_CreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/created-on"
func (n *System_GnmiPathzPolicies_Policy_CreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).CreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/created-on"
func (n *System_GnmiPathzPolicies_Policy_CreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).CreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GnmiPathzPolicies_Policy_IdPath represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/id YANG schema element.
type System_GnmiPathzPolicies_Policy_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GnmiPathzPolicies_Policy_IdPathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/id YANG schema element.
type System_GnmiPathzPolicies_Policy_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/id"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/id"
func (n *System_GnmiPathzPolicies_Policy_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/id"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/id"
func (n *System_GnmiPathzPolicies_Policy_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *System_GnmiPathzPolicies_Policy_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GnmiPathzPolicies_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *System_GnmiPathzPolicies_Policy_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GnmiPathzPolicies_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GnmiPathzPolicies_Policy_VersionPath represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/version YANG schema element.
type System_GnmiPathzPolicies_Policy_VersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GnmiPathzPolicies_Policy_VersionPathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/version YANG schema element.
type System_GnmiPathzPolicies_Policy_VersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/version"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/version"
func (n *System_GnmiPathzPolicies_Policy_VersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Version
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/version"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/version"
func (n *System_GnmiPathzPolicies_Policy_VersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Version
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GnmiPathzPolicies_PolicyPath represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy YANG schema element.
type System_GnmiPathzPolicies_PolicyPath struct {
	*ygnmi.NodePath
}

// System_GnmiPathzPolicies_PolicyPathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy YANG schema element.
type System_GnmiPathzPolicies_PolicyPathAny struct {
	*ygnmi.NodePath
}

// System_GnmiPathzPolicies_PolicyPathMap represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy YANG schema element.
type System_GnmiPathzPolicies_PolicyPathMap struct {
	*ygnmi.NodePath
}

// System_GnmiPathzPolicies_PolicyPathMapAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy YANG schema element.
type System_GnmiPathzPolicies_PolicyPathMapAny struct {
	*ygnmi.NodePath
}

// CreatedOn (leaf): The timestamp of the moment when the policy was
// created.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/created-on"
func (n *System_GnmiPathzPolicies_PolicyPath) CreatedOn() *System_GnmiPathzPolicies_Policy_CreatedOnPath {
	ps := &System_GnmiPathzPolicies_Policy_CreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CreatedOn (leaf): The timestamp of the moment when the policy was
// created.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/created-on"
func (n *System_GnmiPathzPolicies_PolicyPathAny) CreatedOn() *System_GnmiPathzPolicies_Policy_CreatedOnPathAny {
	ps := &System_GnmiPathzPolicies_Policy_CreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): The ID of the gNMI OpenConfig-path-based authorization
// policy.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/id"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/*/id"
func (n *System_GnmiPathzPolicies_PolicyPath) Id() *System_GnmiPathzPolicies_Policy_IdPath {
	ps := &System_GnmiPathzPolicies_Policy_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): The ID of the gNMI OpenConfig-path-based authorization
// policy.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/id"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/*/id"
func (n *System_GnmiPathzPolicies_PolicyPathAny) Id() *System_GnmiPathzPolicies_Policy_IdPathAny {
	ps := &System_GnmiPathzPolicies_Policy_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): The version of the gNMI OpenConfig-path-based authorization
// policy.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/version"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/version"
func (n *System_GnmiPathzPolicies_PolicyPath) Version() *System_GnmiPathzPolicies_Policy_VersionPath {
	ps := &System_GnmiPathzPolicies_Policy_VersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): The version of the gNMI OpenConfig-path-based authorization
// policy.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/version"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/version"
func (n *System_GnmiPathzPolicies_PolicyPathAny) Version() *System_GnmiPathzPolicies_Policy_VersionPathAny {
	ps := &System_GnmiPathzPolicies_Policy_VersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPolicies_PolicyPath) State() ygnmi.SingletonQuery[*oc.System_GnmiPathzPolicies_Policy] {
	return ygnmi.NewSingletonQuery[*oc.System_GnmiPathzPolicies_Policy](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPolicies_PolicyPathAny) State() ygnmi.WildcardQuery[*oc.System_GnmiPathzPolicies_Policy] {
	return ygnmi.NewWildcardQuery[*oc.System_GnmiPathzPolicies_Policy](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPolicies_PolicyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_GnmiPathzPolicies_Policy] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_GnmiPathzPolicies_Policy](
		"System_GnmiPathzPolicies",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GnmiPathzPolicies_Policy, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"gnsi-pathz:policies"},
			PostRelPath: []string{"gnsi-pathz:policy"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPolicies_PolicyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_GnmiPathzPolicies_Policy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_GnmiPathzPolicies_Policy](
		"System_GnmiPathzPolicies",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GnmiPathzPolicies_Policy, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"gnsi-pathz:policies"},
			PostRelPath: []string{"gnsi-pathz:policy"},
		},
	)
}

// System_GrpcCredentialsPath represents the /openconfig-system/system/grpc-credentials YANG schema element.
type System_GrpcCredentialsPath struct {
	*ygnmi.NodePath
}

// System_GrpcCredentialsPathAny represents the wildcard version of the /openconfig-system/system/grpc-credentials YANG schema element.
type System_GrpcCredentialsPathAny struct {
	*ygnmi.NodePath
}

// EntityAny (list): Information about the credential entity that is identified
// by the `id`.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "entities/entity"
//	Path from root:       "/system/grpc-credentials/entities/entity"
func (n *System_GrpcCredentialsPath) EntityAny() *System_GrpcCredentials_EntityPathAny {
	ps := &System_GrpcCredentials_EntityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entities", "entity"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// EntityAny (list): Information about the credential entity that is identified
// by the `id`.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "entities/entity"
//	Path from root:       "/system/grpc-credentials/entities/entity"
func (n *System_GrpcCredentialsPathAny) EntityAny() *System_GrpcCredentials_EntityPathAny {
	ps := &System_GrpcCredentials_EntityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entities", "entity"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Entity (list): Information about the credential entity that is identified
// by the `id`.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "entities/entity"
//	Path from root:       "/system/grpc-credentials/entities/entity"
//
//	Id: string
func (n *System_GrpcCredentialsPath) Entity(Id string) *System_GrpcCredentials_EntityPath {
	ps := &System_GrpcCredentials_EntityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"entities", "entity"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Entity (list): Information about the credential entity that is identified
// by the `id`.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "entities/entity"
//	Path from root:       "/system/grpc-credentials/entities/entity"
//
//	Id: string
func (n *System_GrpcCredentialsPathAny) Entity(Id string) *System_GrpcCredentials_EntityPathAny {
	ps := &System_GrpcCredentials_EntityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entities", "entity"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// EntityMap (list): Information about the credential entity that is identified
// by the `id`.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "entities/entity"
//	Path from root:       "/system/grpc-credentials/entities/entity"
func (n *System_GrpcCredentialsPath) EntityMap() *System_GrpcCredentials_EntityPathMap {
	ps := &System_GrpcCredentials_EntityPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"entities"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EntityMap (list): Information about the credential entity that is identified
// by the `id`.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "entities/entity"
//	Path from root:       "/system/grpc-credentials/entities/entity"
func (n *System_GrpcCredentialsPathAny) EntityMap() *System_GrpcCredentials_EntityPathMapAny {
	ps := &System_GrpcCredentials_EntityPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entities"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcCredentialsPath) State() ygnmi.SingletonQuery[*oc.System_GrpcCredentials] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcCredentials](
		"System_GrpcCredentials",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcCredentialsPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcCredentials] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcCredentials](
		"System_GrpcCredentials",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcCredentials_Entity_CreatedOnPath represents the /openconfig-system/system/grpc-credentials/entities/entity/state/created-on YANG schema element.
type System_GrpcCredentials_Entity_CreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcCredentials_Entity_CreatedOnPathAny represents the wildcard version of the /openconfig-system/system/grpc-credentials/entities/entity/state/created-on YANG schema element.
type System_GrpcCredentials_Entity_CreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/created-on"
func (n *System_GrpcCredentials_Entity_CreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcCredentials_Entity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcCredentials_Entity).CreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials_Entity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/created-on"
func (n *System_GrpcCredentials_Entity_CreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcCredentials_Entity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcCredentials_Entity).CreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials_Entity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcCredentials_Entity_IdPath represents the /openconfig-system/system/grpc-credentials/entities/entity/state/id YANG schema element.
type System_GrpcCredentials_Entity_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcCredentials_Entity_IdPathAny represents the wildcard version of the /openconfig-system/system/grpc-credentials/entities/entity/state/id YANG schema element.
type System_GrpcCredentials_Entity_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/id"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/id"
func (n *System_GrpcCredentials_Entity_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcCredentials_Entity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcCredentials_Entity).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials_Entity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/id"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/id"
func (n *System_GrpcCredentials_Entity_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcCredentials_Entity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcCredentials_Entity).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials_Entity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *System_GrpcCredentials_Entity_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcCredentials_Entity",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcCredentials_Entity).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials_Entity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *System_GrpcCredentials_Entity_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcCredentials_Entity",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcCredentials_Entity).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials_Entity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcCredentials_Entity_KindPath represents the /openconfig-system/system/grpc-credentials/entities/entity/state/kind YANG schema element.
type System_GrpcCredentials_Entity_KindPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcCredentials_Entity_KindPathAny represents the wildcard version of the /openconfig-system/system/grpc-credentials/entities/entity/state/kind YANG schema element.
type System_GrpcCredentials_Entity_KindPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/kind"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/kind"
func (n *System_GrpcCredentials_Entity_KindPath) State() ygnmi.SingletonQuery[oc.E_GnsiCert_GrpcCredentialEntityKind] {
	return ygnmi.NewSingletonQuery[oc.E_GnsiCert_GrpcCredentialEntityKind](
		"System_GrpcCredentials_Entity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "kind"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_GnsiCert_GrpcCredentialEntityKind, bool) {
			ret := gs.(*oc.System_GrpcCredentials_Entity).Kind
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials_Entity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/kind"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/kind"
func (n *System_GrpcCredentials_Entity_KindPathAny) State() ygnmi.WildcardQuery[oc.E_GnsiCert_GrpcCredentialEntityKind] {
	return ygnmi.NewWildcardQuery[oc.E_GnsiCert_GrpcCredentialEntityKind](
		"System_GrpcCredentials_Entity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "kind"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_GnsiCert_GrpcCredentialEntityKind, bool) {
			ret := gs.(*oc.System_GrpcCredentials_Entity).Kind
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials_Entity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcCredentials_Entity_VersionPath represents the /openconfig-system/system/grpc-credentials/entities/entity/state/version YANG schema element.
type System_GrpcCredentials_Entity_VersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcCredentials_Entity_VersionPathAny represents the wildcard version of the /openconfig-system/system/grpc-credentials/entities/entity/state/version YANG schema element.
type System_GrpcCredentials_Entity_VersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/version"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/version"
func (n *System_GrpcCredentials_Entity_VersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcCredentials_Entity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcCredentials_Entity).Version
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials_Entity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/version"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/version"
func (n *System_GrpcCredentials_Entity_VersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcCredentials_Entity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcCredentials_Entity).Version
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials_Entity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcCredentials_EntityPath represents the /openconfig-system/system/grpc-credentials/entities/entity YANG schema element.
type System_GrpcCredentials_EntityPath struct {
	*ygnmi.NodePath
}

// System_GrpcCredentials_EntityPathAny represents the wildcard version of the /openconfig-system/system/grpc-credentials/entities/entity YANG schema element.
type System_GrpcCredentials_EntityPathAny struct {
	*ygnmi.NodePath
}

// System_GrpcCredentials_EntityPathMap represents the /openconfig-system/system/grpc-credentials/entities/entity YANG schema element.
type System_GrpcCredentials_EntityPathMap struct {
	*ygnmi.NodePath
}

// System_GrpcCredentials_EntityPathMapAny represents the wildcard version of the /openconfig-system/system/grpc-credentials/entities/entity YANG schema element.
type System_GrpcCredentials_EntityPathMapAny struct {
	*ygnmi.NodePath
}

// CreatedOn (leaf): The timestamp of the moment when the credential entity was
// created.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/created-on"
func (n *System_GrpcCredentials_EntityPath) CreatedOn() *System_GrpcCredentials_Entity_CreatedOnPath {
	ps := &System_GrpcCredentials_Entity_CreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CreatedOn (leaf): The timestamp of the moment when the credential entity was
// created.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/created-on"
func (n *System_GrpcCredentials_EntityPathAny) CreatedOn() *System_GrpcCredentials_Entity_CreatedOnPathAny {
	ps := &System_GrpcCredentials_Entity_CreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): The ID of the credential entity.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/id"
//	Path from root:       "/system/grpc-credentials/entities/entity/*/id"
func (n *System_GrpcCredentials_EntityPath) Id() *System_GrpcCredentials_Entity_IdPath {
	ps := &System_GrpcCredentials_Entity_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): The ID of the credential entity.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/id"
//	Path from root:       "/system/grpc-credentials/entities/entity/*/id"
func (n *System_GrpcCredentials_EntityPathAny) Id() *System_GrpcCredentials_Entity_IdPathAny {
	ps := &System_GrpcCredentials_Entity_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Kind (leaf): The type of the credential entity (certificate, CA trust bundle
// or Certificate Revocation List bundle).
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/kind"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/kind"
func (n *System_GrpcCredentials_EntityPath) Kind() *System_GrpcCredentials_Entity_KindPath {
	ps := &System_GrpcCredentials_Entity_KindPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "kind"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Kind (leaf): The type of the credential entity (certificate, CA trust bundle
// or Certificate Revocation List bundle).
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/kind"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/kind"
func (n *System_GrpcCredentials_EntityPathAny) Kind() *System_GrpcCredentials_Entity_KindPathAny {
	ps := &System_GrpcCredentials_Entity_KindPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "kind"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): The version of the credential entity.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/version"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/version"
func (n *System_GrpcCredentials_EntityPath) Version() *System_GrpcCredentials_Entity_VersionPath {
	ps := &System_GrpcCredentials_Entity_VersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): The version of the credential entity.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/version"
//	Path from root:       "/system/grpc-credentials/entities/entity/state/version"
func (n *System_GrpcCredentials_EntityPathAny) Version() *System_GrpcCredentials_Entity_VersionPathAny {
	ps := &System_GrpcCredentials_Entity_VersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcCredentials_EntityPath) State() ygnmi.SingletonQuery[*oc.System_GrpcCredentials_Entity] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcCredentials_Entity](
		"System_GrpcCredentials_Entity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcCredentials_EntityPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcCredentials_Entity] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcCredentials_Entity](
		"System_GrpcCredentials_Entity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcCredentials_EntityPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_GrpcCredentials_Entity] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_GrpcCredentials_Entity](
		"System_GrpcCredentials",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcCredentials_Entity, bool) {
			ret := gs.(*oc.System_GrpcCredentials).Entity
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"gnsi-cert:entities"},
			PostRelPath: []string{"gnsi-cert:entity"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcCredentials_EntityPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_GrpcCredentials_Entity] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_GrpcCredentials_Entity](
		"System_GrpcCredentials",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcCredentials_Entity, bool) {
			ret := gs.(*oc.System_GrpcCredentials).Entity
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcCredentials) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"gnsi-cert:entities"},
			PostRelPath: []string{"gnsi-cert:entity"},
		},
	)
}

// System_GrpcServer_AuthzPolicyCreatedOnPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/authz-policy-created-on YANG schema element.
type System_GrpcServer_AuthzPolicyCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_AuthzPolicyCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/authz-policy-created-on YANG schema element.
type System_GrpcServer_AuthzPolicyCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-authz"
//	Instantiating module: "gnsi-authz"
//	Path from parent:     "state/authz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authz-policy-created-on"
func (n *System_GrpcServer_AuthzPolicyCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authz-policy-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).AuthzPolicyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-authz"
//	Instantiating module: "gnsi-authz"
//	Path from parent:     "state/authz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authz-policy-created-on"
func (n *System_GrpcServer_AuthzPolicyCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authz-policy-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).AuthzPolicyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_AuthzPolicyVersionPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/authz-policy-version YANG schema element.
type System_GrpcServer_AuthzPolicyVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_AuthzPolicyVersionPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/authz-policy-version YANG schema element.
type System_GrpcServer_AuthzPolicyVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-authz"
//	Instantiating module: "gnsi-authz"
//	Path from parent:     "state/authz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authz-policy-version"
func (n *System_GrpcServer_AuthzPolicyVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authz-policy-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).AuthzPolicyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-authz"
//	Instantiating module: "gnsi-authz"
//	Path from parent:     "state/authz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authz-policy-version"
func (n *System_GrpcServer_AuthzPolicyVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authz-policy-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).AuthzPolicyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CaTrustBundleCreatedOnPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on YANG schema element.
type System_GrpcServer_CaTrustBundleCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CaTrustBundleCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on YANG schema element.
type System_GrpcServer_CaTrustBundleCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/ca-trust-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on"
func (n *System_GrpcServer_CaTrustBundleCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/ca-trust-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on"
func (n *System_GrpcServer_CaTrustBundleCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CaTrustBundleIdPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/ca-trust-bundle-id YANG schema element.
type System_GrpcServer_CaTrustBundleIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CaTrustBundleIdPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/ca-trust-bundle-id YANG schema element.
type System_GrpcServer_CaTrustBundleIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/ca-trust-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-id"
func (n *System_GrpcServer_CaTrustBundleIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/ca-trust-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-id"
func (n *System_GrpcServer_CaTrustBundleIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "config/ca-trust-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/config/ca-trust-bundle-id"
func (n *System_GrpcServer_CaTrustBundleIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ca-trust-bundle-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "config/ca-trust-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/config/ca-trust-bundle-id"
func (n *System_GrpcServer_CaTrustBundleIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ca-trust-bundle-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CaTrustBundleVersionPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/ca-trust-bundle-version YANG schema element.
type System_GrpcServer_CaTrustBundleVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CaTrustBundleVersionPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/ca-trust-bundle-version YANG schema element.
type System_GrpcServer_CaTrustBundleVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/ca-trust-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-version"
func (n *System_GrpcServer_CaTrustBundleVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/ca-trust-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-version"
func (n *System_GrpcServer_CaTrustBundleVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CaTrustBundleVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CertificateCreatedOnPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-created-on YANG schema element.
type System_GrpcServer_CertificateCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CertificateCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-created-on YANG schema element.
type System_GrpcServer_CertificateCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/certificate-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-created-on"
func (n *System_GrpcServer_CertificateCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/certificate-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-created-on"
func (n *System_GrpcServer_CertificateCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CertificateIdPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-id YANG schema element.
type System_GrpcServer_CertificateIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CertificateIdPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-id YANG schema element.
type System_GrpcServer_CertificateIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-id"
func (n *System_GrpcServer_CertificateIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-id"
func (n *System_GrpcServer_CertificateIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/config/certificate-id"
func (n *System_GrpcServer_CertificateIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "certificate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/config/certificate-id"
func (n *System_GrpcServer_CertificateIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "certificate-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CertificateRevocationListBundleCreatedOnPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on YANG schema element.
type System_GrpcServer_CertificateRevocationListBundleCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CertificateRevocationListBundleCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on YANG schema element.
type System_GrpcServer_CertificateRevocationListBundleCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/certificate-revocation-list-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on"
func (n *System_GrpcServer_CertificateRevocationListBundleCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/certificate-revocation-list-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on"
func (n *System_GrpcServer_CertificateRevocationListBundleCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CertificateRevocationListBundleIdPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-id YANG schema element.
type System_GrpcServer_CertificateRevocationListBundleIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CertificateRevocationListBundleIdPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-id YANG schema element.
type System_GrpcServer_CertificateRevocationListBundleIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/certificate-revocation-list-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-id"
func (n *System_GrpcServer_CertificateRevocationListBundleIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/certificate-revocation-list-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-id"
func (n *System_GrpcServer_CertificateRevocationListBundleIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "config/certificate-revocation-list-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/config/certificate-revocation-list-bundle-id"
func (n *System_GrpcServer_CertificateRevocationListBundleIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "certificate-revocation-list-bundle-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "config/certificate-revocation-list-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/config/certificate-revocation-list-bundle-id"
func (n *System_GrpcServer_CertificateRevocationListBundleIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "certificate-revocation-list-bundle-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CertificateRevocationListBundleVersionPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version YANG schema element.
type System_GrpcServer_CertificateRevocationListBundleVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CertificateRevocationListBundleVersionPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version YANG schema element.
type System_GrpcServer_CertificateRevocationListBundleVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/certificate-revocation-list-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version"
func (n *System_GrpcServer_CertificateRevocationListBundleVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/certificate-revocation-list-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version"
func (n *System_GrpcServer_CertificateRevocationListBundleVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateRevocationListBundleVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CertificateVersionPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-version YANG schema element.
type System_GrpcServer_CertificateVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_CertificateVersionPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/certificate-version YANG schema element.
type System_GrpcServer_CertificateVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/certificate-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-version"
func (n *System_GrpcServer_CertificateVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "gnsi-cert"
//	Path from parent:     "state/certificate-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-version"
func (n *System_GrpcServer_CertificateVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "certificate-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).CertificateVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_EnablePath represents the /openconfig-system/system/grpc-servers/grpc-server/state/enable YANG schema element.
type System_GrpcServer_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/enable YANG schema element.
type System_GrpcServer_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/state/enable"
func (n *System_GrpcServer_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/state/enable"
func (n *System_GrpcServer_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/config/enable"
func (n *System_GrpcServer_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/config/enable"
func (n *System_GrpcServer_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCreatedOnPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/gnmi-pathz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on"
func (n *System_GrpcServer_GnmiPathzPolicyCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/gnmi-pathz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on"
func (n *System_GrpcServer_GnmiPathzPolicyCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyIdPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-id YANG schema element.
type System_GrpcServer_GnmiPathzPolicyIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyIdPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-id YANG schema element.
type System_GrpcServer_GnmiPathzPolicyIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/gnmi-pathz-policy-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-id"
func (n *System_GrpcServer_GnmiPathzPolicyIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/gnmi-pathz-policy-id"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-id"
func (n *System_GrpcServer_GnmiPathzPolicyIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "config/gnmi-pathz-policy-id"
//	Path from root:       "/system/grpc-servers/grpc-server/config/gnmi-pathz-policy-id"
func (n *System_GrpcServer_GnmiPathzPolicyIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "gnmi-pathz-policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "config/gnmi-pathz-policy-id"
//	Path from root:       "/system/grpc-servers/grpc-server/config/gnmi-pathz-policy-id"
func (n *System_GrpcServer_GnmiPathzPolicyIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "gnmi-pathz-policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyVersionPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version YANG schema element.
type System_GrpcServer_GnmiPathzPolicyVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyVersionPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version YANG schema element.
type System_GrpcServer_GnmiPathzPolicyVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/gnmi-pathz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version"
func (n *System_GrpcServer_GnmiPathzPolicyVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/gnmi-pathz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version"
func (n *System_GrpcServer_GnmiPathzPolicyVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).GnmiPathzPolicyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_ListenAddressesPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/listen-addresses YANG schema element.
type System_GrpcServer_ListenAddressesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_ListenAddressesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/listen-addresses YANG schema element.
type System_GrpcServer_ListenAddressesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/state/listen-addresses"
func (n *System_GrpcServer_ListenAddressesPath) State() ygnmi.SingletonQuery[[]oc.System_GrpcServer_ListenAddresses_Union] {
	return ygnmi.NewSingletonQuery[[]oc.System_GrpcServer_ListenAddresses_Union](
		"System_GrpcServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "listen-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_GrpcServer_ListenAddresses_Union, bool) {
			ret := gs.(*oc.System_GrpcServer).ListenAddresses
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/state/listen-addresses"
func (n *System_GrpcServer_ListenAddressesPathAny) State() ygnmi.WildcardQuery[[]oc.System_GrpcServer_ListenAddresses_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_GrpcServer_ListenAddresses_Union](
		"System_GrpcServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "listen-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_GrpcServer_ListenAddresses_Union, bool) {
			ret := gs.(*oc.System_GrpcServer).ListenAddresses
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/config/listen-addresses"
func (n *System_GrpcServer_ListenAddressesPath) Config() ygnmi.ConfigQuery[[]oc.System_GrpcServer_ListenAddresses_Union] {
	return ygnmi.NewConfigQuery[[]oc.System_GrpcServer_ListenAddresses_Union](
		"System_GrpcServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "listen-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_GrpcServer_ListenAddresses_Union, bool) {
			ret := gs.(*oc.System_GrpcServer).ListenAddresses
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/config/listen-addresses"
func (n *System_GrpcServer_ListenAddressesPathAny) Config() ygnmi.WildcardQuery[[]oc.System_GrpcServer_ListenAddresses_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_GrpcServer_ListenAddresses_Union](
		"System_GrpcServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "listen-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_GrpcServer_ListenAddresses_Union, bool) {
			ret := gs.(*oc.System_GrpcServer).ListenAddresses
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_MetadataAuthenticationPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/metadata-authentication YANG schema element.
type System_GrpcServer_MetadataAuthenticationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_MetadataAuthenticationPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/metadata-authentication YANG schema element.
type System_GrpcServer_MetadataAuthenticationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/state/metadata-authentication"
func (n *System_GrpcServer_MetadataAuthenticationPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metadata-authentication"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).MetadataAuthentication
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/state/metadata-authentication"
func (n *System_GrpcServer_MetadataAuthenticationPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metadata-authentication"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).MetadataAuthentication
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/config/metadata-authentication"
func (n *System_GrpcServer_MetadataAuthenticationPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metadata-authentication"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).MetadataAuthentication
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/config/metadata-authentication"
func (n *System_GrpcServer_MetadataAuthenticationPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metadata-authentication"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).MetadataAuthentication
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_NamePath represents the /openconfig-system/system/grpc-servers/grpc-server/state/name YANG schema element.
type System_GrpcServer_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_NamePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/name YANG schema element.
type System_GrpcServer_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/name"
//	Path from root:       "/system/grpc-servers/grpc-server/state/name"
func (n *System_GrpcServer_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/name"
//	Path from root:       "/system/grpc-servers/grpc-server/state/name"
func (n *System_GrpcServer_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/name"
//	Path from root:       "/system/grpc-servers/grpc-server/config/name"
func (n *System_GrpcServer_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/name"
//	Path from root:       "/system/grpc-servers/grpc-server/config/name"
func (n *System_GrpcServer_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_NetworkInstancePath represents the /openconfig-system/system/grpc-servers/grpc-server/state/network-instance YANG schema element.
type System_GrpcServer_NetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/network-instance YANG schema element.
type System_GrpcServer_NetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/state/network-instance"
func (n *System_GrpcServer_NetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/state/network-instance"
func (n *System_GrpcServer_NetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/config/network-instance"
func (n *System_GrpcServer_NetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/config/network-instance"
func (n *System_GrpcServer_NetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_PortPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/port YANG schema element.
type System_GrpcServer_PortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_PortPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/port YANG schema element.
type System_GrpcServer_PortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/port"
//	Path from root:       "/system/grpc-servers/grpc-server/state/port"
func (n *System_GrpcServer_PortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/port"
//	Path from root:       "/system/grpc-servers/grpc-server/state/port"
func (n *System_GrpcServer_PortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/port"
//	Path from root:       "/system/grpc-servers/grpc-server/config/port"
func (n *System_GrpcServer_PortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/port"
//	Path from root:       "/system/grpc-servers/grpc-server/config/port"
func (n *System_GrpcServer_PortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_GrpcServer).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_ServicesPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/services YANG schema element.
type System_GrpcServer_ServicesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_ServicesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/services YANG schema element.
type System_GrpcServer_ServicesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/services"
//	Path from root:       "/system/grpc-servers/grpc-server/state/services"
func (n *System_GrpcServer_ServicesPath) State() ygnmi.SingletonQuery[[]oc.E_SystemGrpc_GRPC_SERVICE] {
	return ygnmi.NewSingletonQuery[[]oc.E_SystemGrpc_GRPC_SERVICE](
		"System_GrpcServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "services"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SystemGrpc_GRPC_SERVICE, bool) {
			ret := gs.(*oc.System_GrpcServer).Services
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/services"
//	Path from root:       "/system/grpc-servers/grpc-server/state/services"
func (n *System_GrpcServer_ServicesPathAny) State() ygnmi.WildcardQuery[[]oc.E_SystemGrpc_GRPC_SERVICE] {
	return ygnmi.NewWildcardQuery[[]oc.E_SystemGrpc_GRPC_SERVICE](
		"System_GrpcServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "services"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SystemGrpc_GRPC_SERVICE, bool) {
			ret := gs.(*oc.System_GrpcServer).Services
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/services"
//	Path from root:       "/system/grpc-servers/grpc-server/config/services"
func (n *System_GrpcServer_ServicesPath) Config() ygnmi.ConfigQuery[[]oc.E_SystemGrpc_GRPC_SERVICE] {
	return ygnmi.NewConfigQuery[[]oc.E_SystemGrpc_GRPC_SERVICE](
		"System_GrpcServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "services"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SystemGrpc_GRPC_SERVICE, bool) {
			ret := gs.(*oc.System_GrpcServer).Services
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/services"
//	Path from root:       "/system/grpc-servers/grpc-server/config/services"
func (n *System_GrpcServer_ServicesPathAny) Config() ygnmi.WildcardQuery[[]oc.E_SystemGrpc_GRPC_SERVICE] {
	return ygnmi.NewWildcardQuery[[]oc.E_SystemGrpc_GRPC_SERVICE](
		"System_GrpcServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "services"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SystemGrpc_GRPC_SERVICE, bool) {
			ret := gs.(*oc.System_GrpcServer).Services
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_TransportSecurityPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/transport-security YANG schema element.
type System_GrpcServer_TransportSecurityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_TransportSecurityPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/transport-security YANG schema element.
type System_GrpcServer_TransportSecurityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/state/transport-security"
func (n *System_GrpcServer_TransportSecurityPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "state/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/state/transport-security"
func (n *System_GrpcServer_TransportSecurityPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/config/transport-security"
func (n *System_GrpcServer_TransportSecurityPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "config/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/config/transport-security"
func (n *System_GrpcServer_TransportSecurityPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_GrpcServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_GrpcServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServerPath represents the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPath struct {
	*ygnmi.NodePath
}

// System_GrpcServerPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPathAny struct {
	*ygnmi.NodePath
}

// System_GrpcServerPathMap represents the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPathMap struct {
	*ygnmi.NodePath
}

// System_GrpcServerPathMapAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServerPathMapAny struct {
	*ygnmi.NodePath
}

// AuthzPolicyCreatedOn (leaf): The timestamp of the moment when the gRPC authorization policy
// that is currently used by this gNMI server was created.
//
//	Defining module:      "gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authz-policy-created-on"
func (n *System_GrpcServerPath) AuthzPolicyCreatedOn() *System_GrpcServer_AuthzPolicyCreatedOnPath {
	ps := &System_GrpcServer_AuthzPolicyCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authz-policy-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthzPolicyCreatedOn (leaf): The timestamp of the moment when the gRPC authorization policy
// that is currently used by this gNMI server was created.
//
//	Defining module:      "gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authz-policy-created-on"
func (n *System_GrpcServerPathAny) AuthzPolicyCreatedOn() *System_GrpcServer_AuthzPolicyCreatedOnPathAny {
	ps := &System_GrpcServer_AuthzPolicyCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authz-policy-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthzPolicyVersion (leaf): The version of the gRPC authorization policy that is used by
// this gNMI server.
//
//	Defining module:      "gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authz-policy-version"
func (n *System_GrpcServerPath) AuthzPolicyVersion() *System_GrpcServer_AuthzPolicyVersionPath {
	ps := &System_GrpcServer_AuthzPolicyVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authz-policy-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthzPolicyVersion (leaf): The version of the gRPC authorization policy that is used by
// this gNMI server.
//
//	Defining module:      "gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/authz-policy-version"
func (n *System_GrpcServerPathAny) AuthzPolicyVersion() *System_GrpcServer_AuthzPolicyVersionPathAny {
	ps := &System_GrpcServer_AuthzPolicyVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authz-policy-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CaTrustBundleCreatedOn (leaf): The timestamp of the moment when the bundle of
// the Certificate Authority certificates (a.k.a.
// trust bundle) was created.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ca-trust-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on"
func (n *System_GrpcServerPath) CaTrustBundleCreatedOn() *System_GrpcServer_CaTrustBundleCreatedOnPath {
	ps := &System_GrpcServer_CaTrustBundleCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CaTrustBundleCreatedOn (leaf): The timestamp of the moment when the bundle of
// the Certificate Authority certificates (a.k.a.
// trust bundle) was created.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ca-trust-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-created-on"
func (n *System_GrpcServerPathAny) CaTrustBundleCreatedOn() *System_GrpcServer_CaTrustBundleCreatedOnPathAny {
	ps := &System_GrpcServer_CaTrustBundleCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CaTrustBundleId (leaf): The ID of the Certificate Authority trust bundle that is
// used by this gRPC server. The CA trust bundle is provisioned
// through other interfaces to the device, such as the gNSI
// certificate management service.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ca-trust-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/*/ca-trust-bundle-id"
func (n *System_GrpcServerPath) CaTrustBundleId() *System_GrpcServer_CaTrustBundleIdPath {
	ps := &System_GrpcServer_CaTrustBundleIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ca-trust-bundle-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CaTrustBundleId (leaf): The ID of the Certificate Authority trust bundle that is
// used by this gRPC server. The CA trust bundle is provisioned
// through other interfaces to the device, such as the gNSI
// certificate management service.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ca-trust-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/*/ca-trust-bundle-id"
func (n *System_GrpcServerPathAny) CaTrustBundleId() *System_GrpcServer_CaTrustBundleIdPathAny {
	ps := &System_GrpcServer_CaTrustBundleIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ca-trust-bundle-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CaTrustBundleVersion (leaf): The version of the bundle of the Certificate
// Authority certificates a.k.a. trust bundle used by
// this gRPC server.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ca-trust-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-version"
func (n *System_GrpcServerPath) CaTrustBundleVersion() *System_GrpcServer_CaTrustBundleVersionPath {
	ps := &System_GrpcServer_CaTrustBundleVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CaTrustBundleVersion (leaf): The version of the bundle of the Certificate
// Authority certificates a.k.a. trust bundle used by
// this gRPC server.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ca-trust-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/ca-trust-bundle-version"
func (n *System_GrpcServerPathAny) CaTrustBundleVersion() *System_GrpcServer_CaTrustBundleVersionPathAny {
	ps := &System_GrpcServer_CaTrustBundleVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ca-trust-bundle-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateCreatedOn (leaf): The timestamp of the moment when the certificate
// (and associated private key) that is currently used
// by this gRPC server was created.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-created-on"
func (n *System_GrpcServerPath) CertificateCreatedOn() *System_GrpcServer_CertificateCreatedOnPath {
	ps := &System_GrpcServer_CertificateCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateCreatedOn (leaf): The timestamp of the moment when the certificate
// (and associated private key) that is currently used
// by this gRPC server was created.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-created-on"
func (n *System_GrpcServerPathAny) CertificateCreatedOn() *System_GrpcServer_CertificateCreatedOnPathAny {
	ps := &System_GrpcServer_CertificateCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateId (leaf): Name of the certificate that is associated with the gRPC service. The
// certificate ID is provisioned through other interfaces to the device, such
// as the gNOI certificate management service.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/*/certificate-id"
func (n *System_GrpcServerPath) CertificateId() *System_GrpcServer_CertificateIdPath {
	ps := &System_GrpcServer_CertificateIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "certificate-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateId (leaf): Name of the certificate that is associated with the gRPC service. The
// certificate ID is provisioned through other interfaces to the device, such
// as the gNOI certificate management service.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/certificate-id"
//	Path from root:       "/system/grpc-servers/grpc-server/*/certificate-id"
func (n *System_GrpcServerPathAny) CertificateId() *System_GrpcServer_CertificateIdPathAny {
	ps := &System_GrpcServer_CertificateIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "certificate-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateRevocationListBundleCreatedOn (leaf): The timestamp of the moment when the Certificate Revocation
// List bundle was created.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-revocation-list-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on"
func (n *System_GrpcServerPath) CertificateRevocationListBundleCreatedOn() *System_GrpcServer_CertificateRevocationListBundleCreatedOnPath {
	ps := &System_GrpcServer_CertificateRevocationListBundleCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateRevocationListBundleCreatedOn (leaf): The timestamp of the moment when the Certificate Revocation
// List bundle was created.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-revocation-list-bundle-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-created-on"
func (n *System_GrpcServerPathAny) CertificateRevocationListBundleCreatedOn() *System_GrpcServer_CertificateRevocationListBundleCreatedOnPathAny {
	ps := &System_GrpcServer_CertificateRevocationListBundleCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateRevocationListBundleId (leaf): The ID of the Certificate Revocation List (CRL) bundle that is
// used by this gRPC server. The CRL is provisioned through other
// interfaces to the device, such as the gNSI certificate
// management service.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/certificate-revocation-list-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/*/certificate-revocation-list-bundle-id"
func (n *System_GrpcServerPath) CertificateRevocationListBundleId() *System_GrpcServer_CertificateRevocationListBundleIdPath {
	ps := &System_GrpcServer_CertificateRevocationListBundleIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "certificate-revocation-list-bundle-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateRevocationListBundleId (leaf): The ID of the Certificate Revocation List (CRL) bundle that is
// used by this gRPC server. The CRL is provisioned through other
// interfaces to the device, such as the gNSI certificate
// management service.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/certificate-revocation-list-bundle-id"
//	Path from root:       "/system/grpc-servers/grpc-server/*/certificate-revocation-list-bundle-id"
func (n *System_GrpcServerPathAny) CertificateRevocationListBundleId() *System_GrpcServer_CertificateRevocationListBundleIdPathAny {
	ps := &System_GrpcServer_CertificateRevocationListBundleIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "certificate-revocation-list-bundle-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateRevocationListBundleVersion (leaf): The version of the Certificate Revocation List bundle used by
// this gRPC server.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-revocation-list-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version"
func (n *System_GrpcServerPath) CertificateRevocationListBundleVersion() *System_GrpcServer_CertificateRevocationListBundleVersionPath {
	ps := &System_GrpcServer_CertificateRevocationListBundleVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateRevocationListBundleVersion (leaf): The version of the Certificate Revocation List bundle used by
// this gRPC server.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-revocation-list-bundle-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-revocation-list-bundle-version"
func (n *System_GrpcServerPathAny) CertificateRevocationListBundleVersion() *System_GrpcServer_CertificateRevocationListBundleVersionPathAny {
	ps := &System_GrpcServer_CertificateRevocationListBundleVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-revocation-list-bundle-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateVersion (leaf): The version of the certificate (and associated
// private key) that is used by this gRPC server.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-version"
func (n *System_GrpcServerPath) CertificateVersion() *System_GrpcServer_CertificateVersionPath {
	ps := &System_GrpcServer_CertificateVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CertificateVersion (leaf): The version of the certificate (and associated
// private key) that is used by this gRPC server.
//
//	Defining module:      "gnsi-cert"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/certificate-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/certificate-version"
func (n *System_GrpcServerPathAny) CertificateVersion() *System_GrpcServer_CertificateVersionPathAny {
	ps := &System_GrpcServer_CertificateVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "certificate-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): When set to true, the gRPC server is enabled and runs on the
// local device.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/*/enable"
func (n *System_GrpcServerPath) Enable() *System_GrpcServer_EnablePath {
	ps := &System_GrpcServer_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): When set to true, the gRPC server is enabled and runs on the
// local device.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/grpc-servers/grpc-server/*/enable"
func (n *System_GrpcServerPathAny) Enable() *System_GrpcServer_EnablePathAny {
	ps := &System_GrpcServer_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicyCreatedOn (leaf): The timestamp of the moment when the OpenConfig-path-based
// authorization policy that is currently used by this gNMI server
// was created.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/gnmi-pathz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on"
func (n *System_GrpcServerPath) GnmiPathzPolicyCreatedOn() *System_GrpcServer_GnmiPathzPolicyCreatedOnPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicyCreatedOn (leaf): The timestamp of the moment when the OpenConfig-path-based
// authorization policy that is currently used by this gNMI server
// was created.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/gnmi-pathz-policy-created-on"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-created-on"
func (n *System_GrpcServerPathAny) GnmiPathzPolicyCreatedOn() *System_GrpcServer_GnmiPathzPolicyCreatedOnPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicyId (leaf): The ID of the OpenConfig-path-based authorization policy that
// is used by this gNMI server. The policy is provisioned
// through other interfaces to the device, such as the gNSI
// OpenConfig-path-based Authorization Policy management service.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/gnmi-pathz-policy-id"
//	Path from root:       "/system/grpc-servers/grpc-server/*/gnmi-pathz-policy-id"
func (n *System_GrpcServerPath) GnmiPathzPolicyId() *System_GrpcServer_GnmiPathzPolicyIdPath {
	ps := &System_GrpcServer_GnmiPathzPolicyIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "gnmi-pathz-policy-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicyId (leaf): The ID of the OpenConfig-path-based authorization policy that
// is used by this gNMI server. The policy is provisioned
// through other interfaces to the device, such as the gNSI
// OpenConfig-path-based Authorization Policy management service.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/gnmi-pathz-policy-id"
//	Path from root:       "/system/grpc-servers/grpc-server/*/gnmi-pathz-policy-id"
func (n *System_GrpcServerPathAny) GnmiPathzPolicyId() *System_GrpcServer_GnmiPathzPolicyIdPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "gnmi-pathz-policy-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicyVersion (leaf): The version of the OpenConfig-path-based authorization policy
// that is used by this gNMI server.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/gnmi-pathz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version"
func (n *System_GrpcServerPath) GnmiPathzPolicyVersion() *System_GrpcServer_GnmiPathzPolicyVersionPath {
	ps := &System_GrpcServer_GnmiPathzPolicyVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicyVersion (leaf): The version of the OpenConfig-path-based authorization policy
// that is used by this gNMI server.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/gnmi-pathz-policy-version"
//	Path from root:       "/system/grpc-servers/grpc-server/state/gnmi-pathz-policy-version"
func (n *System_GrpcServerPathAny) GnmiPathzPolicyVersion() *System_GrpcServer_GnmiPathzPolicyVersionPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "gnmi-pathz-policy-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ListenAddresses (leaf-list): The IP addresses that the gRPC server should listen on. This may be
// an IPv4 or an IPv6 address (or both).
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/*/listen-addresses"
func (n *System_GrpcServerPath) ListenAddresses() *System_GrpcServer_ListenAddressesPath {
	ps := &System_GrpcServer_ListenAddressesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "listen-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ListenAddresses (leaf-list): The IP addresses that the gRPC server should listen on. This may be
// an IPv4 or an IPv6 address (or both).
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/listen-addresses"
//	Path from root:       "/system/grpc-servers/grpc-server/*/listen-addresses"
func (n *System_GrpcServerPathAny) ListenAddresses() *System_GrpcServer_ListenAddressesPathAny {
	ps := &System_GrpcServer_ListenAddressesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "listen-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetadataAuthentication (leaf): When set to true, metadata authentication is enabled for the gRPC server.
// In this mode of operation, gRPC metadata is used to carry authentication
// credentials as per the specification in
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/*/metadata-authentication"
func (n *System_GrpcServerPath) MetadataAuthentication() *System_GrpcServer_MetadataAuthenticationPath {
	ps := &System_GrpcServer_MetadataAuthenticationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metadata-authentication"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetadataAuthentication (leaf): When set to true, metadata authentication is enabled for the gRPC server.
// In this mode of operation, gRPC metadata is used to carry authentication
// credentials as per the specification in
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-authentication.md#credentials-and-authentication.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/metadata-authentication"
//	Path from root:       "/system/grpc-servers/grpc-server/*/metadata-authentication"
func (n *System_GrpcServerPathAny) MetadataAuthentication() *System_GrpcServer_MetadataAuthenticationPathAny {
	ps := &System_GrpcServer_MetadataAuthenticationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metadata-authentication"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the gRPC server instance that is running on
// the local system.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support a single gRPC server instance,
// the default value is recommended for consistency.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/grpc-servers/grpc-server/*/name"
func (n *System_GrpcServerPath) Name() *System_GrpcServer_NamePath {
	ps := &System_GrpcServer_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The name of the gRPC server instance that is running on
// the local system.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support a single gRPC server instance,
// the default value is recommended for consistency.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/grpc-servers/grpc-server/*/name"
func (n *System_GrpcServerPathAny) Name() *System_GrpcServer_NamePathAny {
	ps := &System_GrpcServer_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance within which the gRPC server is listening.
// When unspecified, the DEFAULT_INSTANCE should be used.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/*/network-instance"
func (n *System_GrpcServerPath) NetworkInstance() *System_GrpcServer_NetworkInstancePath {
	ps := &System_GrpcServer_NetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance within which the gRPC server is listening.
// When unspecified, the DEFAULT_INSTANCE should be used.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/grpc-servers/grpc-server/*/network-instance"
func (n *System_GrpcServerPathAny) NetworkInstance() *System_GrpcServer_NetworkInstancePathAny {
	ps := &System_GrpcServer_NetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): TCP port on which the gRPC server should listen.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/grpc-servers/grpc-server/*/port"
func (n *System_GrpcServerPath) Port() *System_GrpcServer_PortPath {
	ps := &System_GrpcServer_PortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): TCP port on which the gRPC server should listen.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/grpc-servers/grpc-server/*/port"
func (n *System_GrpcServerPathAny) Port() *System_GrpcServer_PortPathAny {
	ps := &System_GrpcServer_PortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Services (leaf-list): The gRPC service definitions that should be enabled for the
// specified server. A target may support only specific
// sets of services being enabled on the same server (e.g.,
// it may be possible to run gNMI and gNOI services on the same
// port, but not to run gRIBI and gNMI on the same port).
//
// The set of gRPC services that are available to be configured is
// defined through the GRPC_SERVICE identity, which can be extended
// for each protocol that is based on gRPC that is available on the
// device.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/services"
//	Path from root:       "/system/grpc-servers/grpc-server/*/services"
func (n *System_GrpcServerPath) Services() *System_GrpcServer_ServicesPath {
	ps := &System_GrpcServer_ServicesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "services"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Services (leaf-list): The gRPC service definitions that should be enabled for the
// specified server. A target may support only specific
// sets of services being enabled on the same server (e.g.,
// it may be possible to run gNMI and gNOI services on the same
// port, but not to run gRIBI and gNMI on the same port).
//
// The set of gRPC services that are available to be configured is
// defined through the GRPC_SERVICE identity, which can be extended
// for each protocol that is based on gRPC that is available on the
// device.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/services"
//	Path from root:       "/system/grpc-servers/grpc-server/*/services"
func (n *System_GrpcServerPathAny) Services() *System_GrpcServer_ServicesPathAny {
	ps := &System_GrpcServer_ServicesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "services"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransportSecurity (leaf): Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
// This leaf allows transport security to be disabled for use cases that
// are not supported, such as lab testing.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/*/transport-security"
func (n *System_GrpcServerPath) TransportSecurity() *System_GrpcServer_TransportSecurityPath {
	ps := &System_GrpcServer_TransportSecurityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "transport-security"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransportSecurity (leaf): Use gRPC transport security (e.g., SSL or TLS). Enabled by default.
// This leaf allows transport security to be disabled for use cases that
// are not supported, such as lab testing.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/transport-security"
//	Path from root:       "/system/grpc-servers/grpc-server/*/transport-security"
func (n *System_GrpcServerPathAny) TransportSecurity() *System_GrpcServer_TransportSecurityPathAny {
	ps := &System_GrpcServer_TransportSecurityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "transport-security"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer](
		"System_GrpcServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer](
		"System_GrpcServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPath) Config() ygnmi.ConfigQuery[*oc.System_GrpcServer] {
	return ygnmi.NewConfigQuery[*oc.System_GrpcServer](
		"System_GrpcServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_GrpcServer] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer](
		"System_GrpcServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_GrpcServer] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_GrpcServer](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer, bool) {
			ret := gs.(*oc.System).GrpcServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-grpc:grpc-servers"},
			PostRelPath: []string{"openconfig-system-grpc:grpc-server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_GrpcServer] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_GrpcServer](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer, bool) {
			ret := gs.(*oc.System).GrpcServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-grpc:grpc-servers"},
			PostRelPath: []string{"openconfig-system-grpc:grpc-server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_GrpcServer] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_GrpcServer](
		"System",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer, bool) {
			ret := gs.(*oc.System).GrpcServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-grpc:grpc-servers"},
			PostRelPath: []string{"openconfig-system-grpc:grpc-server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_GrpcServerPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_GrpcServer] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_GrpcServer](
		"System",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer, bool) {
			ret := gs.(*oc.System).GrpcServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system-grpc:grpc-servers"},
			PostRelPath: []string{"openconfig-system-grpc:grpc-server"},
		},
	)
}

// System_LicensePath represents the /openconfig-system/system/license YANG schema element.
type System_LicensePath struct {
	*ygnmi.NodePath
}

// System_LicensePathAny represents the wildcard version of the /openconfig-system/system/license YANG schema element.
type System_LicensePathAny struct {
	*ygnmi.NodePath
}

// LicenseAny (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePath) LicenseAny() *System_License_LicensePathAny {
	ps := &System_License_LicensePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
	return ps
}

// LicenseAny (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePathAny) LicenseAny() *System_License_LicensePathAny {
	ps := &System_License_LicensePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
	return ps
}

// License (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
//
//	LicenseId: string
func (n *System_LicensePath) License(LicenseId string) *System_License_LicensePath {
	ps := &System_License_LicensePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
	return ps
}

// License (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
//
//	LicenseId: string
func (n *System_LicensePathAny) License(LicenseId string) *System_License_LicensePathAny {
	ps := &System_License_LicensePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
	return ps
}

// LicenseMap (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePath) LicenseMap() *System_License_LicensePathMap {
	ps := &System_License_LicensePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LicenseMap (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePathAny) LicenseMap() *System_License_LicensePathMapAny {
	ps := &System_License_LicensePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LicensePath) State() ygnmi.SingletonQuery[*oc.System_License] {
	return ygnmi.NewSingletonQuery[*oc.System_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LicensePathAny) State() ygnmi.WildcardQuery[*oc.System_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LicensePath) Config() ygnmi.ConfigQuery[*oc.System_License] {
	return ygnmi.NewConfigQuery[*oc.System_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LicensePathAny) Config() ygnmi.WildcardQuery[*oc.System_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ActivePath represents the /openconfig-system/system/license/licenses/license/state/active YANG schema element.
type System_License_License_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ActivePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/active YANG schema element.
type System_License_License_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active"
//	Path from root:       "/system/license/licenses/license/state/active"
func (n *System_License_License_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active"
//	Path from root:       "/system/license/licenses/license/state/active"
func (n *System_License_License_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/active"
//	Path from root:       "/system/license/licenses/license/config/active"
func (n *System_License_License_ActivePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/active"
//	Path from root:       "/system/license/licenses/license/config/active"
func (n *System_License_License_ActivePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_DescriptionPath represents the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_DescriptionPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_License_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_License_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ExpirationDatePath represents the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ExpirationDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_License_ExpirationDatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).ExpirationDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_License_ExpirationDatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).ExpirationDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ExpiredPath represents the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ExpiredPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_License_ExpiredPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expired"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Expired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_License_ExpiredPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expired"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Expired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_InUsePath represents the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_InUsePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_License_InUsePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).InUse
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_License_InUsePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).InUse
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_IssueDatePath represents the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_IssueDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_License_IssueDatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).IssueDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_License_IssueDatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).IssueDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_LicenseDataPath represents the /openconfig-system/system/license/licenses/license/state/license-data YANG schema element.
type System_License_License_LicenseDataPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_LicenseDataPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/license-data YANG schema element.
type System_License_License_LicenseDataPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-data"
//	Path from root:       "/system/license/licenses/license/state/license-data"
func (n *System_License_License_LicenseDataPath) State() ygnmi.SingletonQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewSingletonQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-data"
//	Path from root:       "/system/license/licenses/license/state/license-data"
func (n *System_License_License_LicenseDataPathAny) State() ygnmi.WildcardQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewWildcardQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-data"
//	Path from root:       "/system/license/licenses/license/config/license-data"
func (n *System_License_License_LicenseDataPath) Config() ygnmi.ConfigQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewConfigQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-data"
//	Path from root:       "/system/license/licenses/license/config/license-data"
func (n *System_License_License_LicenseDataPathAny) Config() ygnmi.WildcardQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewWildcardQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_LicenseIdPath represents the /openconfig-system/system/license/licenses/license/state/license-id YANG schema element.
type System_License_License_LicenseIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_LicenseIdPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/license-id YANG schema element.
type System_License_License_LicenseIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-id"
//	Path from root:       "/system/license/licenses/license/state/license-id"
func (n *System_License_License_LicenseIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-id"
//	Path from root:       "/system/license/licenses/license/state/license-id"
func (n *System_License_License_LicenseIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-id"
//	Path from root:       "/system/license/licenses/license/config/license-id"
func (n *System_License_License_LicenseIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-id"
//	Path from root:       "/system/license/licenses/license/config/license-id"
func (n *System_License_License_LicenseIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ValidPath represents the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ValidPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_License_ValidPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Valid
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_License_ValidPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Valid
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_LicensePath represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePath struct {
	*ygnmi.NodePath
}

// System_License_LicensePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathAny struct {
	*ygnmi.NodePath
}

// System_License_LicensePathMap represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathMap struct {
	*ygnmi.NodePath
}

// System_License_LicensePathMapAny represents the wildcard version of the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathMapAny struct {
	*ygnmi.NodePath
}

// Active (leaf): The activation state of the license.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/active"
//	Path from root:       "/system/license/licenses/license/*/active"
func (n *System_License_LicensePath) Active() *System_License_License_ActivePath {
	ps := &System_License_License_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The activation state of the license.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/active"
//	Path from root:       "/system/license/licenses/license/*/active"
func (n *System_License_LicensePathAny) Active() *System_License_License_ActivePathAny {
	ps := &System_License_License_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): The license description.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_LicensePath) Description() *System_License_License_DescriptionPath {
	ps := &System_License_License_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): The license description.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_LicensePathAny) Description() *System_License_License_DescriptionPathAny {
	ps := &System_License_License_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePath) ExpirationDate() *System_License_License_ExpirationDatePath {
	ps := &System_License_License_ExpirationDatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePathAny) ExpirationDate() *System_License_License_ExpirationDatePathAny {
	ps := &System_License_License_ExpirationDatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Expired (leaf): The license has expired.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePath) Expired() *System_License_License_ExpiredPath {
	ps := &System_License_License_ExpiredPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Expired (leaf): The license has expired.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePathAny) Expired() *System_License_License_ExpiredPathAny {
	ps := &System_License_License_ExpiredPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePath) InUse() *System_License_License_InUsePath {
	ps := &System_License_License_InUsePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePathAny) InUse() *System_License_License_InUsePathAny {
	ps := &System_License_License_InUsePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePath) IssueDate() *System_License_License_IssueDatePath {
	ps := &System_License_License_IssueDatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePathAny) IssueDate() *System_License_License_IssueDatePathAny {
	ps := &System_License_License_IssueDatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-data"
//	Path from root:       "/system/license/licenses/license/*/license-data"
func (n *System_License_LicensePath) LicenseData() *System_License_License_LicenseDataPath {
	ps := &System_License_License_LicenseDataPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-data"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-data"
//	Path from root:       "/system/license/licenses/license/*/license-data"
func (n *System_License_LicensePathAny) LicenseData() *System_License_License_LicenseDataPathAny {
	ps := &System_License_License_LicenseDataPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-data"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-id"
//	Path from root:       "/system/license/licenses/license/*/license-id"
func (n *System_License_LicensePath) LicenseId() *System_License_License_LicenseIdPath {
	ps := &System_License_License_LicenseIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-id"
//	Path from root:       "/system/license/licenses/license/*/license-id"
func (n *System_License_LicensePathAny) LicenseId() *System_License_License_LicenseIdPathAny {
	ps := &System_License_License_LicenseIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePath) Valid() *System_License_License_ValidPath {
	ps := &System_License_License_ValidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePathAny) Valid() *System_License_License_ValidPathAny {
	ps := &System_License_License_ValidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePath) State() ygnmi.SingletonQuery[*oc.System_License_License] {
	return ygnmi.NewSingletonQuery[*oc.System_License_License](
		"System_License_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathAny) State() ygnmi.WildcardQuery[*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License_License](
		"System_License_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePath) Config() ygnmi.ConfigQuery[*oc.System_License_License] {
	return ygnmi.NewConfigQuery[*oc.System_License_License](
		"System_License_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathAny) Config() ygnmi.WildcardQuery[*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License_License](
		"System_License_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_License_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_License_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_License_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_License_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// System_LoggingPath represents the /openconfig-system/system/logging YANG schema element.
type System_LoggingPath struct {
	*ygnmi.NodePath
}

// System_LoggingPathAny represents the wildcard version of the /openconfig-system/system/logging YANG schema element.
type System_LoggingPathAny struct {
	*ygnmi.NodePath
}

// Console (container): Top-level container for data related to console-based
// logging
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "console"
//	Path from root:       "/system/logging/console"
func (n *System_LoggingPath) Console() *System_Logging_ConsolePath {
	ps := &System_Logging_ConsolePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Console (container): Top-level container for data related to console-based
// logging
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "console"
//	Path from root:       "/system/logging/console"
func (n *System_LoggingPathAny) Console() *System_Logging_ConsolePathAny {
	ps := &System_Logging_ConsolePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FileAny (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPath) FileAny() *System_Logging_FilePathAny {
	ps := &System_Logging_FilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": "*", "filename-prefix": "*"},
			n,
		),
	}
	return ps
}

// FileAny (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPathAny) FileAny() *System_Logging_FilePathAny {
	ps := &System_Logging_FilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": "*", "filename-prefix": "*"},
			n,
		),
	}
	return ps
}

// WithPath sets System_Logging_FilePathAny's key "path" to the specified value.
// Path: string
func (n *System_Logging_FilePathAny) WithPath(Path string) *System_Logging_FilePathAny {
	ygnmi.ModifyKey(n.NodePath, "path", Path)
	return n
}

// WithFilenamePrefix sets System_Logging_FilePathAny's key "filename-prefix" to the specified value.
// FilenamePrefix: string
func (n *System_Logging_FilePathAny) WithFilenamePrefix(FilenamePrefix string) *System_Logging_FilePathAny {
	ygnmi.ModifyKey(n.NodePath, "filename-prefix", FilenamePrefix)
	return n
}

// File (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
//
//	Path: string
//	FilenamePrefix: string
func (n *System_LoggingPath) File(Path string, FilenamePrefix string) *System_Logging_FilePath {
	ps := &System_Logging_FilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": Path, "filename-prefix": FilenamePrefix},
			n,
		),
	}
	return ps
}

// File (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
//
//	Path: string
//	FilenamePrefix: string
func (n *System_LoggingPathAny) File(Path string, FilenamePrefix string) *System_Logging_FilePathAny {
	ps := &System_Logging_FilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": Path, "filename-prefix": FilenamePrefix},
			n,
		),
	}
	return ps
}

// FileMap (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPath) FileMap() *System_Logging_FilePathMap {
	ps := &System_Logging_FilePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"files"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FileMap (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPathAny) FileMap() *System_Logging_FilePathMapAny {
	ps := &System_Logging_FilePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteServerAny (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPath) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	ps := &System_Logging_RemoteServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
	return ps
}

// RemoteServerAny (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPathAny) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	ps := &System_Logging_RemoteServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
	return ps
}

// RemoteServer (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
//
//	Host: string
func (n *System_LoggingPath) RemoteServer(Host string) *System_Logging_RemoteServerPath {
	ps := &System_Logging_RemoteServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
	return ps
}

// RemoteServer (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
//
//	Host: string
func (n *System_LoggingPathAny) RemoteServer(Host string) *System_Logging_RemoteServerPathAny {
	ps := &System_Logging_RemoteServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
	return ps
}

// RemoteServerMap (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPath) RemoteServerMap() *System_Logging_RemoteServerPathMap {
	ps := &System_Logging_RemoteServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteServerMap (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPathAny) RemoteServerMap() *System_Logging_RemoteServerPathMapAny {
	ps := &System_Logging_RemoteServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vty (container): Top-level container for data related to vty-based
// logging (active sessions of ssh, telnet, etc )
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "vty"
//	Path from root:       "/system/logging/vty"
func (n *System_LoggingPath) Vty() *System_Logging_VtyPath {
	ps := &System_Logging_VtyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vty"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vty (container): Top-level container for data related to vty-based
// logging (active sessions of ssh, telnet, etc )
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "vty"
//	Path from root:       "/system/logging/vty"
func (n *System_LoggingPathAny) Vty() *System_Logging_VtyPathAny {
	ps := &System_Logging_VtyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vty"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LoggingPath) State() ygnmi.SingletonQuery[*oc.System_Logging] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LoggingPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LoggingPath) Config() ygnmi.ConfigQuery[*oc.System_Logging] {
	return ygnmi.NewConfigQuery[*oc.System_Logging](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LoggingPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_ConsolePath represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePath struct {
	*ygnmi.NodePath
}

// System_Logging_ConsolePathAny represents the wildcard version of the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePathAny struct {
	*ygnmi.NodePath
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePath) SelectorAny() *System_Logging_Console_SelectorPathAny {
	ps := &System_Logging_Console_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePathAny) SelectorAny() *System_Logging_Console_SelectorPathAny {
	ps := &System_Logging_Console_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// WithFacility sets System_Logging_Console_SelectorPathAny's key "facility" to the specified value.
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
func (n *System_Logging_Console_SelectorPathAny) WithFacility(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "facility", Facility)
	return n
}

// WithSeverity sets System_Logging_Console_SelectorPathAny's key "severity" to the specified value.
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_Console_SelectorPathAny) WithSeverity(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "severity", Severity)
	return n
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPath {
	ps := &System_Logging_Console_SelectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	ps := &System_Logging_Console_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePath) SelectorMap() *System_Logging_Console_SelectorPathMap {
	ps := &System_Logging_Console_SelectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePathAny) SelectorMap() *System_Logging_Console_SelectorPathMapAny {
	ps := &System_Logging_Console_SelectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePath) State() ygnmi.SingletonQuery[*oc.System_Logging_Console] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_Console] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePath) Config() ygnmi.ConfigQuery[*oc.System_Logging_Console] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_Console] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Console_Selector_FacilityPath represents the /openconfig-system/system/logging/console/selectors/selector/state/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_Console_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/state/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/console/selectors/selector/state/facility"
func (n *System_Logging_Console_Selector_FacilityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/console/selectors/selector/state/facility"
func (n *System_Logging_Console_Selector_FacilityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_Selector_FacilityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_Selector_FacilityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Console_Selector_SeverityPath represents the /openconfig-system/system/logging/console/selectors/selector/state/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_Console_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/state/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/console/selectors/selector/state/severity"
func (n *System_Logging_Console_Selector_SeverityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/console/selectors/selector/state/severity"
func (n *System_Logging_Console_Selector_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_Selector_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_Selector_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Console_SelectorPath represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPath struct {
	*ygnmi.NodePath
}

// System_Logging_Console_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_Console_SelectorPathMap represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_Console_SelectorPathMapAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathMapAny struct {
	*ygnmi.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/console/selectors/selector/*/facility"
func (n *System_Logging_Console_SelectorPath) Facility() *System_Logging_Console_Selector_FacilityPath {
	ps := &System_Logging_Console_Selector_FacilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/console/selectors/selector/*/facility"
func (n *System_Logging_Console_SelectorPathAny) Facility() *System_Logging_Console_Selector_FacilityPathAny {
	ps := &System_Logging_Console_Selector_FacilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/console/selectors/selector/*/severity"
func (n *System_Logging_Console_SelectorPath) Severity() *System_Logging_Console_Selector_SeverityPath {
	ps := &System_Logging_Console_Selector_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/console/selectors/selector/*/severity"
func (n *System_Logging_Console_SelectorPathAny) Severity() *System_Logging_Console_Selector_SeverityPathAny {
	ps := &System_Logging_Console_Selector_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPath) State() ygnmi.SingletonQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// System_Logging_File_FilenamePrefixPath represents the /openconfig-system/system/logging/files/file/state/filename-prefix YANG schema element.
type System_Logging_File_FilenamePrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_FilenamePrefixPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/filename-prefix YANG schema element.
type System_Logging_File_FilenamePrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/filename-prefix"
//	Path from root:       "/system/logging/files/file/state/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/filename-prefix"
//	Path from root:       "/system/logging/files/file/state/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/filename-prefix"
//	Path from root:       "/system/logging/files/file/config/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/filename-prefix"
//	Path from root:       "/system/logging/files/file/config/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_MaxOpenTimePath represents the /openconfig-system/system/logging/files/file/state/max-open-time YANG schema element.
type System_Logging_File_MaxOpenTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_MaxOpenTimePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/max-open-time YANG schema element.
type System_Logging_File_MaxOpenTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-open-time"
//	Path from root:       "/system/logging/files/file/state/max-open-time"
func (n *System_Logging_File_MaxOpenTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-open-time"
//	Path from root:       "/system/logging/files/file/state/max-open-time"
func (n *System_Logging_File_MaxOpenTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-open-time"
//	Path from root:       "/system/logging/files/file/config/max-open-time"
func (n *System_Logging_File_MaxOpenTimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-open-time"
//	Path from root:       "/system/logging/files/file/config/max-open-time"
func (n *System_Logging_File_MaxOpenTimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_MaxSizePath represents the /openconfig-system/system/logging/files/file/state/max-size YANG schema element.
type System_Logging_File_MaxSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_MaxSizePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/max-size YANG schema element.
type System_Logging_File_MaxSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-size"
//	Path from root:       "/system/logging/files/file/state/max-size"
func (n *System_Logging_File_MaxSizePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-size"
//	Path from root:       "/system/logging/files/file/state/max-size"
func (n *System_Logging_File_MaxSizePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-size"
//	Path from root:       "/system/logging/files/file/config/max-size"
func (n *System_Logging_File_MaxSizePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-size"
//	Path from root:       "/system/logging/files/file/config/max-size"
func (n *System_Logging_File_MaxSizePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_OpenLogfilePath represents the /openconfig-system/system/logging/files/file/state/open-logfile YANG schema element.
type System_Logging_File_OpenLogfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_OpenLogfilePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/open-logfile YANG schema element.
type System_Logging_File_OpenLogfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_File_OpenLogfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).OpenLogfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_File_OpenLogfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).OpenLogfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_PathPath represents the /openconfig-system/system/logging/files/file/state/path YANG schema element.
type System_Logging_File_PathPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_PathPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/path YANG schema element.
type System_Logging_File_PathPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/path"
//	Path from root:       "/system/logging/files/file/state/path"
func (n *System_Logging_File_PathPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/path"
//	Path from root:       "/system/logging/files/file/state/path"
func (n *System_Logging_File_PathPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/path"
//	Path from root:       "/system/logging/files/file/config/path"
func (n *System_Logging_File_PathPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/path"
//	Path from root:       "/system/logging/files/file/config/path"
func (n *System_Logging_File_PathPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_RotatePath represents the /openconfig-system/system/logging/files/file/state/rotate YANG schema element.
type System_Logging_File_RotatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_RotatePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/rotate YANG schema element.
type System_Logging_File_RotatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rotate"
//	Path from root:       "/system/logging/files/file/state/rotate"
func (n *System_Logging_File_RotatePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rotate"
//	Path from root:       "/system/logging/files/file/state/rotate"
func (n *System_Logging_File_RotatePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rotate"
//	Path from root:       "/system/logging/files/file/config/rotate"
func (n *System_Logging_File_RotatePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rotate"
//	Path from root:       "/system/logging/files/file/config/rotate"
func (n *System_Logging_File_RotatePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_FilePath represents the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePath struct {
	*ygnmi.NodePath
}

// System_Logging_FilePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePathAny struct {
	*ygnmi.NodePath
}

// System_Logging_FilePathMap represents the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePathMap struct {
	*ygnmi.NodePath
}

// System_Logging_FilePathMapAny represents the wildcard version of the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePathMapAny struct {
	*ygnmi.NodePath
}

// FilenamePrefix (leaf): A name used for the file.  It is expected that an
// implementation may append timestamp, serial-number or
// other identifier to the filename.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/filename-prefix"
//	Path from root:       "/system/logging/files/file/*/filename-prefix"
func (n *System_Logging_FilePath) FilenamePrefix() *System_Logging_File_FilenamePrefixPath {
	ps := &System_Logging_File_FilenamePrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filename-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FilenamePrefix (leaf): A name used for the file.  It is expected that an
// implementation may append timestamp, serial-number or
// other identifier to the filename.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/filename-prefix"
//	Path from root:       "/system/logging/files/file/*/filename-prefix"
func (n *System_Logging_FilePathAny) FilenamePrefix() *System_Logging_File_FilenamePrefixPathAny {
	ps := &System_Logging_File_FilenamePrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filename-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxOpenTime (leaf): Used for logfile rotation.
// Maximum time, in minutes, the logfile can be open. When expires,
// it triggers log rotation.
// Actions are same ans when log file reaches its max-size.
// it need to be closed, save, and new file open or future log
// storage. If needed oldest logfile of same prefix shall be
// deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-open-time"
//	Path from root:       "/system/logging/files/file/*/max-open-time"
func (n *System_Logging_FilePath) MaxOpenTime() *System_Logging_File_MaxOpenTimePath {
	ps := &System_Logging_File_MaxOpenTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-open-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxOpenTime (leaf): Used for logfile rotation.
// Maximum time, in minutes, the logfile can be open. When expires,
// it triggers log rotation.
// Actions are same ans when log file reaches its max-size.
// it need to be closed, save, and new file open or future log
// storage. If needed oldest logfile of same prefix shall be
// deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-open-time"
//	Path from root:       "/system/logging/files/file/*/max-open-time"
func (n *System_Logging_FilePathAny) MaxOpenTime() *System_Logging_File_MaxOpenTimePathAny {
	ps := &System_Logging_File_MaxOpenTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-open-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxSize (leaf): Used for logfile rotation.
// Maximum size in Bytes, logfile may grow to. When logfile
// reach this size it triggers log rotation. The log file need to
// be save, closed, and new file open or future log storage.
// If needed oldest logfile of same prefix shall be deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-size"
//	Path from root:       "/system/logging/files/file/*/max-size"
func (n *System_Logging_FilePath) MaxSize() *System_Logging_File_MaxSizePath {
	ps := &System_Logging_File_MaxSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxSize (leaf): Used for logfile rotation.
// Maximum size in Bytes, logfile may grow to. When logfile
// reach this size it triggers log rotation. The log file need to
// be save, closed, and new file open or future log storage.
// If needed oldest logfile of same prefix shall be deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-size"
//	Path from root:       "/system/logging/files/file/*/max-size"
func (n *System_Logging_FilePathAny) MaxSize() *System_Logging_File_MaxSizePathAny {
	ps := &System_Logging_File_MaxSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OpenLogfile (leaf): the currently active/open filename prepended by folder path
// and including suffix appended to filename-prefix by system
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_FilePath) OpenLogfile() *System_Logging_File_OpenLogfilePath {
	ps := &System_Logging_File_OpenLogfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OpenLogfile (leaf): the currently active/open filename prepended by folder path
// and including suffix appended to filename-prefix by system
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_FilePathAny) OpenLogfile() *System_Logging_File_OpenLogfilePathAny {
	ps := &System_Logging_File_OpenLogfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Path (leaf): The fully specified path of the folder where the
// logfile is stored.  The path is implementation specific
// and may include attributes such as a drive identifier.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/path"
//	Path from root:       "/system/logging/files/file/*/path"
func (n *System_Logging_FilePath) Path() *System_Logging_File_PathPath {
	ps := &System_Logging_File_PathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Path (leaf): The fully specified path of the folder where the
// logfile is stored.  The path is implementation specific
// and may include attributes such as a drive identifier.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/path"
//	Path from root:       "/system/logging/files/file/*/path"
func (n *System_Logging_FilePathAny) Path() *System_Logging_File_PathPathAny {
	ps := &System_Logging_File_PathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rotate (leaf): Used for logfile rotation.
// Log files are rotated the number of times defined by
// this leaf.
// The default value of 1 indicates that there will be one
// rotation file and one active file.  A 0 value indicates
// old versions are removed rather than rotated.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rotate"
//	Path from root:       "/system/logging/files/file/*/rotate"
func (n *System_Logging_FilePath) Rotate() *System_Logging_File_RotatePath {
	ps := &System_Logging_File_RotatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rotate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rotate (leaf): Used for logfile rotation.
// Log files are rotated the number of times defined by
// this leaf.
// The default value of 1 indicates that there will be one
// rotation file and one active file.  A 0 value indicates
// old versions are removed rather than rotated.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rotate"
//	Path from root:       "/system/logging/files/file/*/rotate"
func (n *System_Logging_FilePathAny) Rotate() *System_Logging_File_RotatePathAny {
	ps := &System_Logging_File_RotatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rotate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePath) SelectorAny() *System_Logging_File_SelectorPathAny {
	ps := &System_Logging_File_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePathAny) SelectorAny() *System_Logging_File_SelectorPathAny {
	ps := &System_Logging_File_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// WithFacility sets System_Logging_File_SelectorPathAny's key "facility" to the specified value.
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
func (n *System_Logging_File_SelectorPathAny) WithFacility(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_File_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "facility", Facility)
	return n
}

// WithSeverity sets System_Logging_File_SelectorPathAny's key "severity" to the specified value.
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_File_SelectorPathAny) WithSeverity(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "severity", Severity)
	return n
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPath {
	ps := &System_Logging_File_SelectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPathAny {
	ps := &System_Logging_File_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePath) SelectorMap() *System_Logging_File_SelectorPathMap {
	ps := &System_Logging_File_SelectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePathAny) SelectorMap() *System_Logging_File_SelectorPathMapAny {
	ps := &System_Logging_File_SelectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePath) State() ygnmi.SingletonQuery[*oc.System_Logging_File] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_File](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePath) Config() ygnmi.ConfigQuery[*oc.System_Logging_File] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_File](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// System_Logging_File_Selector_FacilityPath represents the /openconfig-system/system/logging/files/file/selectors/selector/state/facility YANG schema element.
type System_Logging_File_Selector_FacilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector/state/facility YANG schema element.
type System_Logging_File_Selector_FacilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/facility"
func (n *System_Logging_File_Selector_FacilityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/facility"
func (n *System_Logging_File_Selector_FacilityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/facility"
func (n *System_Logging_File_Selector_FacilityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/facility"
func (n *System_Logging_File_Selector_FacilityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_Selector_SeverityPath represents the /openconfig-system/system/logging/files/file/selectors/selector/state/severity YANG schema element.
type System_Logging_File_Selector_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector/state/severity YANG schema element.
type System_Logging_File_Selector_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/severity"
func (n *System_Logging_File_Selector_SeverityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/severity"
func (n *System_Logging_File_Selector_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/severity"
func (n *System_Logging_File_Selector_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/severity"
func (n *System_Logging_File_Selector_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_SelectorPath represents the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPath struct {
	*ygnmi.NodePath
}

// System_Logging_File_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_File_SelectorPathMap represents the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_File_SelectorPathMapAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPathMapAny struct {
	*ygnmi.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/facility"
func (n *System_Logging_File_SelectorPath) Facility() *System_Logging_File_Selector_FacilityPath {
	ps := &System_Logging_File_Selector_FacilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/facility"
func (n *System_Logging_File_SelectorPathAny) Facility() *System_Logging_File_Selector_FacilityPathAny {
	ps := &System_Logging_File_Selector_FacilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/severity"
func (n *System_Logging_File_SelectorPath) Severity() *System_Logging_File_Selector_SeverityPath {
	ps := &System_Logging_File_Selector_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/severity"
func (n *System_Logging_File_SelectorPathAny) Severity() *System_Logging_File_Selector_SeverityPathAny {
	ps := &System_Logging_File_Selector_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPath) State() ygnmi.SingletonQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// System_Logging_RemoteServer_HostPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/host YANG schema element.
type System_Logging_RemoteServer_HostPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_HostPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/host YANG schema element.
type System_Logging_RemoteServer_HostPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/host"
func (n *System_Logging_RemoteServer_HostPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/host"
func (n *System_Logging_RemoteServer_HostPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServer_HostPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServer_HostPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_NetworkInstancePath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/network-instance YANG schema element.
type System_Logging_RemoteServer_NetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/network-instance YANG schema element.
type System_Logging_RemoteServer_NetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_RemotePortPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_RemotePortPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_SourceAddressPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServerPath represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPath struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServerPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServerPathMap represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServerPathMapAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPathMapAny struct {
	*ygnmi.NodePath
}

// Host (leaf): IP address or hostname of the remote log server
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/host"
func (n *System_Logging_RemoteServerPath) Host() *System_Logging_RemoteServer_HostPath {
	ps := &System_Logging_RemoteServer_HostPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Host (leaf): IP address or hostname of the remote log server
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/host"
func (n *System_Logging_RemoteServerPathAny) Host() *System_Logging_RemoteServer_HostPathAny {
	ps := &System_Logging_RemoteServer_HostPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance used to reach the log server.  If no
// instance is specified, DEFAULT_INSTANCE is used.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/network-instance"
func (n *System_Logging_RemoteServerPath) NetworkInstance() *System_Logging_RemoteServer_NetworkInstancePath {
	ps := &System_Logging_RemoteServer_NetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance used to reach the log server.  If no
// instance is specified, DEFAULT_INSTANCE is used.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/network-instance"
func (n *System_Logging_RemoteServerPathAny) NetworkInstance() *System_Logging_RemoteServer_NetworkInstancePathAny {
	ps := &System_Logging_RemoteServer_NetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/remote-port"
func (n *System_Logging_RemoteServerPath) RemotePort() *System_Logging_RemoteServer_RemotePortPath {
	ps := &System_Logging_RemoteServer_RemotePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/remote-port"
func (n *System_Logging_RemoteServerPathAny) RemotePort() *System_Logging_RemoteServer_RemotePortPathAny {
	ps := &System_Logging_RemoteServer_RemotePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
func (n *System_Logging_RemoteServerPath) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	ps := &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
func (n *System_Logging_RemoteServerPathAny) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	ps := &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// WithFacility sets System_Logging_RemoteServer_SelectorPathAny's key "facility" to the specified value.
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
func (n *System_Logging_RemoteServer_SelectorPathAny) WithFacility(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "facility", Facility)
	return n
}

// WithSeverity sets System_Logging_RemoteServer_SelectorPathAny's key "severity" to the specified value.
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServer_SelectorPathAny) WithSeverity(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "severity", Severity)
	return n
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPath {
	ps := &System_Logging_RemoteServer_SelectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	ps := &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
func (n *System_Logging_RemoteServerPath) SelectorMap() *System_Logging_RemoteServer_SelectorPathMap {
	ps := &System_Logging_RemoteServer_SelectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
func (n *System_Logging_RemoteServerPathAny) SelectorMap() *System_Logging_RemoteServer_SelectorPathMapAny {
	ps := &System_Logging_RemoteServer_SelectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SourceAddress (leaf): Source IP address for packets to the log server
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/source-address"
func (n *System_Logging_RemoteServerPath) SourceAddress() *System_Logging_RemoteServer_SourceAddressPath {
	ps := &System_Logging_RemoteServer_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IP address for packets to the log server
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/source-address"
func (n *System_Logging_RemoteServerPathAny) SourceAddress() *System_Logging_RemoteServer_SourceAddressPathAny {
	ps := &System_Logging_RemoteServer_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPath) State() ygnmi.SingletonQuery[*oc.System_Logging_RemoteServer] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_RemoteServer](
		"System_Logging_RemoteServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_RemoteServer] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_RemoteServer](
		"System_Logging_RemoteServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_RemoteServer] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_RemoteServer](
		"System_Logging_RemoteServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_RemoteServer] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_RemoteServer](
		"System_Logging_RemoteServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Logging_RemoteServer] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Logging_RemoteServer](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Logging_RemoteServer, bool) {
			ret := gs.(*oc.System_Logging).RemoteServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:remote-servers"},
			PostRelPath: []string{"openconfig-system:remote-server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Logging_RemoteServer] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Logging_RemoteServer](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Logging_RemoteServer, bool) {
			ret := gs.(*oc.System_Logging).RemoteServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:remote-servers"},
			PostRelPath: []string{"openconfig-system:remote-server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Logging_RemoteServer] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Logging_RemoteServer](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Logging_RemoteServer, bool) {
			ret := gs.(*oc.System_Logging).RemoteServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:remote-servers"},
			PostRelPath: []string{"openconfig-system:remote-server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Logging_RemoteServer] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Logging_RemoteServer](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Logging_RemoteServer, bool) {
			ret := gs.(*oc.System_Logging).RemoteServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:remote-servers"},
			PostRelPath: []string{"openconfig-system:remote-server"},
		},
	)
}

// System_Logging_RemoteServer_Selector_FacilityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/state/facility"
func (n *System_Logging_RemoteServer_Selector_FacilityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/state/facility"
func (n *System_Logging_RemoteServer_Selector_FacilityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/config/facility"
func (n *System_Logging_RemoteServer_Selector_FacilityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/config/facility"
func (n *System_Logging_RemoteServer_Selector_FacilityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_Selector_SeverityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/state/severity"
func (n *System_Logging_RemoteServer_Selector_SeverityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/state/severity"
func (n *System_Logging_RemoteServer_Selector_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/config/severity"
func (n *System_Logging_RemoteServer_Selector_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/config/severity"
func (n *System_Logging_RemoteServer_Selector_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_SelectorPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPath struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServer_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServer_SelectorPathMap represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServer_SelectorPathMapAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPathMapAny struct {
	*ygnmi.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/*/facility"
func (n *System_Logging_RemoteServer_SelectorPath) Facility() *System_Logging_RemoteServer_Selector_FacilityPath {
	ps := &System_Logging_RemoteServer_Selector_FacilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/*/facility"
func (n *System_Logging_RemoteServer_SelectorPathAny) Facility() *System_Logging_RemoteServer_Selector_FacilityPathAny {
	ps := &System_Logging_RemoteServer_Selector_FacilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/*/severity"
func (n *System_Logging_RemoteServer_SelectorPath) Severity() *System_Logging_RemoteServer_Selector_SeverityPath {
	ps := &System_Logging_RemoteServer_Selector_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/*/severity"
func (n *System_Logging_RemoteServer_SelectorPathAny) Severity() *System_Logging_RemoteServer_Selector_SeverityPathAny {
	ps := &System_Logging_RemoteServer_Selector_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPath) State() ygnmi.SingletonQuery[*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// System_Logging_VtyPath represents the /openconfig-system/system/logging/vty YANG schema element.
type System_Logging_VtyPath struct {
	*ygnmi.NodePath
}

// System_Logging_VtyPathAny represents the wildcard version of the /openconfig-system/system/logging/vty YANG schema element.
type System_Logging_VtyPathAny struct {
	*ygnmi.NodePath
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
func (n *System_Logging_VtyPath) SelectorAny() *System_Logging_Vty_SelectorPathAny {
	ps := &System_Logging_Vty_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
func (n *System_Logging_VtyPathAny) SelectorAny() *System_Logging_Vty_SelectorPathAny {
	ps := &System_Logging_Vty_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// WithFacility sets System_Logging_Vty_SelectorPathAny's key "facility" to the specified value.
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
func (n *System_Logging_Vty_SelectorPathAny) WithFacility(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Vty_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "facility", Facility)
	return n
}

// WithSeverity sets System_Logging_Vty_SelectorPathAny's key "severity" to the specified value.
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_Vty_SelectorPathAny) WithSeverity(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Vty_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "severity", Severity)
	return n
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Vty_SelectorPath {
	ps := &System_Logging_Vty_SelectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Vty_SelectorPathAny {
	ps := &System_Logging_Vty_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
func (n *System_Logging_VtyPath) SelectorMap() *System_Logging_Vty_SelectorPathMap {
	ps := &System_Logging_Vty_SelectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
func (n *System_Logging_VtyPathAny) SelectorMap() *System_Logging_Vty_SelectorPathMapAny {
	ps := &System_Logging_Vty_SelectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_VtyPath) State() ygnmi.SingletonQuery[*oc.System_Logging_Vty] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_Vty](
		"System_Logging_Vty",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_VtyPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_Vty] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Vty](
		"System_Logging_Vty",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_VtyPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_Vty] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_Vty](
		"System_Logging_Vty",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_VtyPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_Vty] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Vty](
		"System_Logging_Vty",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Vty_Selector_FacilityPath represents the /openconfig-system/system/logging/vty/selectors/selector/state/facility YANG schema element.
type System_Logging_Vty_Selector_FacilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_Vty_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/vty/selectors/selector/state/facility YANG schema element.
type System_Logging_Vty_Selector_FacilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/state/facility"
func (n *System_Logging_Vty_Selector_FacilityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Vty_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/state/facility"
func (n *System_Logging_Vty_Selector_FacilityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Vty_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/config/facility"
func (n *System_Logging_Vty_Selector_FacilityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Vty_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/config/facility"
func (n *System_Logging_Vty_Selector_FacilityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Vty_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Vty_Selector_SeverityPath represents the /openconfig-system/system/logging/vty/selectors/selector/state/severity YANG schema element.
type System_Logging_Vty_Selector_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_Vty_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/vty/selectors/selector/state/severity YANG schema element.
type System_Logging_Vty_Selector_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/state/severity"
func (n *System_Logging_Vty_Selector_SeverityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Vty_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/state/severity"
func (n *System_Logging_Vty_Selector_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Vty_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/config/severity"
func (n *System_Logging_Vty_Selector_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Vty_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/config/severity"
func (n *System_Logging_Vty_Selector_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Vty_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Vty_SelectorPath represents the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_SelectorPath struct {
	*ygnmi.NodePath
}

// System_Logging_Vty_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_SelectorPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_Vty_SelectorPathMap represents the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_SelectorPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_Vty_SelectorPathMapAny represents the wildcard version of the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_SelectorPathMapAny struct {
	*ygnmi.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/*/facility"
func (n *System_Logging_Vty_SelectorPath) Facility() *System_Logging_Vty_Selector_FacilityPath {
	ps := &System_Logging_Vty_Selector_FacilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/*/facility"
func (n *System_Logging_Vty_SelectorPathAny) Facility() *System_Logging_Vty_Selector_FacilityPathAny {
	ps := &System_Logging_Vty_Selector_FacilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/*/severity"
func (n *System_Logging_Vty_SelectorPath) Severity() *System_Logging_Vty_Selector_SeverityPath {
	ps := &System_Logging_Vty_Selector_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/*/severity"
func (n *System_Logging_Vty_SelectorPathAny) Severity() *System_Logging_Vty_Selector_SeverityPathAny {
	ps := &System_Logging_Vty_Selector_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPath) State() ygnmi.SingletonQuery[*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector, bool) {
			ret := gs.(*oc.System_Logging_Vty).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector, bool) {
			ret := gs.(*oc.System_Logging_Vty).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector, bool) {
			ret := gs.(*oc.System_Logging_Vty).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector, bool) {
			ret := gs.(*oc.System_Logging_Vty).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// System_MacAddress_RoutingMacPath represents the /openconfig-system/system/mac-address/state/routing-mac YANG schema element.
type System_MacAddress_RoutingMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MacAddress_RoutingMacPathAny represents the wildcard version of the /openconfig-system/system/mac-address/state/routing-mac YANG schema element.
type System_MacAddress_RoutingMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/routing-mac"
//	Path from root:       "/system/mac-address/state/routing-mac"
func (n *System_MacAddress_RoutingMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_MacAddress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "routing-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MacAddress).RoutingMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MacAddress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/routing-mac"
//	Path from root:       "/system/mac-address/state/routing-mac"
func (n *System_MacAddress_RoutingMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_MacAddress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "routing-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MacAddress).RoutingMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MacAddress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/routing-mac"
//	Path from root:       "/system/mac-address/config/routing-mac"
func (n *System_MacAddress_RoutingMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_MacAddress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "routing-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MacAddress).RoutingMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MacAddress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/routing-mac"
//	Path from root:       "/system/mac-address/config/routing-mac"
func (n *System_MacAddress_RoutingMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_MacAddress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "routing-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MacAddress).RoutingMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MacAddress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MacAddressPath represents the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddressPath struct {
	*ygnmi.NodePath
}

// System_MacAddressPathAny represents the wildcard version of the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddressPathAny struct {
	*ygnmi.NodePath
}

// RoutingMac (leaf): Any packets destined to this MAC address must be sent through the
// routing pipeline by the system. This MAC address is used to identify
// routed packets in addition to any other MAC addresses that the system
// may already have been using to perform routing.
//
// It is not expected that this MAC address will be used as the
// source MAC address of any routed packet, as the source MAC address of
// any packets generated by the system, or a MAC address used in ARP
// response. This MAC address may not be allocated from the block of
// MAC address that system owns. For instance, it's allocation could
// be managed by an external controller.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/routing-mac"
//	Path from root:       "/system/mac-address/*/routing-mac"
func (n *System_MacAddressPath) RoutingMac() *System_MacAddress_RoutingMacPath {
	ps := &System_MacAddress_RoutingMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "routing-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RoutingMac (leaf): Any packets destined to this MAC address must be sent through the
// routing pipeline by the system. This MAC address is used to identify
// routed packets in addition to any other MAC addresses that the system
// may already have been using to perform routing.
//
// It is not expected that this MAC address will be used as the
// source MAC address of any routed packet, as the source MAC address of
// any packets generated by the system, or a MAC address used in ARP
// response. This MAC address may not be allocated from the block of
// MAC address that system owns. For instance, it's allocation could
// be managed by an external controller.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/routing-mac"
//	Path from root:       "/system/mac-address/*/routing-mac"
func (n *System_MacAddressPathAny) RoutingMac() *System_MacAddress_RoutingMacPathAny {
	ps := &System_MacAddress_RoutingMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "routing-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MacAddressPath) State() ygnmi.SingletonQuery[*oc.System_MacAddress] {
	return ygnmi.NewSingletonQuery[*oc.System_MacAddress](
		"System_MacAddress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MacAddressPathAny) State() ygnmi.WildcardQuery[*oc.System_MacAddress] {
	return ygnmi.NewWildcardQuery[*oc.System_MacAddress](
		"System_MacAddress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MacAddressPath) Config() ygnmi.ConfigQuery[*oc.System_MacAddress] {
	return ygnmi.NewConfigQuery[*oc.System_MacAddress](
		"System_MacAddress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MacAddressPathAny) Config() ygnmi.WildcardQuery[*oc.System_MacAddress] {
	return ygnmi.NewWildcardQuery[*oc.System_MacAddress](
		"System_MacAddress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_FreePath represents the /openconfig-system/system/memory/state/free YANG schema element.
type System_Memory_FreePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_FreePathAny represents the wildcard version of the /openconfig-system/system/memory/state/free YANG schema element.
type System_Memory_FreePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/free"
//	Path from root:       "/system/memory/state/free"
func (n *System_Memory_FreePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/free"
//	Path from root:       "/system/memory/state/free"
func (n *System_Memory_FreePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_PhysicalPath represents the /openconfig-system/system/memory/state/physical YANG schema element.
type System_Memory_PhysicalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_PhysicalPathAny represents the wildcard version of the /openconfig-system/system/memory/state/physical YANG schema element.
type System_Memory_PhysicalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/physical"
//	Path from root:       "/system/memory/state/physical"
func (n *System_Memory_PhysicalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "physical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Physical
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/physical"
//	Path from root:       "/system/memory/state/physical"
func (n *System_Memory_PhysicalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "physical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Physical
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_ReservedPath represents the /openconfig-system/system/memory/state/reserved YANG schema element.
type System_Memory_ReservedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_ReservedPathAny represents the wildcard version of the /openconfig-system/system/memory/state/reserved YANG schema element.
type System_Memory_ReservedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/reserved"
//	Path from root:       "/system/memory/state/reserved"
func (n *System_Memory_ReservedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reserved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Reserved
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/reserved"
//	Path from root:       "/system/memory/state/reserved"
func (n *System_Memory_ReservedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reserved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Reserved
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_UsedPath represents the /openconfig-system/system/memory/state/used YANG schema element.
type System_Memory_UsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_UsedPathAny represents the wildcard version of the /openconfig-system/system/memory/state/used YANG schema element.
type System_Memory_UsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/used"
//	Path from root:       "/system/memory/state/used"
func (n *System_Memory_UsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/used"
//	Path from root:       "/system/memory/state/used"
func (n *System_Memory_UsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MemoryPath represents the /openconfig-system/system/memory YANG schema element.
type System_MemoryPath struct {
	*ygnmi.NodePath
}

// System_MemoryPathAny represents the wildcard version of the /openconfig-system/system/memory YANG schema element.
type System_MemoryPathAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters for tracking system memory errors
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/memory/state/counters"
func (n *System_MemoryPath) Counters() *System_Memory_CountersPath {
	ps := &System_Memory_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters for tracking system memory errors
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/memory/state/counters"
func (n *System_MemoryPathAny) Counters() *System_Memory_CountersPathAny {
	ps := &System_Memory_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Free (leaf): Memory that is not used and is available for allocation.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/free"
//	Path from root:       "/system/memory/state/free"
func (n *System_MemoryPath) Free() *System_Memory_FreePath {
	ps := &System_Memory_FreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Memory that is not used and is available for allocation.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/free"
//	Path from root:       "/system/memory/state/free"
func (n *System_MemoryPathAny) Free() *System_Memory_FreePathAny {
	ps := &System_Memory_FreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Physical (leaf): Reports the total physical memory available on the
// system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/physical"
//	Path from root:       "/system/memory/state/physical"
func (n *System_MemoryPath) Physical() *System_Memory_PhysicalPath {
	ps := &System_Memory_PhysicalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "physical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Physical (leaf): Reports the total physical memory available on the
// system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/physical"
//	Path from root:       "/system/memory/state/physical"
func (n *System_MemoryPathAny) Physical() *System_Memory_PhysicalPathAny {
	ps := &System_Memory_PhysicalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "physical"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reserved (leaf): Memory reserved for system use
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/reserved"
//	Path from root:       "/system/memory/state/reserved"
func (n *System_MemoryPath) Reserved() *System_Memory_ReservedPath {
	ps := &System_Memory_ReservedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reserved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reserved (leaf): Memory reserved for system use
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/reserved"
//	Path from root:       "/system/memory/state/reserved"
func (n *System_MemoryPathAny) Reserved() *System_Memory_ReservedPathAny {
	ps := &System_Memory_ReservedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reserved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Memory that has been used and not available for allocation.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/used"
//	Path from root:       "/system/memory/state/used"
func (n *System_MemoryPath) Used() *System_Memory_UsedPath {
	ps := &System_Memory_UsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Memory that has been used and not available for allocation.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/used"
//	Path from root:       "/system/memory/state/used"
func (n *System_MemoryPathAny) Used() *System_Memory_UsedPathAny {
	ps := &System_Memory_UsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MemoryPath) State() ygnmi.SingletonQuery[*oc.System_Memory] {
	return ygnmi.NewSingletonQuery[*oc.System_Memory](
		"System_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MemoryPathAny) State() ygnmi.WildcardQuery[*oc.System_Memory] {
	return ygnmi.NewWildcardQuery[*oc.System_Memory](
		"System_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MemoryPath) Config() ygnmi.ConfigQuery[*oc.System_Memory] {
	return ygnmi.NewConfigQuery[*oc.System_Memory](
		"System_Memory",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MemoryPathAny) Config() ygnmi.WildcardQuery[*oc.System_Memory] {
	return ygnmi.NewWildcardQuery[*oc.System_Memory](
		"System_Memory",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_Counters_CorrectableEccErrorsPath represents the /openconfig-system/system/memory/state/counters/correctable-ecc-errors YANG schema element.
type System_Memory_Counters_CorrectableEccErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_Counters_CorrectableEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/correctable-ecc-errors YANG schema element.
type System_Memory_Counters_CorrectableEccErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "correctable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_Counters_CorrectableEccErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"correctable-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).CorrectableEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "correctable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_Counters_CorrectableEccErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"correctable-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).CorrectableEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_Counters_TotalEccErrorsPath represents the /openconfig-system/system/memory/state/counters/total-ecc-errors YANG schema element.
type System_Memory_Counters_TotalEccErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_Counters_TotalEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/total-ecc-errors YANG schema element.
type System_Memory_Counters_TotalEccErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "total-ecc-errors"
//	Path from root:       "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_Counters_TotalEccErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).TotalEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "total-ecc-errors"
//	Path from root:       "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_Counters_TotalEccErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).TotalEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_Counters_UncorrectableEccErrorsPath represents the /openconfig-system/system/memory/state/counters/uncorrectable-ecc-errors YANG schema element.
type System_Memory_Counters_UncorrectableEccErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_Counters_UncorrectableEccErrorsPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters/uncorrectable-ecc-errors YANG schema element.
type System_Memory_Counters_UncorrectableEccErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "uncorrectable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_Counters_UncorrectableEccErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).UncorrectableEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "uncorrectable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_Counters_UncorrectableEccErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory_Counters).UncorrectableEccErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_CountersPath represents the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_CountersPath struct {
	*ygnmi.NodePath
}

// System_Memory_CountersPathAny represents the wildcard version of the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_CountersPathAny struct {
	*ygnmi.NodePath
}

// CorrectableEccErrors (leaf): Count of correctable ECC errors. Systems with ECC memory
// are capable of correcting Single-bit ECC errors.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "correctable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_CountersPath) CorrectableEccErrors() *System_Memory_Counters_CorrectableEccErrorsPath {
	ps := &System_Memory_Counters_CorrectableEccErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"correctable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CorrectableEccErrors (leaf): Count of correctable ECC errors. Systems with ECC memory
// are capable of correcting Single-bit ECC errors.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "correctable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/correctable-ecc-errors"
func (n *System_Memory_CountersPathAny) CorrectableEccErrors() *System_Memory_Counters_CorrectableEccErrorsPathAny {
	ps := &System_Memory_Counters_CorrectableEccErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"correctable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEccErrors (leaf): Count of total ECC errors, this includes both correctable
// and uncorrectable ECC errors.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "total-ecc-errors"
//	Path from root:       "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_CountersPath) TotalEccErrors() *System_Memory_Counters_TotalEccErrorsPath {
	ps := &System_Memory_Counters_TotalEccErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEccErrors (leaf): Count of total ECC errors, this includes both correctable
// and uncorrectable ECC errors.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "total-ecc-errors"
//	Path from root:       "/system/memory/state/counters/total-ecc-errors"
func (n *System_Memory_CountersPathAny) TotalEccErrors() *System_Memory_Counters_TotalEccErrorsPathAny {
	ps := &System_Memory_Counters_TotalEccErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UncorrectableEccErrors (leaf): Count of uncorrectable ECC errors. Systems with ECC
// memory are capable of detecting multi-bit ECC errors,
// but cannot correct them.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "uncorrectable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_CountersPath) UncorrectableEccErrors() *System_Memory_Counters_UncorrectableEccErrorsPath {
	ps := &System_Memory_Counters_UncorrectableEccErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UncorrectableEccErrors (leaf): Count of uncorrectable ECC errors. Systems with ECC
// memory are capable of detecting multi-bit ECC errors,
// but cannot correct them.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "uncorrectable-ecc-errors"
//	Path from root:       "/system/memory/state/counters/uncorrectable-ecc-errors"
func (n *System_Memory_CountersPathAny) UncorrectableEccErrors() *System_Memory_Counters_UncorrectableEccErrorsPathAny {
	ps := &System_Memory_Counters_UncorrectableEccErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"uncorrectable-ecc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Memory_CountersPath) State() ygnmi.SingletonQuery[*oc.System_Memory_Counters] {
	return ygnmi.NewSingletonQuery[*oc.System_Memory_Counters](
		"System_Memory_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Memory_CountersPathAny) State() ygnmi.WildcardQuery[*oc.System_Memory_Counters] {
	return ygnmi.NewWildcardQuery[*oc.System_Memory_Counters](
		"System_Memory_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Messages_SeverityPath represents the /openconfig-system/system/messages/state/severity YANG schema element.
type System_Messages_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Messages_SeverityPathAny represents the wildcard version of the /openconfig-system/system/messages/state/severity YANG schema element.
type System_Messages_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/messages/state/severity"
func (n *System_Messages_SeverityPath) State() ygnmi.SingletonQuery[oc.E_Messages_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_Messages_SyslogSeverity](
		"System_Messages",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Messages).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/messages/state/severity"
func (n *System_Messages_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_Messages_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_Messages_SyslogSeverity](
		"System_Messages",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Messages).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/messages/config/severity"
func (n *System_Messages_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_Messages_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_Messages_SyslogSeverity](
		"System_Messages",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Messages).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/messages/config/severity"
func (n *System_Messages_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_Messages_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_Messages_SyslogSeverity](
		"System_Messages",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Messages).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MessagesPath represents the /openconfig-system/system/messages YANG schema element.
type System_MessagesPath struct {
	*ygnmi.NodePath
}

// System_MessagesPathAny represents the wildcard version of the /openconfig-system/system/messages YANG schema element.
type System_MessagesPathAny struct {
	*ygnmi.NodePath
}

// DebugServiceAny (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
func (n *System_MessagesPath) DebugServiceAny() *System_Messages_DebugServicePathAny {
	ps := &System_Messages_DebugServicePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
	return ps
}

// DebugServiceAny (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
func (n *System_MessagesPathAny) DebugServiceAny() *System_Messages_DebugServicePathAny {
	ps := &System_Messages_DebugServicePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": "*"},
			n,
		),
	}
	return ps
}

// DebugService (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
//
//	Service: oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPath) DebugService(Service oc.E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePath {
	ps := &System_Messages_DebugServicePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
	return ps
}

// DebugService (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
//
//	Service: oc.E_Messages_DEBUG_SERVICE
func (n *System_MessagesPathAny) DebugService(Service oc.E_Messages_DEBUG_SERVICE) *System_Messages_DebugServicePathAny {
	ps := &System_Messages_DebugServicePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries", "debug-service"},
			map[string]interface{}{"service": Service},
			n,
		),
	}
	return ps
}

// DebugServiceMap (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
func (n *System_MessagesPath) DebugServiceMap() *System_Messages_DebugServicePathMap {
	ps := &System_Messages_DebugServicePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DebugServiceMap (list): List of debugging entries.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "debug-entries/debug-service"
//	Path from root:       "/system/messages/debug-entries/debug-service"
func (n *System_MessagesPathAny) DebugServiceMap() *System_Messages_DebugServicePathMapAny {
	ps := &System_Messages_DebugServicePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"debug-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Message (container): Syslog messages the client is Subscribing to. This is all
// messages currently configured to be sent according to
// syslog-severity.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/message"
//	Path from root:       "/system/messages/state/message"
func (n *System_MessagesPath) Message() *System_Messages_MessagePath {
	ps := &System_Messages_MessagePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "message"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Message (container): Syslog messages the client is Subscribing to. This is all
// messages currently configured to be sent according to
// syslog-severity.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/message"
//	Path from root:       "/system/messages/state/message"
func (n *System_MessagesPathAny) Message() *System_Messages_MessagePathAny {
	ps := &System_Messages_MessagePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "message"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/messages/*/severity"
func (n *System_MessagesPath) Severity() *System_Messages_SeverityPath {
	ps := &System_Messages_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) are sent over the RPC.
//
// This is analogous to differentiating which severity is to be
// sent to legacy Syslog servers, as opposed to local buffer or
// files.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/messages/*/severity"
func (n *System_MessagesPathAny) Severity() *System_Messages_SeverityPathAny {
	ps := &System_Messages_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MessagesPath) State() ygnmi.SingletonQuery[*oc.System_Messages] {
	return ygnmi.NewSingletonQuery[*oc.System_Messages](
		"System_Messages",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MessagesPathAny) State() ygnmi.WildcardQuery[*oc.System_Messages] {
	return ygnmi.NewWildcardQuery[*oc.System_Messages](
		"System_Messages",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MessagesPath) Config() ygnmi.ConfigQuery[*oc.System_Messages] {
	return ygnmi.NewConfigQuery[*oc.System_Messages](
		"System_Messages",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MessagesPathAny) Config() ygnmi.WildcardQuery[*oc.System_Messages] {
	return ygnmi.NewWildcardQuery[*oc.System_Messages](
		"System_Messages",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Messages_DebugService_EnabledPath represents the /openconfig-system/system/messages/debug-entries/debug-service/state/enabled YANG schema element.
type System_Messages_DebugService_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Messages_DebugService_EnabledPathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/state/enabled YANG schema element.
type System_Messages_DebugService_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/state/enabled"
func (n *System_Messages_DebugService_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_Messages_DebugService",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/state/enabled"
func (n *System_Messages_DebugService_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Messages_DebugService",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/config/enabled"
func (n *System_Messages_DebugService_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_Messages_DebugService",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/config/enabled"
func (n *System_Messages_DebugService_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Messages_DebugService",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Messages_DebugService_ServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service/state/service YANG schema element.
type System_Messages_DebugService_ServicePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Messages_DebugService_ServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service/state/service YANG schema element.
type System_Messages_DebugService_ServicePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/state/service"
func (n *System_Messages_DebugService_ServicePath) State() ygnmi.SingletonQuery[oc.E_Messages_DEBUG_SERVICE] {
	return ygnmi.NewSingletonQuery[oc.E_Messages_DEBUG_SERVICE](
		"System_Messages_DebugService",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_DEBUG_SERVICE, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/state/service"
func (n *System_Messages_DebugService_ServicePathAny) State() ygnmi.WildcardQuery[oc.E_Messages_DEBUG_SERVICE] {
	return ygnmi.NewWildcardQuery[oc.E_Messages_DEBUG_SERVICE](
		"System_Messages_DebugService",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_DEBUG_SERVICE, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/config/service"
func (n *System_Messages_DebugService_ServicePath) Config() ygnmi.ConfigQuery[oc.E_Messages_DEBUG_SERVICE] {
	return ygnmi.NewConfigQuery[oc.E_Messages_DEBUG_SERVICE](
		"System_Messages_DebugService",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_DEBUG_SERVICE, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/config/service"
func (n *System_Messages_DebugService_ServicePathAny) Config() ygnmi.WildcardQuery[oc.E_Messages_DEBUG_SERVICE] {
	return ygnmi.NewWildcardQuery[oc.E_Messages_DEBUG_SERVICE](
		"System_Messages_DebugService",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Messages_DEBUG_SERVICE, bool) {
			ret := gs.(*oc.System_Messages_DebugService).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages_DebugService) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Messages_DebugServicePath represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePath struct {
	*ygnmi.NodePath
}

// System_Messages_DebugServicePathAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePathAny struct {
	*ygnmi.NodePath
}

// System_Messages_DebugServicePathMap represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePathMap struct {
	*ygnmi.NodePath
}

// System_Messages_DebugServicePathMapAny represents the wildcard version of the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugServicePathMapAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): Enable and disable debugging.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/*/enabled"
func (n *System_Messages_DebugServicePath) Enabled() *System_Messages_DebugService_EnabledPath {
	ps := &System_Messages_DebugService_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enable and disable debugging.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enabled"
//	Path from root:       "/system/messages/debug-entries/debug-service/*/enabled"
func (n *System_Messages_DebugServicePathAny) Enabled() *System_Messages_DebugService_EnabledPathAny {
	ps := &System_Messages_DebugService_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/*/service"
func (n *System_Messages_DebugServicePath) Service() *System_Messages_DebugService_ServicePath {
	ps := &System_Messages_DebugService_ServicePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "service"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Service (leaf): Enumeration of all services which can have debugging enabled.
// Vendors are to augment this base identity with their platform
// or OS specific debug options.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/service"
//	Path from root:       "/system/messages/debug-entries/debug-service/*/service"
func (n *System_Messages_DebugServicePathAny) Service() *System_Messages_DebugService_ServicePathAny {
	ps := &System_Messages_DebugService_ServicePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "service"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePath) State() ygnmi.SingletonQuery[*oc.System_Messages_DebugService] {
	return ygnmi.NewSingletonQuery[*oc.System_Messages_DebugService](
		"System_Messages_DebugService",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathAny) State() ygnmi.WildcardQuery[*oc.System_Messages_DebugService] {
	return ygnmi.NewWildcardQuery[*oc.System_Messages_DebugService](
		"System_Messages_DebugService",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePath) Config() ygnmi.ConfigQuery[*oc.System_Messages_DebugService] {
	return ygnmi.NewConfigQuery[*oc.System_Messages_DebugService](
		"System_Messages_DebugService",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathAny) Config() ygnmi.WildcardQuery[*oc.System_Messages_DebugService] {
	return ygnmi.NewWildcardQuery[*oc.System_Messages_DebugService](
		"System_Messages_DebugService",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathMap) State() ygnmi.SingletonQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService] {
	return ygnmi.NewSingletonQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService](
		"System_Messages",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService, bool) {
			ret := gs.(*oc.System_Messages).DebugService
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:debug-entries"},
			PostRelPath: []string{"openconfig-system:debug-service"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService] {
	return ygnmi.NewWildcardQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService](
		"System_Messages",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService, bool) {
			ret := gs.(*oc.System_Messages).DebugService
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:debug-entries"},
			PostRelPath: []string{"openconfig-system:debug-service"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathMap) Config() ygnmi.ConfigQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService] {
	return ygnmi.NewConfigQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService](
		"System_Messages",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService, bool) {
			ret := gs.(*oc.System_Messages).DebugService
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:debug-entries"},
			PostRelPath: []string{"openconfig-system:debug-service"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Messages_DebugServicePathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService] {
	return ygnmi.NewWildcardQuery[map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService](
		"System_Messages",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Messages_DEBUG_SERVICE]*oc.System_Messages_DebugService, bool) {
			ret := gs.(*oc.System_Messages).DebugService
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Messages) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:debug-entries"},
			PostRelPath: []string{"openconfig-system:debug-service"},
		},
	)
}

// System_Messages_MessagePath represents the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_MessagePath struct {
	*ygnmi.NodePath
}

// System_Messages_MessagePathAny represents the wildcard version of the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_MessagePathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_MessagePath) State() ygnmi.SingletonQuery[*oc.System_Messages_Message] {
	return ygnmi.NewSingletonQuery[*oc.System_Messages_Message](
		"System_Messages_Message",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Messages_MessagePathAny) State() ygnmi.WildcardQuery[*oc.System_Messages_Message] {
	return ygnmi.NewWildcardQuery[*oc.System_Messages_Message](
		"System_Messages_Message",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPoint_AvailablePath represents the /openconfig-system/system/mount-points/mount-point/state/available YANG schema element.
type System_MountPoint_AvailablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MountPoint_AvailablePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/available YANG schema element.
type System_MountPoint_AvailablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/available"
//	Path from root:       "/system/mount-points/mount-point/state/available"
func (n *System_MountPoint_AvailablePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Available
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/available"
//	Path from root:       "/system/mount-points/mount-point/state/available"
func (n *System_MountPoint_AvailablePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Available
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPoint_NamePath represents the /openconfig-system/system/mount-points/mount-point/state/name YANG schema element.
type System_MountPoint_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MountPoint_NamePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/name YANG schema element.
type System_MountPoint_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/mount-points/mount-point/state/name"
func (n *System_MountPoint_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/mount-points/mount-point/state/name"
func (n *System_MountPoint_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *System_MountPoint_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_MountPoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *System_MountPoint_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_MountPoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPoint_SizePath represents the /openconfig-system/system/mount-points/mount-point/state/size YANG schema element.
type System_MountPoint_SizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MountPoint_SizePathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/size YANG schema element.
type System_MountPoint_SizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/size"
//	Path from root:       "/system/mount-points/mount-point/state/size"
func (n *System_MountPoint_SizePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Size
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/size"
//	Path from root:       "/system/mount-points/mount-point/state/size"
func (n *System_MountPoint_SizePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Size
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPoint_StorageComponentPath represents the /openconfig-system/system/mount-points/mount-point/state/storage-component YANG schema element.
type System_MountPoint_StorageComponentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MountPoint_StorageComponentPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/storage-component YANG schema element.
type System_MountPoint_StorageComponentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/storage-component"
//	Path from root:       "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPoint_StorageComponentPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "storage-component"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).StorageComponent
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/storage-component"
//	Path from root:       "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPoint_StorageComponentPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "storage-component"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MountPoint).StorageComponent
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPoint_UtilizedPath represents the /openconfig-system/system/mount-points/mount-point/state/utilized YANG schema element.
type System_MountPoint_UtilizedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MountPoint_UtilizedPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point/state/utilized YANG schema element.
type System_MountPoint_UtilizedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/utilized"
//	Path from root:       "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPoint_UtilizedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "utilized"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Utilized
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/utilized"
//	Path from root:       "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPoint_UtilizedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_MountPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "utilized"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_MountPoint).Utilized
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MountPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MountPointPath represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPath struct {
	*ygnmi.NodePath
}

// System_MountPointPathAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPathAny struct {
	*ygnmi.NodePath
}

// System_MountPointPathMap represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPathMap struct {
	*ygnmi.NodePath
}

// System_MountPointPathMapAny represents the wildcard version of the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPointPathMapAny struct {
	*ygnmi.NodePath
}

// Available (leaf): The amount of unused space on the filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/available"
//	Path from root:       "/system/mount-points/mount-point/state/available"
func (n *System_MountPointPath) Available() *System_MountPoint_AvailablePath {
	ps := &System_MountPoint_AvailablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Available (leaf): The amount of unused space on the filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/available"
//	Path from root:       "/system/mount-points/mount-point/state/available"
func (n *System_MountPointPathAny) Available() *System_MountPoint_AvailablePathAny {
	ps := &System_MountPoint_AvailablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Mount point name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/mount-points/mount-point/*/name"
func (n *System_MountPointPath) Name() *System_MountPoint_NamePath {
	ps := &System_MountPoint_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Mount point name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/mount-points/mount-point/*/name"
func (n *System_MountPointPathAny) Name() *System_MountPoint_NamePathAny {
	ps := &System_MountPoint_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): The total size of the initialised filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/size"
//	Path from root:       "/system/mount-points/mount-point/state/size"
func (n *System_MountPointPath) Size() *System_MountPoint_SizePath {
	ps := &System_MountPoint_SizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): The total size of the initialised filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/size"
//	Path from root:       "/system/mount-points/mount-point/state/size"
func (n *System_MountPointPathAny) Size() *System_MountPoint_SizePathAny {
	ps := &System_MountPoint_SizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StorageComponent (leaf): In the case that the filesystem that is mounted corresponds to a
// physical or logical component within the system, this leaf provides
// a reference to the hosting component within the /components
// hierarchy.
//
// The reference should be to the most specific component (e.g., if an
// entry for /dev/sda1 exists, then this should be referred to,
// otherwise a reference to /dev/sda may be provided.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/storage-component"
//	Path from root:       "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPointPath) StorageComponent() *System_MountPoint_StorageComponentPath {
	ps := &System_MountPoint_StorageComponentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "storage-component"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StorageComponent (leaf): In the case that the filesystem that is mounted corresponds to a
// physical or logical component within the system, this leaf provides
// a reference to the hosting component within the /components
// hierarchy.
//
// The reference should be to the most specific component (e.g., if an
// entry for /dev/sda1 exists, then this should be referred to,
// otherwise a reference to /dev/sda may be provided.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/storage-component"
//	Path from root:       "/system/mount-points/mount-point/state/storage-component"
func (n *System_MountPointPathAny) StorageComponent() *System_MountPoint_StorageComponentPathAny {
	ps := &System_MountPoint_StorageComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "storage-component"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Utilized (leaf): The amount of space currently in use on the filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/utilized"
//	Path from root:       "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPointPath) Utilized() *System_MountPoint_UtilizedPath {
	ps := &System_MountPoint_UtilizedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "utilized"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Utilized (leaf): The amount of space currently in use on the filesystem.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/utilized"
//	Path from root:       "/system/mount-points/mount-point/state/utilized"
func (n *System_MountPointPathAny) Utilized() *System_MountPoint_UtilizedPathAny {
	ps := &System_MountPoint_UtilizedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "utilized"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MountPointPath) State() ygnmi.SingletonQuery[*oc.System_MountPoint] {
	return ygnmi.NewSingletonQuery[*oc.System_MountPoint](
		"System_MountPoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MountPointPathAny) State() ygnmi.WildcardQuery[*oc.System_MountPoint] {
	return ygnmi.NewWildcardQuery[*oc.System_MountPoint](
		"System_MountPoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MountPointPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_MountPoint] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_MountPoint](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_MountPoint, bool) {
			ret := gs.(*oc.System).MountPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:mount-points"},
			PostRelPath: []string{"openconfig-system:mount-point"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MountPointPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_MountPoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_MountPoint](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_MountPoint, bool) {
			ret := gs.(*oc.System).MountPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:mount-points"},
			PostRelPath: []string{"openconfig-system:mount-point"},
		},
	)
}

// System_Ntp_AuthMismatchPath represents the /openconfig-system/system/ntp/state/auth-mismatch YANG schema element.
type System_Ntp_AuthMismatchPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_AuthMismatchPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/auth-mismatch YANG schema element.
type System_Ntp_AuthMismatchPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-mismatch"
//	Path from root:       "/system/ntp/state/auth-mismatch"
func (n *System_Ntp_AuthMismatchPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-mismatch"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Ntp).AuthMismatch
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-mismatch"
//	Path from root:       "/system/ntp/state/auth-mismatch"
func (n *System_Ntp_AuthMismatchPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-mismatch"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Ntp).AuthMismatch
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_EnableNtpAuthPath represents the /openconfig-system/system/ntp/state/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_EnableNtpAuthPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/enable-ntp-auth YANG schema element.
type System_Ntp_EnableNtpAuthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable-ntp-auth"
//	Path from root:       "/system/ntp/state/enable-ntp-auth"
func (n *System_Ntp_EnableNtpAuthPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ntp-auth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).EnableNtpAuth
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable-ntp-auth"
//	Path from root:       "/system/ntp/state/enable-ntp-auth"
func (n *System_Ntp_EnableNtpAuthPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-ntp-auth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).EnableNtpAuth
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable-ntp-auth"
//	Path from root:       "/system/ntp/config/enable-ntp-auth"
func (n *System_Ntp_EnableNtpAuthPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_Ntp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ntp-auth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).EnableNtpAuth
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable-ntp-auth"
//	Path from root:       "/system/ntp/config/enable-ntp-auth"
func (n *System_Ntp_EnableNtpAuthPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-ntp-auth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).EnableNtpAuth
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_EnabledPath represents the /openconfig-system/system/ntp/state/enabled YANG schema element.
type System_Ntp_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_EnabledPathAny represents the wildcard version of the /openconfig-system/system/ntp/state/enabled YANG schema element.
type System_Ntp_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/ntp/state/enabled"
func (n *System_Ntp_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enabled"
//	Path from root:       "/system/ntp/state/enabled"
func (n *System_Ntp_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enabled"
//	Path from root:       "/system/ntp/config/enabled"
func (n *System_Ntp_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_Ntp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enabled"
//	Path from root:       "/system/ntp/config/enabled"
func (n *System_Ntp_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_NtpPath represents the /openconfig-system/system/ntp YANG schema element.
type System_NtpPath struct {
	*ygnmi.NodePath
}

// System_NtpPathAny represents the wildcard version of the /openconfig-system/system/ntp YANG schema element.
type System_NtpPathAny struct {
	*ygnmi.NodePath
}

// AuthMismatch (leaf): Count of the number of NTP packets received that were not
// processed due to authentication mismatch.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-mismatch"
//	Path from root:       "/system/ntp/state/auth-mismatch"
func (n *System_NtpPath) AuthMismatch() *System_Ntp_AuthMismatchPath {
	ps := &System_Ntp_AuthMismatchPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auth-mismatch"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthMismatch (leaf): Count of the number of NTP packets received that were not
// processed due to authentication mismatch.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/auth-mismatch"
//	Path from root:       "/system/ntp/state/auth-mismatch"
func (n *System_NtpPathAny) AuthMismatch() *System_Ntp_AuthMismatchPathAny {
	ps := &System_Ntp_AuthMismatchPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auth-mismatch"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable-ntp-auth"
//	Path from root:       "/system/ntp/*/enable-ntp-auth"
func (n *System_NtpPath) EnableNtpAuth() *System_Ntp_EnableNtpAuthPath {
	ps := &System_Ntp_EnableNtpAuthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableNtpAuth (leaf): Enable or disable NTP authentication -- when enabled, the
// system will only use packets containing a trusted
// authentication key to synchronize the time.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable-ntp-auth"
//	Path from root:       "/system/ntp/*/enable-ntp-auth"
func (n *System_NtpPathAny) EnableNtpAuth() *System_Ntp_EnableNtpAuthPathAny {
	ps := &System_Ntp_EnableNtpAuthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-ntp-auth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enables and disables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enabled"
//	Path from root:       "/system/ntp/*/enabled"
func (n *System_NtpPath) Enabled() *System_Ntp_EnabledPath {
	ps := &System_Ntp_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enables and disables the NTP protocol and indicates that the system should
// attempt to synchronize the system clock with an NTP server
// from the servers defined in the 'ntp/server' list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enabled"
//	Path from root:       "/system/ntp/*/enabled"
func (n *System_NtpPathAny) Enabled() *System_Ntp_EnabledPathAny {
	ps := &System_Ntp_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NtpKeyAny (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
func (n *System_NtpPath) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	ps := &System_Ntp_NtpKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
	return ps
}

// NtpKeyAny (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
func (n *System_NtpPathAny) NtpKeyAny() *System_Ntp_NtpKeyPathAny {
	ps := &System_Ntp_NtpKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
	return ps
}

// NtpKey (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
//
//	KeyId: uint16
func (n *System_NtpPath) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPath {
	ps := &System_Ntp_NtpKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
	return ps
}

// NtpKey (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
//
//	KeyId: uint16
func (n *System_NtpPathAny) NtpKey(KeyId uint16) *System_Ntp_NtpKeyPathAny {
	ps := &System_Ntp_NtpKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys", "ntp-key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
	return ps
}

// NtpKeyMap (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
func (n *System_NtpPath) NtpKeyMap() *System_Ntp_NtpKeyPathMap {
	ps := &System_Ntp_NtpKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NtpKeyMap (list): List of NTP authentication keys
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp-keys/ntp-key"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key"
func (n *System_NtpPathAny) NtpKeyMap() *System_Ntp_NtpKeyPathMapAny {
	ps := &System_Ntp_NtpKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp-keys"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
func (n *System_NtpPath) ServerAny() *System_Ntp_ServerPathAny {
	ps := &System_Ntp_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// ServerAny (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
func (n *System_NtpPathAny) ServerAny() *System_Ntp_ServerPathAny {
	ps := &System_Ntp_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
//
//	Address: string
func (n *System_NtpPath) Server(Address string) *System_Ntp_ServerPath {
	ps := &System_Ntp_ServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// Server (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
//
//	Address: string
func (n *System_NtpPathAny) Server(Address string) *System_Ntp_ServerPathAny {
	ps := &System_Ntp_ServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers", "server"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
func (n *System_NtpPath) ServerMap() *System_Ntp_ServerPathMap {
	ps := &System_Ntp_ServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of NTP servers to use for system clock
// synchronization.  If '/system/ntp/enabled'
// is 'true', then the system will attempt to
// contact and utilize the specified NTP servers.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/ntp/servers/server"
func (n *System_NtpPathAny) ServerMap() *System_Ntp_ServerPathMapAny {
	ps := &System_Ntp_ServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_NtpPath) State() ygnmi.SingletonQuery[*oc.System_Ntp] {
	return ygnmi.NewSingletonQuery[*oc.System_Ntp](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_NtpPathAny) State() ygnmi.WildcardQuery[*oc.System_Ntp] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_NtpPath) Config() ygnmi.ConfigQuery[*oc.System_Ntp] {
	return ygnmi.NewConfigQuery[*oc.System_Ntp](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_NtpPathAny) Config() ygnmi.WildcardQuery[*oc.System_Ntp] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_NtpKey_KeyIdPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_NtpKey_KeyIdPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-id YANG schema element.
type System_Ntp_NtpKey_KeyIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-id"
func (n *System_Ntp_NtpKey_KeyIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-id"
func (n *System_Ntp_NtpKey_KeyIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-id"
func (n *System_Ntp_NtpKey_KeyIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-id"
func (n *System_Ntp_NtpKey_KeyIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_NtpKey_KeyTypePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_NtpKey_KeyTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-type YANG schema element.
type System_Ntp_NtpKey_KeyTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-type"
func (n *System_Ntp_NtpKey_KeyTypePath) State() ygnmi.SingletonQuery[oc.E_System_NTP_AUTH_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_System_NTP_AUTH_TYPE](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_System_NTP_AUTH_TYPE, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-type"
func (n *System_Ntp_NtpKey_KeyTypePathAny) State() ygnmi.WildcardQuery[oc.E_System_NTP_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_System_NTP_AUTH_TYPE](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_System_NTP_AUTH_TYPE, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-type"
func (n *System_Ntp_NtpKey_KeyTypePath) Config() ygnmi.ConfigQuery[oc.E_System_NTP_AUTH_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_System_NTP_AUTH_TYPE](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_System_NTP_AUTH_TYPE, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-type"
func (n *System_Ntp_NtpKey_KeyTypePathAny) Config() ygnmi.WildcardQuery[oc.E_System_NTP_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_System_NTP_AUTH_TYPE](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_System_NTP_AUTH_TYPE, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_NtpKey_KeyValuePath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_NtpKey_KeyValuePathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key/state/key-value YANG schema element.
type System_Ntp_NtpKey_KeyValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-value"
func (n *System_Ntp_NtpKey_KeyValuePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyValue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/state/key-value"
func (n *System_Ntp_NtpKey_KeyValuePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_NtpKey",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyValue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-value"
func (n *System_Ntp_NtpKey_KeyValuePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyValue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/config/key-value"
func (n *System_Ntp_NtpKey_KeyValuePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_NtpKey",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_NtpKey).KeyValue
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_NtpKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_NtpKeyPath represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPath struct {
	*ygnmi.NodePath
}

// System_Ntp_NtpKeyPathAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPathAny struct {
	*ygnmi.NodePath
}

// System_Ntp_NtpKeyPathMap represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPathMap struct {
	*ygnmi.NodePath
}

// System_Ntp_NtpKeyPathMapAny represents the wildcard version of the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKeyPathMapAny struct {
	*ygnmi.NodePath
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-id"
func (n *System_Ntp_NtpKeyPath) KeyId() *System_Ntp_NtpKey_KeyIdPath {
	ps := &System_Ntp_NtpKey_KeyIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyId (leaf): Integer identifier used by the client and server to
// designate a secret key.  The client and server must use
// the same key id.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-id"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-id"
func (n *System_Ntp_NtpKeyPathAny) KeyId() *System_Ntp_NtpKey_KeyIdPathAny {
	ps := &System_Ntp_NtpKey_KeyIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyType (leaf): Encryption type used for the NTP authentication key
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-type"
func (n *System_Ntp_NtpKeyPath) KeyType() *System_Ntp_NtpKey_KeyTypePath {
	ps := &System_Ntp_NtpKey_KeyTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyType (leaf): Encryption type used for the NTP authentication key
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-type"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-type"
func (n *System_Ntp_NtpKeyPathAny) KeyType() *System_Ntp_NtpKey_KeyTypePathAny {
	ps := &System_Ntp_NtpKey_KeyTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyValue (leaf): NTP authentication key value
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-value"
func (n *System_Ntp_NtpKeyPath) KeyValue() *System_Ntp_NtpKey_KeyValuePath {
	ps := &System_Ntp_NtpKey_KeyValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyValue (leaf): NTP authentication key value
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/key-value"
//	Path from root:       "/system/ntp/ntp-keys/ntp-key/*/key-value"
func (n *System_Ntp_NtpKeyPathAny) KeyValue() *System_Ntp_NtpKey_KeyValuePathAny {
	ps := &System_Ntp_NtpKey_KeyValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPath) State() ygnmi.SingletonQuery[*oc.System_Ntp_NtpKey] {
	return ygnmi.NewSingletonQuery[*oc.System_Ntp_NtpKey](
		"System_Ntp_NtpKey",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathAny) State() ygnmi.WildcardQuery[*oc.System_Ntp_NtpKey] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp_NtpKey](
		"System_Ntp_NtpKey",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPath) Config() ygnmi.ConfigQuery[*oc.System_Ntp_NtpKey] {
	return ygnmi.NewConfigQuery[*oc.System_Ntp_NtpKey](
		"System_Ntp_NtpKey",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathAny) Config() ygnmi.WildcardQuery[*oc.System_Ntp_NtpKey] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp_NtpKey](
		"System_Ntp_NtpKey",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathMap) State() ygnmi.SingletonQuery[map[uint16]*oc.System_Ntp_NtpKey] {
	return ygnmi.NewSingletonQuery[map[uint16]*oc.System_Ntp_NtpKey](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.System_Ntp_NtpKey, bool) {
			ret := gs.(*oc.System_Ntp).NtpKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:ntp-keys"},
			PostRelPath: []string{"openconfig-system:ntp-key"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathMapAny) State() ygnmi.WildcardQuery[map[uint16]*oc.System_Ntp_NtpKey] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.System_Ntp_NtpKey](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.System_Ntp_NtpKey, bool) {
			ret := gs.(*oc.System_Ntp).NtpKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:ntp-keys"},
			PostRelPath: []string{"openconfig-system:ntp-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathMap) Config() ygnmi.ConfigQuery[map[uint16]*oc.System_Ntp_NtpKey] {
	return ygnmi.NewConfigQuery[map[uint16]*oc.System_Ntp_NtpKey](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.System_Ntp_NtpKey, bool) {
			ret := gs.(*oc.System_Ntp).NtpKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:ntp-keys"},
			PostRelPath: []string{"openconfig-system:ntp-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_NtpKeyPathMapAny) Config() ygnmi.WildcardQuery[map[uint16]*oc.System_Ntp_NtpKey] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.System_Ntp_NtpKey](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.System_Ntp_NtpKey, bool) {
			ret := gs.(*oc.System_Ntp).NtpKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:ntp-keys"},
			PostRelPath: []string{"openconfig-system:ntp-key"},
		},
	)
}

// System_Ntp_Server_AddressPath represents the /openconfig-system/system/ntp/servers/server/state/address YANG schema element.
type System_Ntp_Server_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_AddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/address YANG schema element.
type System_Ntp_Server_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/address"
//	Path from root:       "/system/ntp/servers/server/state/address"
func (n *System_Ntp_Server_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/address"
//	Path from root:       "/system/ntp/servers/server/state/address"
func (n *System_Ntp_Server_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/address"
//	Path from root:       "/system/ntp/servers/server/config/address"
func (n *System_Ntp_Server_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/address"
//	Path from root:       "/system/ntp/servers/server/config/address"
func (n *System_Ntp_Server_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_AssociationTypePath represents the /openconfig-system/system/ntp/servers/server/state/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_AssociationTypePathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/association-type YANG schema element.
type System_Ntp_Server_AssociationTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/association-type"
//	Path from root:       "/system/ntp/servers/server/state/association-type"
func (n *System_Ntp_Server_AssociationTypePath) State() ygnmi.SingletonQuery[oc.E_Server_AssociationType] {
	return ygnmi.NewSingletonQuery[oc.E_Server_AssociationType](
		"System_Ntp_Server",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "association-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Server_AssociationType, bool) {
			ret := gs.(*oc.System_Ntp_Server).AssociationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/association-type"
//	Path from root:       "/system/ntp/servers/server/state/association-type"
func (n *System_Ntp_Server_AssociationTypePathAny) State() ygnmi.WildcardQuery[oc.E_Server_AssociationType] {
	return ygnmi.NewWildcardQuery[oc.E_Server_AssociationType](
		"System_Ntp_Server",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "association-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Server_AssociationType, bool) {
			ret := gs.(*oc.System_Ntp_Server).AssociationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/association-type"
//	Path from root:       "/system/ntp/servers/server/config/association-type"
func (n *System_Ntp_Server_AssociationTypePath) Config() ygnmi.ConfigQuery[oc.E_Server_AssociationType] {
	return ygnmi.NewConfigQuery[oc.E_Server_AssociationType](
		"System_Ntp_Server",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "association-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Server_AssociationType, bool) {
			ret := gs.(*oc.System_Ntp_Server).AssociationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/association-type"
//	Path from root:       "/system/ntp/servers/server/config/association-type"
func (n *System_Ntp_Server_AssociationTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Server_AssociationType] {
	return ygnmi.NewWildcardQuery[oc.E_Server_AssociationType](
		"System_Ntp_Server",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "association-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Server_AssociationType, bool) {
			ret := gs.(*oc.System_Ntp_Server).AssociationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_IburstPath represents the /openconfig-system/system/ntp/servers/server/state/iburst YANG schema element.
type System_Ntp_Server_IburstPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_IburstPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/iburst YANG schema element.
type System_Ntp_Server_IburstPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/iburst"
//	Path from root:       "/system/ntp/servers/server/state/iburst"
func (n *System_Ntp_Server_IburstPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "iburst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Iburst
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/iburst"
//	Path from root:       "/system/ntp/servers/server/state/iburst"
func (n *System_Ntp_Server_IburstPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "iburst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Iburst
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/iburst"
//	Path from root:       "/system/ntp/servers/server/config/iburst"
func (n *System_Ntp_Server_IburstPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "iburst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Iburst
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/iburst"
//	Path from root:       "/system/ntp/servers/server/config/iburst"
func (n *System_Ntp_Server_IburstPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "iburst"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Iburst
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_NetworkInstancePath represents the /openconfig-system/system/ntp/servers/server/state/network-instance YANG schema element.
type System_Ntp_Server_NetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/network-instance YANG schema element.
type System_Ntp_Server_NetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/ntp/servers/server/state/network-instance"
func (n *System_Ntp_Server_NetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/ntp/servers/server/state/network-instance"
func (n *System_Ntp_Server_NetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/ntp/servers/server/config/network-instance"
func (n *System_Ntp_Server_NetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/ntp/servers/server/config/network-instance"
func (n *System_Ntp_Server_NetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_OffsetPath represents the /openconfig-system/system/ntp/servers/server/state/offset YANG schema element.
type System_Ntp_Server_OffsetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_OffsetPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/offset YANG schema element.
type System_Ntp_Server_OffsetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/offset"
//	Path from root:       "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_Server_OffsetPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Ntp_Server).Offset
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/offset"
//	Path from root:       "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_Server_OffsetPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Ntp_Server).Offset
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_PollIntervalPath represents the /openconfig-system/system/ntp/servers/server/state/poll-interval YANG schema element.
type System_Ntp_Server_PollIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_PollIntervalPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/poll-interval YANG schema element.
type System_Ntp_Server_PollIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/poll-interval"
//	Path from root:       "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_Server_PollIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "poll-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Ntp_Server).PollInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/poll-interval"
//	Path from root:       "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_Server_PollIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "poll-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Ntp_Server).PollInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_PortPath represents the /openconfig-system/system/ntp/servers/server/state/port YANG schema element.
type System_Ntp_Server_PortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_PortPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/port YANG schema element.
type System_Ntp_Server_PortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/port"
//	Path from root:       "/system/ntp/servers/server/state/port"
func (n *System_Ntp_Server_PortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_Server).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/port"
//	Path from root:       "/system/ntp/servers/server/state/port"
func (n *System_Ntp_Server_PortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_Server).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/port"
//	Path from root:       "/system/ntp/servers/server/config/port"
func (n *System_Ntp_Server_PortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_Server).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/port"
//	Path from root:       "/system/ntp/servers/server/config/port"
func (n *System_Ntp_Server_PortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Ntp_Server).Port
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_PreferPath represents the /openconfig-system/system/ntp/servers/server/state/prefer YANG schema element.
type System_Ntp_Server_PreferPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_PreferPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/prefer YANG schema element.
type System_Ntp_Server_PreferPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/prefer"
//	Path from root:       "/system/ntp/servers/server/state/prefer"
func (n *System_Ntp_Server_PreferPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Prefer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/prefer"
//	Path from root:       "/system/ntp/servers/server/state/prefer"
func (n *System_Ntp_Server_PreferPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Prefer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/prefer"
//	Path from root:       "/system/ntp/servers/server/config/prefer"
func (n *System_Ntp_Server_PreferPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Prefer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/prefer"
//	Path from root:       "/system/ntp/servers/server/config/prefer"
func (n *System_Ntp_Server_PreferPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Ntp_Server).Prefer
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_RootDelayPath represents the /openconfig-system/system/ntp/servers/server/state/root-delay YANG schema element.
type System_Ntp_Server_RootDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_RootDelayPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/root-delay YANG schema element.
type System_Ntp_Server_RootDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-delay"
//	Path from root:       "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_Server_RootDelayPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "root-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Ntp_Server).RootDelay
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-delay"
//	Path from root:       "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_Server_RootDelayPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "root-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Ntp_Server).RootDelay
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_RootDispersionPath represents the /openconfig-system/system/ntp/servers/server/state/root-dispersion YANG schema element.
type System_Ntp_Server_RootDispersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_RootDispersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/root-dispersion YANG schema element.
type System_Ntp_Server_RootDispersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-dispersion"
//	Path from root:       "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_Server_RootDispersionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "root-dispersion"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Ntp_Server).RootDispersion
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-dispersion"
//	Path from root:       "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_Server_RootDispersionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "root-dispersion"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Ntp_Server).RootDispersion
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_SourceAddressPath represents the /openconfig-system/system/ntp/servers/server/state/source-address YANG schema element.
type System_Ntp_Server_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/source-address YANG schema element.
type System_Ntp_Server_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/ntp/servers/server/state/source-address"
func (n *System_Ntp_Server_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/ntp/servers/server/state/source-address"
func (n *System_Ntp_Server_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/ntp/servers/server/config/source-address"
func (n *System_Ntp_Server_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/ntp/servers/server/config/source-address"
func (n *System_Ntp_Server_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Ntp_Server).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_StratumPath represents the /openconfig-system/system/ntp/servers/server/state/stratum YANG schema element.
type System_Ntp_Server_StratumPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_StratumPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/stratum YANG schema element.
type System_Ntp_Server_StratumPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/stratum"
//	Path from root:       "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_Server_StratumPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "stratum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Stratum
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/stratum"
//	Path from root:       "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_Server_StratumPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "stratum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Stratum
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_Server_VersionPath represents the /openconfig-system/system/ntp/servers/server/state/version YANG schema element.
type System_Ntp_Server_VersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Ntp_Server_VersionPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server/state/version YANG schema element.
type System_Ntp_Server_VersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/version"
//	Path from root:       "/system/ntp/servers/server/state/version"
func (n *System_Ntp_Server_VersionPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/version"
//	Path from root:       "/system/ntp/servers/server/state/version"
func (n *System_Ntp_Server_VersionPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Ntp_Server",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/version"
//	Path from root:       "/system/ntp/servers/server/config/version"
func (n *System_Ntp_Server_VersionPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/version"
//	Path from root:       "/system/ntp/servers/server/config/version"
func (n *System_Ntp_Server_VersionPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Ntp_Server",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Ntp_Server).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp_Server) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Ntp_ServerPath represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPath struct {
	*ygnmi.NodePath
}

// System_Ntp_ServerPathAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPathAny struct {
	*ygnmi.NodePath
}

// System_Ntp_ServerPathMap represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPathMap struct {
	*ygnmi.NodePath
}

// System_Ntp_ServerPathMapAny represents the wildcard version of the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_ServerPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): The address or hostname of the NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/address"
//	Path from root:       "/system/ntp/servers/server/*/address"
func (n *System_Ntp_ServerPath) Address() *System_Ntp_Server_AddressPath {
	ps := &System_Ntp_Server_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): The address or hostname of the NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/address"
//	Path from root:       "/system/ntp/servers/server/*/address"
func (n *System_Ntp_ServerPathAny) Address() *System_Ntp_Server_AddressPathAny {
	ps := &System_Ntp_Server_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociationType (leaf): The desired association type for this NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/association-type"
//	Path from root:       "/system/ntp/servers/server/*/association-type"
func (n *System_Ntp_ServerPath) AssociationType() *System_Ntp_Server_AssociationTypePath {
	ps := &System_Ntp_Server_AssociationTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "association-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociationType (leaf): The desired association type for this NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/association-type"
//	Path from root:       "/system/ntp/servers/server/*/association-type"
func (n *System_Ntp_ServerPathAny) AssociationType() *System_Ntp_Server_AssociationTypePathAny {
	ps := &System_Ntp_Server_AssociationTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "association-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/iburst"
//	Path from root:       "/system/ntp/servers/server/*/iburst"
func (n *System_Ntp_ServerPath) Iburst() *System_Ntp_Server_IburstPath {
	ps := &System_Ntp_Server_IburstPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "iburst"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Iburst (leaf): Indicates whether this server should enable burst
// synchronization or not.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/iburst"
//	Path from root:       "/system/ntp/servers/server/*/iburst"
func (n *System_Ntp_ServerPathAny) Iburst() *System_Ntp_Server_IburstPathAny {
	ps := &System_Ntp_Server_IburstPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "iburst"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance used to find this server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/ntp/servers/server/*/network-instance"
func (n *System_Ntp_ServerPath) NetworkInstance() *System_Ntp_Server_NetworkInstancePath {
	ps := &System_Ntp_Server_NetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance used to find this server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/ntp/servers/server/*/network-instance"
func (n *System_Ntp_ServerPathAny) NetworkInstance() *System_Ntp_Server_NetworkInstancePathAny {
	ps := &System_Ntp_Server_NetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Offset (leaf): Estimate of the current time offset from the peer.  This is
// the time difference between the local and reference clock.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/offset"
//	Path from root:       "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_ServerPath) Offset() *System_Ntp_Server_OffsetPath {
	ps := &System_Ntp_Server_OffsetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "offset"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Offset (leaf): Estimate of the current time offset from the peer.  This is
// the time difference between the local and reference clock.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/offset"
//	Path from root:       "/system/ntp/servers/server/state/offset"
func (n *System_Ntp_ServerPathAny) Offset() *System_Ntp_Server_OffsetPathAny {
	ps := &System_Ntp_Server_OffsetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "offset"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PollInterval (leaf): Polling interval of the peer
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/poll-interval"
//	Path from root:       "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_ServerPath) PollInterval() *System_Ntp_Server_PollIntervalPath {
	ps := &System_Ntp_Server_PollIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "poll-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PollInterval (leaf): Polling interval of the peer
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/poll-interval"
//	Path from root:       "/system/ntp/servers/server/state/poll-interval"
func (n *System_Ntp_ServerPathAny) PollInterval() *System_Ntp_Server_PollIntervalPathAny {
	ps := &System_Ntp_Server_PollIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "poll-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): The port number of the NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/ntp/servers/server/*/port"
func (n *System_Ntp_ServerPath) Port() *System_Ntp_Server_PortPath {
	ps := &System_Ntp_Server_PortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Port (leaf): The port number of the NTP server.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/port"
//	Path from root:       "/system/ntp/servers/server/*/port"
func (n *System_Ntp_ServerPathAny) Port() *System_Ntp_Server_PortPathAny {
	ps := &System_Ntp_Server_PortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/prefer"
//	Path from root:       "/system/ntp/servers/server/*/prefer"
func (n *System_Ntp_ServerPath) Prefer() *System_Ntp_Server_PreferPath {
	ps := &System_Ntp_Server_PreferPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefer (leaf): Indicates whether this server should be preferred
// or not.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/prefer"
//	Path from root:       "/system/ntp/servers/server/*/prefer"
func (n *System_Ntp_ServerPathAny) Prefer() *System_Ntp_Server_PreferPathAny {
	ps := &System_Ntp_Server_PreferPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RootDelay (leaf): The round-trip delay to the server, in milliseconds.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-delay"
//	Path from root:       "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_ServerPath) RootDelay() *System_Ntp_Server_RootDelayPath {
	ps := &System_Ntp_Server_RootDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "root-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RootDelay (leaf): The round-trip delay to the server, in milliseconds.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-delay"
//	Path from root:       "/system/ntp/servers/server/state/root-delay"
func (n *System_Ntp_ServerPathAny) RootDelay() *System_Ntp_Server_RootDelayPathAny {
	ps := &System_Ntp_Server_RootDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "root-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RootDispersion (leaf): Dispersion (epsilon) represents the maximum error inherent
// in the measurement
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-dispersion"
//	Path from root:       "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_ServerPath) RootDispersion() *System_Ntp_Server_RootDispersionPath {
	ps := &System_Ntp_Server_RootDispersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "root-dispersion"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RootDispersion (leaf): Dispersion (epsilon) represents the maximum error inherent
// in the measurement
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/root-dispersion"
//	Path from root:       "/system/ntp/servers/server/state/root-dispersion"
func (n *System_Ntp_ServerPathAny) RootDispersion() *System_Ntp_Server_RootDispersionPathAny {
	ps := &System_Ntp_Server_RootDispersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "root-dispersion"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source address to use on outgoing NTP packets
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/ntp/servers/server/*/source-address"
func (n *System_Ntp_ServerPath) SourceAddress() *System_Ntp_Server_SourceAddressPath {
	ps := &System_Ntp_Server_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source address to use on outgoing NTP packets
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/ntp/servers/server/*/source-address"
func (n *System_Ntp_ServerPathAny) SourceAddress() *System_Ntp_Server_SourceAddressPathAny {
	ps := &System_Ntp_Server_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Stratum (leaf): Indicates the level of the server in the NTP hierarchy. As
// stratum number increases, the accuracy is degraded.  Primary
// servers are stratum while a maximum value of 16 indicates
// unsynchronized.  The values have the following specific
// semantics:
//
// | 0      | unspecified or invalid
// | 1      | primary server (e.g., equipped with a GPS receiver)
// | 2-15   | secondary server (via NTP)
// | 16     | unsynchronized
// | 17-255 | reserved
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/stratum"
//	Path from root:       "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_ServerPath) Stratum() *System_Ntp_Server_StratumPath {
	ps := &System_Ntp_Server_StratumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "stratum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Stratum (leaf): Indicates the level of the server in the NTP hierarchy. As
// stratum number increases, the accuracy is degraded.  Primary
// servers are stratum while a maximum value of 16 indicates
// unsynchronized.  The values have the following specific
// semantics:
//
// | 0      | unspecified or invalid
// | 1      | primary server (e.g., equipped with a GPS receiver)
// | 2-15   | secondary server (via NTP)
// | 16     | unsynchronized
// | 17-255 | reserved
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/stratum"
//	Path from root:       "/system/ntp/servers/server/state/stratum"
func (n *System_Ntp_ServerPathAny) Stratum() *System_Ntp_Server_StratumPathAny {
	ps := &System_Ntp_Server_StratumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "stratum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): Version number to put in outgoing NTP packets
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/version"
//	Path from root:       "/system/ntp/servers/server/*/version"
func (n *System_Ntp_ServerPath) Version() *System_Ntp_Server_VersionPath {
	ps := &System_Ntp_Server_VersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): Version number to put in outgoing NTP packets
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/version"
//	Path from root:       "/system/ntp/servers/server/*/version"
func (n *System_Ntp_ServerPathAny) Version() *System_Ntp_Server_VersionPathAny {
	ps := &System_Ntp_Server_VersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPath) State() ygnmi.SingletonQuery[*oc.System_Ntp_Server] {
	return ygnmi.NewSingletonQuery[*oc.System_Ntp_Server](
		"System_Ntp_Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathAny) State() ygnmi.WildcardQuery[*oc.System_Ntp_Server] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp_Server](
		"System_Ntp_Server",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPath) Config() ygnmi.ConfigQuery[*oc.System_Ntp_Server] {
	return ygnmi.NewConfigQuery[*oc.System_Ntp_Server](
		"System_Ntp_Server",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_Ntp_Server] {
	return ygnmi.NewWildcardQuery[*oc.System_Ntp_Server](
		"System_Ntp_Server",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Ntp_Server] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Ntp_Server](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Ntp_Server, bool) {
			ret := gs.(*oc.System_Ntp).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Ntp_Server] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Ntp_Server](
		"System_Ntp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Ntp_Server, bool) {
			ret := gs.(*oc.System_Ntp).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Ntp_Server] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Ntp_Server](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Ntp_Server, bool) {
			ret := gs.(*oc.System_Ntp).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Ntp_ServerPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Ntp_Server] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Ntp_Server](
		"System_Ntp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Ntp_Server, bool) {
			ret := gs.(*oc.System_Ntp).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Ntp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// System_Process_ArgsPath represents the /openconfig-system/system/processes/process/state/args YANG schema element.
type System_Process_ArgsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_ArgsPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/args YANG schema element.
type System_Process_ArgsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/args"
//	Path from root:       "/system/processes/process/state/args"
func (n *System_Process_ArgsPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Process",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "args"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Process).Args
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/args"
//	Path from root:       "/system/processes/process/state/args"
func (n *System_Process_ArgsPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Process",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "args"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Process).Args
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_CpuUsageSystemPath represents the /openconfig-system/system/processes/process/state/cpu-usage-system YANG schema element.
type System_Process_CpuUsageSystemPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_CpuUsageSystemPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-usage-system YANG schema element.
type System_Process_CpuUsageSystemPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-system"
//	Path from root:       "/system/processes/process/state/cpu-usage-system"
func (n *System_Process_CpuUsageSystemPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).CpuUsageSystem
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-system"
//	Path from root:       "/system/processes/process/state/cpu-usage-system"
func (n *System_Process_CpuUsageSystemPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).CpuUsageSystem
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_CpuUsageUserPath represents the /openconfig-system/system/processes/process/state/cpu-usage-user YANG schema element.
type System_Process_CpuUsageUserPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_CpuUsageUserPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-usage-user YANG schema element.
type System_Process_CpuUsageUserPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-user"
//	Path from root:       "/system/processes/process/state/cpu-usage-user"
func (n *System_Process_CpuUsageUserPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).CpuUsageUser
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-user"
//	Path from root:       "/system/processes/process/state/cpu-usage-user"
func (n *System_Process_CpuUsageUserPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).CpuUsageUser
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_CpuUtilizationPath represents the /openconfig-system/system/processes/process/state/cpu-utilization YANG schema element.
type System_Process_CpuUtilizationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_CpuUtilizationPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/cpu-utilization YANG schema element.
type System_Process_CpuUtilizationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-utilization"
//	Path from root:       "/system/processes/process/state/cpu-utilization"
func (n *System_Process_CpuUtilizationPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Process).CpuUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-utilization"
//	Path from root:       "/system/processes/process/state/cpu-utilization"
func (n *System_Process_CpuUtilizationPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cpu-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Process).CpuUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_MemoryUsagePath represents the /openconfig-system/system/processes/process/state/memory-usage YANG schema element.
type System_Process_MemoryUsagePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_MemoryUsagePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/memory-usage YANG schema element.
type System_Process_MemoryUsagePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-usage"
//	Path from root:       "/system/processes/process/state/memory-usage"
func (n *System_Process_MemoryUsagePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-usage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).MemoryUsage
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-usage"
//	Path from root:       "/system/processes/process/state/memory-usage"
func (n *System_Process_MemoryUsagePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-usage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).MemoryUsage
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_MemoryUtilizationPath represents the /openconfig-system/system/processes/process/state/memory-utilization YANG schema element.
type System_Process_MemoryUtilizationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_MemoryUtilizationPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/memory-utilization YANG schema element.
type System_Process_MemoryUtilizationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-utilization"
//	Path from root:       "/system/processes/process/state/memory-utilization"
func (n *System_Process_MemoryUtilizationPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Process).MemoryUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-utilization"
//	Path from root:       "/system/processes/process/state/memory-utilization"
func (n *System_Process_MemoryUtilizationPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Process).MemoryUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_NamePath represents the /openconfig-system/system/processes/process/state/name YANG schema element.
type System_Process_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_NamePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/name YANG schema element.
type System_Process_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/processes/process/state/name"
func (n *System_Process_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Process).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/processes/process/state/name"
func (n *System_Process_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Process).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_PidPath represents the /openconfig-system/system/processes/process/state/pid YANG schema element.
type System_Process_PidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_PidPathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/pid YANG schema element.
type System_Process_PidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/pid"
//	Path from root:       "/system/processes/process/state/pid"
func (n *System_Process_PidPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).Pid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/pid"
//	Path from root:       "/system/processes/process/state/pid"
func (n *System_Process_PidPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).Pid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "pid"
//	Path from root:       ""
func (n *System_Process_PidPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"System_Process",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"pid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).Pid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "pid"
//	Path from root:       ""
func (n *System_Process_PidPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"pid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).Pid
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Process_StartTimePath represents the /openconfig-system/system/processes/process/state/start-time YANG schema element.
type System_Process_StartTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Process_StartTimePathAny represents the wildcard version of the /openconfig-system/system/processes/process/state/start-time YANG schema element.
type System_Process_StartTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/start-time"
//	Path from root:       "/system/processes/process/state/start-time"
func (n *System_Process_StartTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/start-time"
//	Path from root:       "/system/processes/process/state/start-time"
func (n *System_Process_StartTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Process",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Process).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Process) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_ProcessPath represents the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPath struct {
	*ygnmi.NodePath
}

// System_ProcessPathAny represents the wildcard version of the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPathAny struct {
	*ygnmi.NodePath
}

// System_ProcessPathMap represents the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPathMap struct {
	*ygnmi.NodePath
}

// System_ProcessPathMapAny represents the wildcard version of the /openconfig-system/system/processes/process YANG schema element.
type System_ProcessPathMapAny struct {
	*ygnmi.NodePath
}

// Args (leaf-list): Current process command line arguments.  Arguments with
// a parameter (e.g., --option 10  or -option=10) should be
// represented as a single element of the list with the
// argument name and parameter together.  Flag arguments, i.e.,
// those without a parameter should also be in their own list
// element.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/args"
//	Path from root:       "/system/processes/process/state/args"
func (n *System_ProcessPath) Args() *System_Process_ArgsPath {
	ps := &System_Process_ArgsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "args"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Args (leaf-list): Current process command line arguments.  Arguments with
// a parameter (e.g., --option 10  or -option=10) should be
// represented as a single element of the list with the
// argument name and parameter together.  Flag arguments, i.e.,
// those without a parameter should also be in their own list
// element.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/args"
//	Path from root:       "/system/processes/process/state/args"
func (n *System_ProcessPathAny) Args() *System_Process_ArgsPathAny {
	ps := &System_Process_ArgsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "args"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUsageSystem (leaf): CPU time consumed by this process in kernel mode.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-system"
//	Path from root:       "/system/processes/process/state/cpu-usage-system"
func (n *System_ProcessPath) CpuUsageSystem() *System_Process_CpuUsageSystemPath {
	ps := &System_Process_CpuUsageSystemPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUsageSystem (leaf): CPU time consumed by this process in kernel mode.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-system"
//	Path from root:       "/system/processes/process/state/cpu-usage-system"
func (n *System_ProcessPathAny) CpuUsageSystem() *System_Process_CpuUsageSystemPathAny {
	ps := &System_Process_CpuUsageSystemPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-system"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUsageUser (leaf): CPU time consumed by this process in user mode in
// nanoseconds.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-user"
//	Path from root:       "/system/processes/process/state/cpu-usage-user"
func (n *System_ProcessPath) CpuUsageUser() *System_Process_CpuUsageUserPath {
	ps := &System_Process_CpuUsageUserPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUsageUser (leaf): CPU time consumed by this process in user mode in
// nanoseconds.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-usage-user"
//	Path from root:       "/system/processes/process/state/cpu-usage-user"
func (n *System_ProcessPathAny) CpuUsageUser() *System_Process_CpuUsageUserPathAny {
	ps := &System_Process_CpuUsageUserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-usage-user"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUtilization (leaf): The percentage of CPU that is being used by the process.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-utilization"
//	Path from root:       "/system/processes/process/state/cpu-utilization"
func (n *System_ProcessPath) CpuUtilization() *System_Process_CpuUtilizationPath {
	ps := &System_Process_CpuUtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpuUtilization (leaf): The percentage of CPU that is being used by the process.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/cpu-utilization"
//	Path from root:       "/system/processes/process/state/cpu-utilization"
func (n *System_ProcessPathAny) CpuUtilization() *System_Process_CpuUtilizationPathAny {
	ps := &System_Process_CpuUtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cpu-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryUsage (leaf): Bytes allocated and still in use by the process
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-usage"
//	Path from root:       "/system/processes/process/state/memory-usage"
func (n *System_ProcessPath) MemoryUsage() *System_Process_MemoryUsagePath {
	ps := &System_Process_MemoryUsagePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-usage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryUsage (leaf): Bytes allocated and still in use by the process
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-usage"
//	Path from root:       "/system/processes/process/state/memory-usage"
func (n *System_ProcessPathAny) MemoryUsage() *System_Process_MemoryUsagePathAny {
	ps := &System_Process_MemoryUsagePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-usage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryUtilization (leaf): The percentage of RAM that is being used by the process.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-utilization"
//	Path from root:       "/system/processes/process/state/memory-utilization"
func (n *System_ProcessPath) MemoryUtilization() *System_Process_MemoryUtilizationPath {
	ps := &System_Process_MemoryUtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryUtilization (leaf): The percentage of RAM that is being used by the process.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/memory-utilization"
//	Path from root:       "/system/processes/process/state/memory-utilization"
func (n *System_ProcessPathAny) MemoryUtilization() *System_Process_MemoryUtilizationPathAny {
	ps := &System_Process_MemoryUtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The process name
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/processes/process/state/name"
func (n *System_ProcessPath) Name() *System_Process_NamePath {
	ps := &System_Process_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The process name
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/name"
//	Path from root:       "/system/processes/process/state/name"
func (n *System_ProcessPathAny) Name() *System_Process_NamePathAny {
	ps := &System_Process_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Pid (leaf): The process pid
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/pid"
//	Path from root:       "/system/processes/process/*/pid"
func (n *System_ProcessPath) Pid() *System_Process_PidPath {
	ps := &System_Process_PidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Pid (leaf): The process pid
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/pid"
//	Path from root:       "/system/processes/process/*/pid"
func (n *System_ProcessPathAny) Pid() *System_Process_PidPathAny {
	ps := &System_Process_PidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartTime (leaf): The time at which this process started,
// relative to the UNIX epoch.  The system must be
// synchronized such that the start-time can be
// reported accurately, otherwise it should not be reported.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/start-time"
//	Path from root:       "/system/processes/process/state/start-time"
func (n *System_ProcessPath) StartTime() *System_Process_StartTimePath {
	ps := &System_Process_StartTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartTime (leaf): The time at which this process started,
// relative to the UNIX epoch.  The system must be
// synchronized such that the start-time can be
// reported accurately, otherwise it should not be reported.
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/start-time"
//	Path from root:       "/system/processes/process/state/start-time"
func (n *System_ProcessPathAny) StartTime() *System_Process_StartTimePathAny {
	ps := &System_Process_StartTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ProcessPath) State() ygnmi.SingletonQuery[*oc.System_Process] {
	return ygnmi.NewSingletonQuery[*oc.System_Process](
		"System_Process",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ProcessPathAny) State() ygnmi.WildcardQuery[*oc.System_Process] {
	return ygnmi.NewWildcardQuery[*oc.System_Process](
		"System_Process",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ProcessPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.System_Process] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.System_Process](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.System_Process, bool) {
			ret := gs.(*oc.System).Process
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:processes"},
			PostRelPath: []string{"openconfig-system:process"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_ProcessPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.System_Process] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.System_Process](
		"System",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.System_Process, bool) {
			ret := gs.(*oc.System).Process
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:processes"},
			PostRelPath: []string{"openconfig-system:process"},
		},
	)
}

// System_SshServer_ActiveTrustBundleCreatedOnPath represents the /openconfig-system/system/ssh-server/state/active-trust-bundle-created-on YANG schema element.
type System_SshServer_ActiveTrustBundleCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_ActiveTrustBundleCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/active-trust-bundle-created-on YANG schema element.
type System_SshServer_ActiveTrustBundleCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/active-trust-bundle-created-on"
//	Path from root:       "/system/ssh-server/state/active-trust-bundle-created-on"
func (n *System_SshServer_ActiveTrustBundleCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-trust-bundle-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer).ActiveTrustBundleCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/active-trust-bundle-created-on"
//	Path from root:       "/system/ssh-server/state/active-trust-bundle-created-on"
func (n *System_SshServer_ActiveTrustBundleCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-trust-bundle-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_SshServer).ActiveTrustBundleCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_ActiveTrustBundleVersionPath represents the /openconfig-system/system/ssh-server/state/active-trust-bundle-version YANG schema element.
type System_SshServer_ActiveTrustBundleVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_ActiveTrustBundleVersionPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/active-trust-bundle-version YANG schema element.
type System_SshServer_ActiveTrustBundleVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/active-trust-bundle-version"
//	Path from root:       "/system/ssh-server/state/active-trust-bundle-version"
func (n *System_SshServer_ActiveTrustBundleVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-trust-bundle-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_SshServer).ActiveTrustBundleVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "gnsi-ssh"
//	Path from parent:     "state/active-trust-bundle-version"
//	Path from root:       "/system/ssh-server/state/active-trust-bundle-version"
func (n *System_SshServer_ActiveTrustBundleVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-trust-bundle-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_SshServer).ActiveTrustBundleVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_EnablePath represents the /openconfig-system/system/ssh-server/state/enable YANG schema element.
type System_SshServer_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/enable YANG schema element.
type System_SshServer_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/ssh-server/state/enable"
func (n *System_SshServer_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_SshServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/ssh-server/state/enable"
func (n *System_SshServer_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_SshServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/ssh-server/config/enable"
func (n *System_SshServer_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_SshServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/ssh-server/config/enable"
func (n *System_SshServer_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_SshServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_ProtocolVersionPath represents the /openconfig-system/system/ssh-server/state/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_ProtocolVersionPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/protocol-version YANG schema element.
type System_SshServer_ProtocolVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/protocol-version"
//	Path from root:       "/system/ssh-server/state/protocol-version"
func (n *System_SshServer_ProtocolVersionPath) State() ygnmi.SingletonQuery[oc.E_SshServer_ProtocolVersion] {
	return ygnmi.NewSingletonQuery[oc.E_SshServer_ProtocolVersion](
		"System_SshServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SshServer_ProtocolVersion, bool) {
			ret := gs.(*oc.System_SshServer).ProtocolVersion
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/protocol-version"
//	Path from root:       "/system/ssh-server/state/protocol-version"
func (n *System_SshServer_ProtocolVersionPathAny) State() ygnmi.WildcardQuery[oc.E_SshServer_ProtocolVersion] {
	return ygnmi.NewWildcardQuery[oc.E_SshServer_ProtocolVersion](
		"System_SshServer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SshServer_ProtocolVersion, bool) {
			ret := gs.(*oc.System_SshServer).ProtocolVersion
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/protocol-version"
//	Path from root:       "/system/ssh-server/config/protocol-version"
func (n *System_SshServer_ProtocolVersionPath) Config() ygnmi.ConfigQuery[oc.E_SshServer_ProtocolVersion] {
	return ygnmi.NewConfigQuery[oc.E_SshServer_ProtocolVersion](
		"System_SshServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SshServer_ProtocolVersion, bool) {
			ret := gs.(*oc.System_SshServer).ProtocolVersion
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/protocol-version"
//	Path from root:       "/system/ssh-server/config/protocol-version"
func (n *System_SshServer_ProtocolVersionPathAny) Config() ygnmi.WildcardQuery[oc.E_SshServer_ProtocolVersion] {
	return ygnmi.NewWildcardQuery[oc.E_SshServer_ProtocolVersion](
		"System_SshServer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SshServer_ProtocolVersion, bool) {
			ret := gs.(*oc.System_SshServer).ProtocolVersion
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_RateLimitPath represents the /openconfig-system/system/ssh-server/state/rate-limit YANG schema element.
type System_SshServer_RateLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/rate-limit YANG schema element.
type System_SshServer_RateLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/system/ssh-server/state/rate-limit"
func (n *System_SshServer_RateLimitPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/system/ssh-server/state/rate-limit"
func (n *System_SshServer_RateLimitPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rate-limit"
//	Path from root:       "/system/ssh-server/config/rate-limit"
func (n *System_SshServer_RateLimitPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rate-limit"
//	Path from root:       "/system/ssh-server/config/rate-limit"
func (n *System_SshServer_RateLimitPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_SessionLimitPath represents the /openconfig-system/system/ssh-server/state/session-limit YANG schema element.
type System_SshServer_SessionLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/session-limit YANG schema element.
type System_SshServer_SessionLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/session-limit"
//	Path from root:       "/system/ssh-server/state/session-limit"
func (n *System_SshServer_SessionLimitPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/session-limit"
//	Path from root:       "/system/ssh-server/state/session-limit"
func (n *System_SshServer_SessionLimitPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/session-limit"
//	Path from root:       "/system/ssh-server/config/session-limit"
func (n *System_SshServer_SessionLimitPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/session-limit"
//	Path from root:       "/system/ssh-server/config/session-limit"
func (n *System_SshServer_SessionLimitPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServer_TimeoutPath represents the /openconfig-system/system/ssh-server/state/timeout YANG schema element.
type System_SshServer_TimeoutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SshServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/ssh-server/state/timeout YANG schema element.
type System_SshServer_TimeoutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/ssh-server/state/timeout"
func (n *System_SshServer_TimeoutPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/ssh-server/state/timeout"
func (n *System_SshServer_TimeoutPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/ssh-server/config/timeout"
func (n *System_SshServer_TimeoutPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/ssh-server/config/timeout"
func (n *System_SshServer_TimeoutPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_SshServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_SshServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_SshServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SshServerPath represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPath struct {
	*ygnmi.NodePath
}

// System_SshServerPathAny represents the wildcard version of the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServerPathAny struct {
	*ygnmi.NodePath
}

// ActiveTrustBundleCreatedOn (leaf): The timestamp of the moment when the bundle of the Certificate
// Authority certificates (a.k.a. trust bundle) was created.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-trust-bundle-created-on"
//	Path from root:       "/system/ssh-server/state/active-trust-bundle-created-on"
func (n *System_SshServerPath) ActiveTrustBundleCreatedOn() *System_SshServer_ActiveTrustBundleCreatedOnPath {
	ps := &System_SshServer_ActiveTrustBundleCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-trust-bundle-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveTrustBundleCreatedOn (leaf): The timestamp of the moment when the bundle of the Certificate
// Authority certificates (a.k.a. trust bundle) was created.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-trust-bundle-created-on"
//	Path from root:       "/system/ssh-server/state/active-trust-bundle-created-on"
func (n *System_SshServerPathAny) ActiveTrustBundleCreatedOn() *System_SshServer_ActiveTrustBundleCreatedOnPathAny {
	ps := &System_SshServer_ActiveTrustBundleCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-trust-bundle-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveTrustBundleVersion (leaf): The version of the bundle of the Certificate Authority
// certificates a.k.a. trust bundle.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-trust-bundle-version"
//	Path from root:       "/system/ssh-server/state/active-trust-bundle-version"
func (n *System_SshServerPath) ActiveTrustBundleVersion() *System_SshServer_ActiveTrustBundleVersionPath {
	ps := &System_SshServer_ActiveTrustBundleVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-trust-bundle-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveTrustBundleVersion (leaf): The version of the bundle of the Certificate Authority
// certificates a.k.a. trust bundle.
//
//	Defining module:      "gnsi-ssh"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active-trust-bundle-version"
//	Path from root:       "/system/ssh-server/state/active-trust-bundle-version"
func (n *System_SshServerPathAny) ActiveTrustBundleVersion() *System_SshServer_ActiveTrustBundleVersionPathAny {
	ps := &System_SshServer_ActiveTrustBundleVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-trust-bundle-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/ssh-server/*/enable"
func (n *System_SshServerPath) Enable() *System_SshServer_EnablePath {
	ps := &System_SshServer_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables the ssh server.  The ssh server is enabled by
// default.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/ssh-server/*/enable"
func (n *System_SshServerPathAny) Enable() *System_SshServer_EnablePathAny {
	ps := &System_SshServer_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/protocol-version"
//	Path from root:       "/system/ssh-server/*/protocol-version"
func (n *System_SshServerPath) ProtocolVersion() *System_SshServer_ProtocolVersionPath {
	ps := &System_SshServer_ProtocolVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtocolVersion (leaf): Set the protocol version for SSH connections to the system
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/protocol-version"
//	Path from root:       "/system/ssh-server/*/protocol-version"
func (n *System_SshServerPathAny) ProtocolVersion() *System_SshServer_ProtocolVersionPathAny {
	ps := &System_SshServer_ProtocolVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rate-limit"
//	Path from root:       "/system/ssh-server/*/rate-limit"
func (n *System_SshServerPath) RateLimit() *System_SshServer_RateLimitPath {
	ps := &System_SshServer_RateLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rate-limit"
//	Path from root:       "/system/ssh-server/*/rate-limit"
func (n *System_SshServerPathAny) RateLimit() *System_SshServer_RateLimitPathAny {
	ps := &System_SshServer_RateLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/session-limit"
//	Path from root:       "/system/ssh-server/*/session-limit"
func (n *System_SshServerPath) SessionLimit() *System_SshServer_SessionLimitPath {
	ps := &System_SshServer_SessionLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "session-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/session-limit"
//	Path from root:       "/system/ssh-server/*/session-limit"
func (n *System_SshServerPathAny) SessionLimit() *System_SshServer_SessionLimitPathAny {
	ps := &System_SshServer_SessionLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "session-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/ssh-server/*/timeout"
func (n *System_SshServerPath) Timeout() *System_SshServer_TimeoutPath {
	ps := &System_SshServer_TimeoutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/ssh-server/*/timeout"
func (n *System_SshServerPathAny) Timeout() *System_SshServer_TimeoutPathAny {
	ps := &System_SshServer_TimeoutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_SshServerPath) State() ygnmi.SingletonQuery[*oc.System_SshServer] {
	return ygnmi.NewSingletonQuery[*oc.System_SshServer](
		"System_SshServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_SshServerPathAny) State() ygnmi.WildcardQuery[*oc.System_SshServer] {
	return ygnmi.NewWildcardQuery[*oc.System_SshServer](
		"System_SshServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_SshServerPath) Config() ygnmi.ConfigQuery[*oc.System_SshServer] {
	return ygnmi.NewConfigQuery[*oc.System_SshServer](
		"System_SshServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_SshServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_SshServer] {
	return ygnmi.NewWildcardQuery[*oc.System_SshServer](
		"System_SshServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_TelnetServer_EnablePath represents the /openconfig-system/system/telnet-server/state/enable YANG schema element.
type System_TelnetServer_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_TelnetServer_EnablePathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/enable YANG schema element.
type System_TelnetServer_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/telnet-server/state/enable"
func (n *System_TelnetServer_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_TelnetServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/enable"
//	Path from root:       "/system/telnet-server/state/enable"
func (n *System_TelnetServer_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_TelnetServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/telnet-server/config/enable"
func (n *System_TelnetServer_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_TelnetServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/enable"
//	Path from root:       "/system/telnet-server/config/enable"
func (n *System_TelnetServer_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_TelnetServer).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_TelnetServer_RateLimitPath represents the /openconfig-system/system/telnet-server/state/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_TelnetServer_RateLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/rate-limit YANG schema element.
type System_TelnetServer_RateLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/system/telnet-server/state/rate-limit"
func (n *System_TelnetServer_RateLimitPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/system/telnet-server/state/rate-limit"
func (n *System_TelnetServer_RateLimitPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rate-limit"
//	Path from root:       "/system/telnet-server/config/rate-limit"
func (n *System_TelnetServer_RateLimitPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rate-limit"
//	Path from root:       "/system/telnet-server/config/rate-limit"
func (n *System_TelnetServer_RateLimitPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).RateLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_TelnetServer_SessionLimitPath represents the /openconfig-system/system/telnet-server/state/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_TelnetServer_SessionLimitPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/session-limit YANG schema element.
type System_TelnetServer_SessionLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/session-limit"
//	Path from root:       "/system/telnet-server/state/session-limit"
func (n *System_TelnetServer_SessionLimitPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/session-limit"
//	Path from root:       "/system/telnet-server/state/session-limit"
func (n *System_TelnetServer_SessionLimitPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/session-limit"
//	Path from root:       "/system/telnet-server/config/session-limit"
func (n *System_TelnetServer_SessionLimitPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/session-limit"
//	Path from root:       "/system/telnet-server/config/session-limit"
func (n *System_TelnetServer_SessionLimitPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "session-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).SessionLimit
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_TelnetServer_TimeoutPath represents the /openconfig-system/system/telnet-server/state/timeout YANG schema element.
type System_TelnetServer_TimeoutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_TelnetServer_TimeoutPathAny represents the wildcard version of the /openconfig-system/system/telnet-server/state/timeout YANG schema element.
type System_TelnetServer_TimeoutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/telnet-server/state/timeout"
func (n *System_TelnetServer_TimeoutPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/timeout"
//	Path from root:       "/system/telnet-server/state/timeout"
func (n *System_TelnetServer_TimeoutPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/telnet-server/config/timeout"
func (n *System_TelnetServer_TimeoutPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/timeout"
//	Path from root:       "/system/telnet-server/config/timeout"
func (n *System_TelnetServer_TimeoutPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_TelnetServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_TelnetServer).Timeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_TelnetServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_TelnetServerPath represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPath struct {
	*ygnmi.NodePath
}

// System_TelnetServerPathAny represents the wildcard version of the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServerPathAny struct {
	*ygnmi.NodePath
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/telnet-server/*/enable"
func (n *System_TelnetServerPath) Enable() *System_TelnetServer_EnablePath {
	ps := &System_TelnetServer_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables the telnet server.  Telnet is disabled by
// default
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/enable"
//	Path from root:       "/system/telnet-server/*/enable"
func (n *System_TelnetServerPathAny) Enable() *System_TelnetServer_EnablePathAny {
	ps := &System_TelnetServer_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rate-limit"
//	Path from root:       "/system/telnet-server/*/rate-limit"
func (n *System_TelnetServerPath) RateLimit() *System_TelnetServer_RateLimitPath {
	ps := &System_TelnetServer_RateLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Set a limit on the number of connection attempts per
// minute to the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rate-limit"
//	Path from root:       "/system/telnet-server/*/rate-limit"
func (n *System_TelnetServerPathAny) RateLimit() *System_TelnetServer_RateLimitPathAny {
	ps := &System_TelnetServer_RateLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/session-limit"
//	Path from root:       "/system/telnet-server/*/session-limit"
func (n *System_TelnetServerPath) SessionLimit() *System_TelnetServer_SessionLimitPath {
	ps := &System_TelnetServer_SessionLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "session-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionLimit (leaf): Set a limit on the number of simultaneous active terminal
// sessions to the system for the protocol (e.g., ssh,
// telnet, ...)
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/session-limit"
//	Path from root:       "/system/telnet-server/*/session-limit"
func (n *System_TelnetServerPathAny) SessionLimit() *System_TelnetServer_SessionLimitPathAny {
	ps := &System_TelnetServer_SessionLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "session-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/telnet-server/*/timeout"
func (n *System_TelnetServerPath) Timeout() *System_TelnetServer_TimeoutPath {
	ps := &System_TelnetServer_TimeoutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timeout (leaf): Set the idle timeout in seconds on terminal connections to
// the system for the protocol.
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/timeout"
//	Path from root:       "/system/telnet-server/*/timeout"
func (n *System_TelnetServerPathAny) Timeout() *System_TelnetServer_TimeoutPathAny {
	ps := &System_TelnetServer_TimeoutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_TelnetServerPath) State() ygnmi.SingletonQuery[*oc.System_TelnetServer] {
	return ygnmi.NewSingletonQuery[*oc.System_TelnetServer](
		"System_TelnetServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_TelnetServerPathAny) State() ygnmi.WildcardQuery[*oc.System_TelnetServer] {
	return ygnmi.NewWildcardQuery[*oc.System_TelnetServer](
		"System_TelnetServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_TelnetServerPath) Config() ygnmi.ConfigQuery[*oc.System_TelnetServer] {
	return ygnmi.NewConfigQuery[*oc.System_TelnetServer](
		"System_TelnetServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_TelnetServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_TelnetServer] {
	return ygnmi.NewWildcardQuery[*oc.System_TelnetServer](
		"System_TelnetServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
